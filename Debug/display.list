
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004918  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf0  08004bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000070  08004c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08004c68  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9a2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bde  00000000  00000000  0002ca42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002e620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218ae  00000000  00000000  0002fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de66  00000000  00000000  0005131e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb2f1  00000000  00000000  0005f184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a475  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee0  00000000  00000000  0012a4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ad0 	.word	0x08004ad0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004ad0 	.word	0x08004ad0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <project_to_larger_num_size>:
char display_buffer[DISPLAY_COLS * DISPLAY_ROWS / 8];

// original data: 01010110
// new data:	  000111000111000111111000

void project_to_larger_num_size(uint8_t original_data, int multiplier, uint8_t* new_data_ptr) {
 80005c4:	b480      	push	{r7}
 80005c6:	b08b      	sub	sp, #44	; 0x2c
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	73fb      	strb	r3, [r7, #15]
//	uint8_t new_data[MAX_SIZE] = {};
	int bit_shift_on_cur_idx = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
	int cur_idx = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
	for (int bit_to_project = 0; bit_to_project < 8; bit_to_project++) {
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
 80005de:	e044      	b.n	800066a <project_to_larger_num_size+0xa6>
		uint8_t bit = (original_data >> (7 - bit_to_project)) & 0x01;
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	f1c3 0307 	rsb	r3, r3, #7
 80005e8:	fa42 f303 	asr.w	r3, r2, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	75fb      	strb	r3, [r7, #23]
		for (int m = 0; m < multiplier; m++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	e030      	b.n	800065c <project_to_larger_num_size+0x98>
			uint8_t new_data_bit_selection_filter = 0x80 >> bit_shift_on_cur_idx;
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fe:	fa42 f303 	asr.w	r3, r2, r3
 8000602:	75bb      	strb	r3, [r7, #22]
//			uint8_t bit_shifted = bit << (7 - bit_shift_on_cur_idx);
			uint8_t bit_shifted = (bit == 1) ? new_data_bit_selection_filter : 0x00;
 8000604:	7dfb      	ldrb	r3, [r7, #23]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d101      	bne.n	800060e <project_to_larger_num_size+0x4a>
 800060a:	7dbb      	ldrb	r3, [r7, #22]
 800060c:	e000      	b.n	8000610 <project_to_larger_num_size+0x4c>
 800060e:	2300      	movs	r3, #0
 8000610:	757b      	strb	r3, [r7, #21]
			uint8_t prev_data = new_data_ptr[cur_idx];
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	753b      	strb	r3, [r7, #20]
			new_data_ptr[cur_idx] = (prev_data & ~new_data_bit_selection_filter) | bit_shifted;
 800061c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000620:	43db      	mvns	r3, r3
 8000622:	b25a      	sxtb	r2, r3
 8000624:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000628:	4013      	ands	r3, r2
 800062a:	b25a      	sxtb	r2, r3
 800062c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000630:	4313      	orrs	r3, r2
 8000632:	b259      	sxtb	r1, r3
 8000634:	6a3b      	ldr	r3, [r7, #32]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	b2ca      	uxtb	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
			if (bit_shift_on_cur_idx >= 7) {
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	2b06      	cmp	r3, #6
 8000642:	dd05      	ble.n	8000650 <project_to_larger_num_size+0x8c>
				bit_shift_on_cur_idx = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
				cur_idx += 1;
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	3301      	adds	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
 800064e:	e002      	b.n	8000656 <project_to_larger_num_size+0x92>
			} else {
				bit_shift_on_cur_idx += 1;
 8000650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000652:	3301      	adds	r3, #1
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
		for (int m = 0; m < multiplier; m++) {
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	3301      	adds	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
 800065c:	69ba      	ldr	r2, [r7, #24]
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	429a      	cmp	r2, r3
 8000662:	dbca      	blt.n	80005fa <project_to_larger_num_size+0x36>
	for (int bit_to_project = 0; bit_to_project < 8; bit_to_project++) {
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	3301      	adds	r3, #1
 8000668:	61fb      	str	r3, [r7, #28]
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	2b07      	cmp	r3, #7
 800066e:	ddb7      	ble.n	80005e0 <project_to_larger_num_size+0x1c>
			}
		}
	}

}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	372c      	adds	r7, #44	; 0x2c
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <min>:

int min(int a, int b) {
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
	return (a < b) ? a : b;
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4293      	cmp	r3, r2
 800068e:	bfa8      	it	ge
 8000690:	4613      	movge	r3, r2
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <draw_character>:

// TODO: add size capability
void draw_character(const uint8_t* start_of_data, int row, int size) {
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b091      	sub	sp, #68	; 0x44
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]

	if (horizontal_offsets_by_page[row] >= DISPLAY_COLS || row >= PAGE_ROWS) {
 80006ac:	4a50      	ldr	r2, [pc, #320]	; (80007f0 <draw_character+0x150>)
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	2b7f      	cmp	r3, #127	; 0x7f
 80006b6:	f300 8097 	bgt.w	80007e8 <draw_character+0x148>
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	f300 8093 	bgt.w	80007e8 <draw_character+0x148>
		return;
	}

	int horizontal_offset = horizontal_offsets_by_page[row];
 80006c2:	4a4b      	ldr	r2, [pc, #300]	; (80007f0 <draw_character+0x150>)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24

	for (int col = 0; col < FONT_WIDTH; col++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006d0:	e069      	b.n	80007a6 <draw_character+0x106>
		uint8_t data = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		for (int font_data_row = 0; font_data_row < FONT_HEIGHT; font_data_row++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
 80006dc:	e018      	b.n	8000710 <draw_character+0x70>
			data |= ((start_of_data[font_data_row] >> (7 - col)) & 0x01) << font_data_row;
 80006de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	fa42 f303 	asr.w	r3, r2, r3
 80006f2:	f003 0201 	and.w	r2, r3, #1
 80006f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000702:	4313      	orrs	r3, r2
 8000704:	b25b      	sxtb	r3, r3
 8000706:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		for (int font_data_row = 0; font_data_row < FONT_HEIGHT; font_data_row++) {
 800070a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800070c:	3301      	adds	r3, #1
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
 8000710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000712:	2b07      	cmp	r3, #7
 8000714:	dde3      	ble.n	80006de <draw_character+0x3e>
		}

		uint8_t new_data[MAX_SIZE] = {};
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	2300      	movs	r3, #0
 800071c:	763b      	strb	r3, [r7, #24]
		project_to_larger_num_size(data, size, new_data);
 800071e:	f107 0214 	add.w	r2, r7, #20
 8000722:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff4b 	bl	80005c4 <project_to_larger_num_size>
		for (int row_offset = 0; row_offset < size; row_offset++) {
 800072e:	2300      	movs	r3, #0
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
 8000732:	e02f      	b.n	8000794 <draw_character+0xf4>
			int cur_row = row + row_offset;
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000738:	4413      	add	r3, r2
 800073a:	623b      	str	r3, [r7, #32]
			if (cur_row >= DISPLAY_ROWS) break;
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	2b3f      	cmp	r3, #63	; 0x3f
 8000740:	dc2d      	bgt.n	800079e <draw_character+0xfe>
			for (int col_offset = 0; col_offset < size; col_offset++) {
 8000742:	2300      	movs	r3, #0
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000746:	e01c      	b.n	8000782 <draw_character+0xe2>
				int cur_col = (col * size) + col_offset + horizontal_offset;
 8000748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	fb03 f202 	mul.w	r2, r3, r2
 8000750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000752:	4413      	add	r3, r2
 8000754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000756:	4413      	add	r3, r2
 8000758:	61fb      	str	r3, [r7, #28]

				if (cur_col >= DISPLAY_COLS) {
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b7f      	cmp	r3, #127	; 0x7f
 800075e:	dc15      	bgt.n	800078c <draw_character+0xec>
					break;
				}

				display_buffer[(cur_row * DISPLAY_COLS) + cur_col] = new_data[size - 1 - row_offset];
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000766:	1ad2      	subs	r2, r2, r3
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	01d9      	lsls	r1, r3, #7
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	440b      	add	r3, r1
 8000770:	3240      	adds	r2, #64	; 0x40
 8000772:	443a      	add	r2, r7
 8000774:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 8000778:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <draw_character+0x154>)
 800077a:	54d1      	strb	r1, [r2, r3]
			for (int col_offset = 0; col_offset < size; col_offset++) {
 800077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077e:	3301      	adds	r3, #1
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	dbde      	blt.n	8000748 <draw_character+0xa8>
 800078a:	e000      	b.n	800078e <draw_character+0xee>
					break;
 800078c:	bf00      	nop
		for (int row_offset = 0; row_offset < size; row_offset++) {
 800078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000790:	3301      	adds	r3, #1
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
 8000794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbcb      	blt.n	8000734 <draw_character+0x94>
 800079c:	e000      	b.n	80007a0 <draw_character+0x100>
			if (cur_row >= DISPLAY_ROWS) break;
 800079e:	bf00      	nop
	for (int col = 0; col < FONT_WIDTH; col++) {
 80007a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007a2:	3301      	adds	r3, #1
 80007a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	dd92      	ble.n	80006d2 <draw_character+0x32>
			}
		}
	}

	for (int row_offset = 0; row_offset < size; row_offset++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b0:	e015      	b.n	80007de <draw_character+0x13e>
		horizontal_offsets_by_page[row + row_offset] = min(horizontal_offsets_by_page[row + row_offset] + (size * FONT_WIDTH), DISPLAY_COLS);
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b6:	4413      	add	r3, r2
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <draw_character+0x150>)
 80007ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	18d0      	adds	r0, r2, r3
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c8:	18d4      	adds	r4, r2, r3
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	f7ff ff57 	bl	800067e <min>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <draw_character+0x150>)
 80007d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (int row_offset = 0; row_offset < size; row_offset++) {
 80007d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007da:	3301      	adds	r3, #1
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80007de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbe5      	blt.n	80007b2 <draw_character+0x112>
 80007e6:	e000      	b.n	80007ea <draw_character+0x14a>
		return;
 80007e8:	bf00      	nop
	}
}
 80007ea:	3744      	adds	r7, #68	; 0x44
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	20000124 	.word	0x20000124
 80007f4:	20000144 	.word	0x20000144

080007f8 <draw_digit>:

void draw_digit(int digit, int row, int size) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
	int font_number_data_idx = digit * 8;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	617b      	str	r3, [r7, #20]
	draw_character(font_number_data + font_number_data_idx, row, size);
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	4a05      	ldr	r2, [pc, #20]	; (8000824 <draw_digit+0x2c>)
 800080e:	4413      	add	r3, r2
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff43 	bl	80006a0 <draw_character>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	08004b3c 	.word	0x08004b3c

08000828 <draw_date>:

void draw_date() {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

	int date_text_size = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	607b      	str	r3, [r7, #4]

	const int date_row = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
	draw_digit(0, date_row, date_text_size);
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ffdc 	bl	80007f8 <draw_digit>
	draw_digit(3, date_row, date_text_size);
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	6839      	ldr	r1, [r7, #0]
 8000844:	2003      	movs	r0, #3
 8000846:	f7ff ffd7 	bl	80007f8 <draw_digit>

	draw_character(font_char_data, date_row, date_text_size);
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6839      	ldr	r1, [r7, #0]
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <draw_date+0x48>)
 8000850:	f7ff ff26 	bl	80006a0 <draw_character>

	draw_digit(2, date_row, date_text_size);
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	6839      	ldr	r1, [r7, #0]
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff ffcd 	bl	80007f8 <draw_digit>
	draw_digit(6, date_row, date_text_size);
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	2006      	movs	r0, #6
 8000864:	f7ff ffc8 	bl	80007f8 <draw_digit>

}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	08004b8c 	.word	0x08004b8c

08000874 <draw_time>:

void draw_time() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

	int time_text_size = 3;
 800087a:	2303      	movs	r3, #3
 800087c:	607b      	str	r3, [r7, #4]

	const int time_row = 4;
 800087e:	2304      	movs	r3, #4
 8000880:	603b      	str	r3, [r7, #0]
	draw_digit(1, time_row, time_text_size);
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	6839      	ldr	r1, [r7, #0]
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff ffb6 	bl	80007f8 <draw_digit>
	draw_digit(2, time_row, time_text_size);
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	6839      	ldr	r1, [r7, #0]
 8000890:	2002      	movs	r0, #2
 8000892:	f7ff ffb1 	bl	80007f8 <draw_digit>

	draw_character(font_char_data + 8, time_row, time_text_size);
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <draw_time+0x4c>)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6839      	ldr	r1, [r7, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff feff 	bl	80006a0 <draw_character>

	draw_digit(2, time_row, time_text_size);
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	6839      	ldr	r1, [r7, #0]
 80008a6:	2002      	movs	r0, #2
 80008a8:	f7ff ffa6 	bl	80007f8 <draw_digit>
	draw_digit(4, time_row, time_text_size);
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	6839      	ldr	r1, [r7, #0]
 80008b0:	2004      	movs	r0, #4
 80008b2:	f7ff ffa1 	bl	80007f8 <draw_digit>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	08004b94 	.word	0x08004b94

080008c4 <print_to_screen>:

void print_to_screen(unsigned char* text) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, text, strlen((char*)text), HAL_MAX_DELAY);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fc9f 	bl	8000210 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <print_to_screen+0x28>)
 80008de:	f002 fc2c 	bl	800313a <HAL_UART_Transmit>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000e0 	.word	0x200000e0

080008f0 <send_data>:

void send_data(uint8_t* data, uint16_t size) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09e      	sub	sp, #120	; 0x78
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	807b      	strh	r3, [r7, #2]
	uint8_t padded_data[100];
	padded_data[0] = 0x40;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	723b      	strb	r3, [r7, #8]
	for (int i = 0; i < size; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000904:	e00c      	b.n	8000920 <send_data+0x30>
		padded_data[i+1] = data[i];
 8000906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	441a      	add	r2, r3
 800090c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800090e:	3301      	adds	r3, #1
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	3370      	adds	r3, #112	; 0x70
 8000914:	443b      	add	r3, r7
 8000916:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (int i = 0; i < size; i++) {
 800091a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800091c:	3301      	adds	r3, #1
 800091e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000920:	887b      	ldrh	r3, [r7, #2]
 8000922:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000924:	429a      	cmp	r2, r3
 8000926:	dbee      	blt.n	8000906 <send_data+0x16>
	}
	HAL_I2C_Master_Transmit(&hi2c1, DISPLAY_I2C_ADDR << 1, padded_data, size + 1, HAL_MAX_DELAY);
 8000928:	887b      	ldrh	r3, [r7, #2]
 800092a:	3301      	adds	r3, #1
 800092c:	b29b      	uxth	r3, r3
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	f04f 31ff 	mov.w	r1, #4294967295
 8000936:	9100      	str	r1, [sp, #0]
 8000938:	2178      	movs	r1, #120	; 0x78
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <send_data+0x58>)
 800093c:	f001 f992 	bl	8001c64 <HAL_I2C_Master_Transmit>
}
 8000940:	bf00      	nop
 8000942:	3770      	adds	r7, #112	; 0x70
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000008c 	.word	0x2000008c

0800094c <send_cmd_to_display>:

void send_cmd_to_display(uint8_t* data) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
	uint8_t padded_data[2];
	padded_data[0] = 0x00;
 8000954:	2300      	movs	r3, #0
 8000956:	733b      	strb	r3, [r7, #12]
	padded_data[1] = *data;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, DISPLAY_I2C_ADDR << 1, padded_data, 2, HAL_MAX_DELAY);
 800095e:	f107 020c 	add.w	r2, r7, #12
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2302      	movs	r3, #2
 800096a:	2178      	movs	r1, #120	; 0x78
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <send_cmd_to_display+0x30>)
 800096e:	f001 f979 	bl	8001c64 <HAL_I2C_Master_Transmit>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000008c 	.word	0x2000008c

08000980 <init_display>:

void init_display() {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
	uint8_t DISPLAY_OFF = 0xAE;
 8000986:	23ae      	movs	r3, #174	; 0xae
 8000988:	75fb      	strb	r3, [r7, #23]
	uint8_t DISPLAY_CLOCK_DIV = 0xD5;
 800098a:	23d5      	movs	r3, #213	; 0xd5
 800098c:	75bb      	strb	r3, [r7, #22]
	uint8_t DISPLAY_MULTIPLEX = 0xA8;
 800098e:	23a8      	movs	r3, #168	; 0xa8
 8000990:	757b      	strb	r3, [r7, #21]
	uint8_t DISPLAY_OFFSET = 0xD3;
 8000992:	23d3      	movs	r3, #211	; 0xd3
 8000994:	753b      	strb	r3, [r7, #20]
	uint8_t START_LINE = 0x40;
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	74fb      	strb	r3, [r7, #19]
	uint8_t CHARGE_PUMP = 0x8D;
 800099a:	238d      	movs	r3, #141	; 0x8d
 800099c:	74bb      	strb	r3, [r7, #18]
	uint8_t MEM_MODE = 0x20;
 800099e:	2320      	movs	r3, #32
 80009a0:	747b      	strb	r3, [r7, #17]
	uint8_t SEGREMAP = 0xA0 | 0x01;
 80009a2:	23a1      	movs	r3, #161	; 0xa1
 80009a4:	743b      	strb	r3, [r7, #16]
	uint8_t COMSCANDEC = 0xC8;
 80009a6:	23c8      	movs	r3, #200	; 0xc8
 80009a8:	73fb      	strb	r3, [r7, #15]
	uint8_t SETCOMPINS = 0xDA;
 80009aa:	23da      	movs	r3, #218	; 0xda
 80009ac:	73bb      	strb	r3, [r7, #14]
	uint8_t CONTRAST = 0x81;
 80009ae:	2381      	movs	r3, #129	; 0x81
 80009b0:	737b      	strb	r3, [r7, #13]
	uint8_t PRECHARGE = 0xD9;
 80009b2:	23d9      	movs	r3, #217	; 0xd9
 80009b4:	733b      	strb	r3, [r7, #12]
	uint8_t SETVCOMDETECT = 0xDB;
 80009b6:	23db      	movs	r3, #219	; 0xdb
 80009b8:	72fb      	strb	r3, [r7, #11]
	uint8_t DISPLAYALLON_RESUME = 0xA4;
 80009ba:	23a4      	movs	r3, #164	; 0xa4
 80009bc:	72bb      	strb	r3, [r7, #10]
	uint8_t NORMAL_DISPLAY = 0xA6;
 80009be:	23a6      	movs	r3, #166	; 0xa6
 80009c0:	727b      	strb	r3, [r7, #9]
	uint8_t DISPLAY_ON = 0xAF;
 80009c2:	23af      	movs	r3, #175	; 0xaf
 80009c4:	723b      	strb	r3, [r7, #8]
	uint8_t val;

	send_cmd_to_display(&DISPLAY_OFF);
 80009c6:	f107 0317 	add.w	r3, r7, #23
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffbe 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAY_CLOCK_DIV);
 80009d0:	f107 0316 	add.w	r3, r7, #22
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ffb9 	bl	800094c <send_cmd_to_display>
	val = 0x80;
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffb3 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAY_MULTIPLEX);
 80009e6:	f107 0315 	add.w	r3, r7, #21
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ffae 	bl	800094c <send_cmd_to_display>
	val = 0x3F;
 80009f0:	233f      	movs	r3, #63	; 0x3f
 80009f2:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffa8 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAY_OFFSET);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffa3 	bl	800094c <send_cmd_to_display>
	val = 0x00;
 8000a06:	2300      	movs	r3, #0
 8000a08:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff9d 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&START_LINE);
 8000a12:	f107 0313 	add.w	r3, r7, #19
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff98 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&CHARGE_PUMP);
 8000a1c:	f107 0312 	add.w	r3, r7, #18
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff93 	bl	800094c <send_cmd_to_display>
	val = 0x14;
 8000a26:	2314      	movs	r3, #20
 8000a28:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff8d 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&MEM_MODE);
 8000a32:	f107 0311 	add.w	r3, r7, #17
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff88 	bl	800094c <send_cmd_to_display>
	val = 0x00;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff82 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&SEGREMAP);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff7d 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&COMSCANDEC);
 8000a52:	f107 030f 	add.w	r3, r7, #15
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff78 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&SETCOMPINS);
 8000a5c:	f107 030e 	add.w	r3, r7, #14
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff73 	bl	800094c <send_cmd_to_display>
	val = 0x12;
 8000a66:	2312      	movs	r3, #18
 8000a68:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff6d 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&CONTRAST);
 8000a72:	f107 030d 	add.w	r3, r7, #13
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff68 	bl	800094c <send_cmd_to_display>
	val = 0xCF;
 8000a7c:	23cf      	movs	r3, #207	; 0xcf
 8000a7e:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff62 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&PRECHARGE);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff5d 	bl	800094c <send_cmd_to_display>
	val = 0xF1;
 8000a92:	23f1      	movs	r3, #241	; 0xf1
 8000a94:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff57 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&SETVCOMDETECT);
 8000a9e:	f107 030b 	add.w	r3, r7, #11
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff52 	bl	800094c <send_cmd_to_display>
	val = 0x40;
 8000aa8:	2340      	movs	r3, #64	; 0x40
 8000aaa:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff4c 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAYALLON_RESUME);
 8000ab4:	f107 030a 	add.w	r3, r7, #10
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff47 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&NORMAL_DISPLAY);
 8000abe:	f107 0309 	add.w	r3, r7, #9
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff42 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAY_ON);
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff3d 	bl	800094c <send_cmd_to_display>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <render_display>:

void render_display() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0

	uint8_t COLUMN_ADDR = 0x21;
 8000ae2:	2321      	movs	r3, #33	; 0x21
 8000ae4:	76fb      	strb	r3, [r7, #27]
	uint8_t zero = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	76bb      	strb	r3, [r7, #26]
	uint8_t RIGHT_MOST_COL = DISPLAY_COLS - 1;
 8000aea:	237f      	movs	r3, #127	; 0x7f
 8000aec:	767b      	strb	r3, [r7, #25]
	uint8_t PAGE_ADDR = 0x22;
 8000aee:	2322      	movs	r3, #34	; 0x22
 8000af0:	763b      	strb	r3, [r7, #24]
	uint8_t val = 7;
 8000af2:	2307      	movs	r3, #7
 8000af4:	75fb      	strb	r3, [r7, #23]

	send_cmd_to_display(&COLUMN_ADDR);
 8000af6:	f107 031b 	add.w	r3, r7, #27
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff26 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&zero);
 8000b00:	f107 031a 	add.w	r3, r7, #26
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff21 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&RIGHT_MOST_COL);
 8000b0a:	f107 0319 	add.w	r3, r7, #25
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff1c 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&PAGE_ADDR);
 8000b14:	f107 0318 	add.w	r3, r7, #24
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff17 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&zero);
 8000b1e:	f107 031a 	add.w	r3, r7, #26
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff12 	bl	800094c <send_cmd_to_display>
	send_cmd_to_display(&val);
 8000b28:	f107 0317 	add.w	r3, r7, #23
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff0d 	bl	800094c <send_cmd_to_display>

	uint16_t i;
	for (i = 0; i < DISPLAY_ROWS * DISPLAY_COLS / 8; i++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b36:	e023      	b.n	8000b80 <render_display+0xa4>
		uint8_t temp_buffer[16];
		int size_of_temp_buffer = sizeof(temp_buffer) / sizeof(temp_buffer[0]);
 8000b38:	2310      	movs	r3, #16
 8000b3a:	61fb      	str	r3, [r7, #28]
		for (int x = 0; x < size_of_temp_buffer; x++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
 8000b40:	e00d      	b.n	8000b5e <render_display+0x82>
			temp_buffer[x] = display_buffer[i];
 8000b42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <render_display+0xb8>)
 8000b46:	5cd1      	ldrb	r1, [r2, r3]
 8000b48:	1d3a      	adds	r2, r7, #4
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	460a      	mov	r2, r1
 8000b50:	701a      	strb	r2, [r3, #0]
			i++;
 8000b52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b54:	3301      	adds	r3, #1
 8000b56:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int x = 0; x < size_of_temp_buffer; x++) {
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	6a3a      	ldr	r2, [r7, #32]
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbed      	blt.n	8000b42 <render_display+0x66>
		}
		send_data(temp_buffer, size_of_temp_buffer);
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff febe 	bl	80008f0 <send_data>
		i--;
 8000b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b76:	3b01      	subs	r3, #1
 8000b78:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (i = 0; i < DISPLAY_ROWS * DISPLAY_COLS / 8; i++) {
 8000b7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b86:	d3d7      	bcc.n	8000b38 <render_display+0x5c>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000144 	.word	0x20000144

08000b98 <clear_display>:

void clear_display() {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	memset(display_buffer, 0, sizeof(display_buffer) / sizeof(display_buffer[0]));
 8000b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <clear_display+0x14>)
 8000ba4:	f003 fb1e 	bl	80041e4 <memset>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000144 	.word	0x20000144

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b096      	sub	sp, #88	; 0x58
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f000 fb4d 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 f851 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f000 f915 	bl	8000dec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc2:	f000 f8e9 	bl	8000d98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bc6:	f000 f8b9 	bl	8000d3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, buffer, sizeof(buffer));
 8000bca:	2201      	movs	r2, #1
 8000bcc:	491e      	ldr	r1, [pc, #120]	; (8000c48 <main+0x98>)
 8000bce:	481f      	ldr	r0, [pc, #124]	; (8000c4c <main+0x9c>)
 8000bd0:	f002 fb45 	bl	800325e <HAL_UART_Receive_IT>

  char buffer[20];
  sprintf(buffer, "test print\r\n");
 8000bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd8:	491d      	ldr	r1, [pc, #116]	; (8000c50 <main+0xa0>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fb0a 	bl	80041f4 <siprintf>
  print_to_screen((unsigned char*)buffer);
 8000be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe6d 	bl	80008c4 <print_to_screen>


  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, DISPLAY_I2C_ADDR << 1, 5, HAL_MAX_DELAY);
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	2205      	movs	r2, #5
 8000bf0:	2178      	movs	r1, #120	; 0x78
 8000bf2:	4818      	ldr	r0, [pc, #96]	; (8000c54 <main+0xa4>)
 8000bf4:	f001 f934 	bl	8001e60 <HAL_I2C_IsDeviceReady>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (ret != HAL_OK) {
 8000bfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00b      	beq.n	8000c1e <main+0x6e>
	  unsigned char buffer[20];
	  sprintf((char*)buffer, "error occurred\r\n");
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	4913      	ldr	r1, [pc, #76]	; (8000c58 <main+0xa8>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 faf1 	bl	80041f4 <siprintf>
	  print_to_screen(buffer);
 8000c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe54 	bl	80008c4 <print_to_screen>
 8000c1c:	e008      	b.n	8000c30 <main+0x80>
  } else {
	  unsigned char buffer[40];
	  sprintf((char*)buffer, "display module is ready\r\n");
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	490e      	ldr	r1, [pc, #56]	; (8000c5c <main+0xac>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fae6 	bl	80041f4 <siprintf>
	  print_to_screen(buffer);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe4a 	bl	80008c4 <print_to_screen>
  }

  init_display();
 8000c30:	f7ff fea6 	bl	8000980 <init_display>
  clear_display();
 8000c34:	f7ff ffb0 	bl	8000b98 <clear_display>
//  display_buffer[(2 * DISPLAY_COLS) + 15] = 0b00000000;
//  display_buffer[(3 * DISPLAY_COLS) + 15] = 0b00000000;



  draw_date();
 8000c38:	f7ff fdf6 	bl	8000828 <draw_date>
  draw_time();
 8000c3c:	f7ff fe1a 	bl	8000874 <draw_time>
  render_display();
 8000c40:	f7ff ff4c 	bl	8000adc <render_display>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <main+0x94>
 8000c46:	bf00      	nop
 8000c48:	20000544 	.word	0x20000544
 8000c4c:	200000e0 	.word	0x200000e0
 8000c50:	08004ae8 	.word	0x08004ae8
 8000c54:	2000008c 	.word	0x2000008c
 8000c58:	08004af8 	.word	0x08004af8
 8000c5c:	08004b0c 	.word	0x08004b0c

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	; 0x50
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2234      	movs	r2, #52	; 0x34
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 fab8 	bl	80041e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <SystemClock_Config+0xd4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a29      	ldr	r2, [pc, #164]	; (8000d34 <SystemClock_Config+0xd4>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <SystemClock_Config+0xd4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <SystemClock_Config+0xd8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cac:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <SystemClock_Config+0xd8>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <SystemClock_Config+0xd8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cd8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 ff38 	bl	8002b64 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cfa:	f000 f93f 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2302      	movs	r3, #2
 8000d04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fbd8 	bl	80024d0 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d26:	f000 f929 	bl	8000f7c <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	; 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000

08000d3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <MX_I2C1_Init+0x54>)
 8000d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_I2C1_Init+0x58>)
 8000d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d7a:	f000 fe2f 	bl	80019dc <HAL_I2C_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d84:	f000 f8fa 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000008c 	.word	0x2000008c
 8000d90:	40005400 	.word	0x40005400
 8000d94:	000186a0 	.word	0x000186a0

08000d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <MX_USART2_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f002 f966 	bl	80030a0 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f000 f8cf 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000e0 	.word	0x200000e0
 8000de8:	40004400 	.word	0x40004400

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a2c      	ldr	r2, [pc, #176]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_GPIO_Init+0xd0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <MX_GPIO_Init+0xd4>)
 8000e78:	f000 fd96 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_GPIO_Init+0xd8>)
 8000e94:	f000 fbf4 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_GPIO_Init+0xd4>)
 8000eb0:	f000 fbe6 	bl	8001680 <HAL_GPIO_Init>

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020800 	.word	0x40020800

08000ec8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b092      	sub	sp, #72	; 0x48
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

	clear_display();
 8000ed0:	f7ff fe62 	bl	8000b98 <clear_display>
	uint8_t row = buffer[0] - '0';
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <HAL_UART_RxCpltCallback+0xa4>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3b30      	subs	r3, #48	; 0x30
 8000eda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (row < 0 || row > 7) {
 8000ede:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	d913      	bls.n	8000f0e <HAL_UART_RxCpltCallback+0x46>
		uint8_t str_buffer[50];
		sprintf((char*)str_buffer, "row %c is invalid\r\n", buffer[0]);
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_UART_RxCpltCallback+0xa4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	491f      	ldr	r1, [pc, #124]	; (8000f70 <HAL_UART_RxCpltCallback+0xa8>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 f97e 	bl	80041f4 <siprintf>
		print_to_screen(str_buffer);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fce1 	bl	80008c4 <print_to_screen>
		HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	4919      	ldr	r1, [pc, #100]	; (8000f6c <HAL_UART_RxCpltCallback+0xa4>)
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <HAL_UART_RxCpltCallback+0xac>)
 8000f08:	f002 f9a9 	bl	800325e <HAL_UART_Receive_IT>
 8000f0c:	e02a      	b.n	8000f64 <HAL_UART_RxCpltCallback+0x9c>
		return;
	}
	for (int col = 0; col < DISPLAY_COLS; col++) {
 8000f0e:	2300      	movs	r3, #0
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
 8000f12:	e01d      	b.n	8000f50 <HAL_UART_RxCpltCallback+0x88>
		for (int i = row * 8; i < (row + 1) * 8; i++) {
 8000f14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8000f1c:	e00e      	b.n	8000f3c <HAL_UART_RxCpltCallback+0x74>
			display_buffer[((i * DISPLAY_COLS) + col) / 8] = 0xff;
 8000f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f20:	01da      	lsls	r2, r3, #7
 8000f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f24:	4413      	add	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	da00      	bge.n	8000f2c <HAL_UART_RxCpltCallback+0x64>
 8000f2a:	3307      	adds	r3, #7
 8000f2c:	10db      	asrs	r3, r3, #3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_UART_RxCpltCallback+0xb0>)
 8000f32:	21ff      	movs	r1, #255	; 0xff
 8000f34:	5499      	strb	r1, [r3, r2]
		for (int i = row * 8; i < (row + 1) * 8; i++) {
 8000f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f38:	3301      	adds	r3, #1
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8000f3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f40:	3301      	adds	r3, #1
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f46:	429a      	cmp	r2, r3
 8000f48:	dbe9      	blt.n	8000f1e <HAL_UART_RxCpltCallback+0x56>
	for (int col = 0; col < DISPLAY_COLS; col++) {
 8000f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8000f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f52:	2b7f      	cmp	r3, #127	; 0x7f
 8000f54:	ddde      	ble.n	8000f14 <HAL_UART_RxCpltCallback+0x4c>
		}
	}
	render_display();
 8000f56:	f7ff fdc1 	bl	8000adc <render_display>

	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4903      	ldr	r1, [pc, #12]	; (8000f6c <HAL_UART_RxCpltCallback+0xa4>)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_UART_RxCpltCallback+0xac>)
 8000f60:	f002 f97d 	bl	800325e <HAL_UART_Receive_IT>
}
 8000f64:	3748      	adds	r7, #72	; 0x48
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000544 	.word	0x20000544
 8000f70:	08004b28 	.word	0x08004b28
 8000f74:	200000e0 	.word	0x200000e0
 8000f78:	20000144 	.word	0x20000144

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f000 fa86 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_I2C_MspInit+0x84>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12c      	bne.n	8001054 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101c:	2312      	movs	r3, #18
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001028:	2304      	movs	r3, #4
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_I2C_MspInit+0x8c>)
 8001034:	f000 fb24 	bl	8001680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001042:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40005400 	.word	0x40005400
 8001060:	40023800 	.word	0x40023800
 8001064:	40020400 	.word	0x40020400

08001068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <HAL_UART_MspInit+0x94>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d133      	bne.n	80010f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_UART_MspInit+0x98>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_UART_MspInit+0x98>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_MspInit+0x98>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspInit+0x98>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspInit+0x98>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_UART_MspInit+0x98>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d2:	2307      	movs	r3, #7
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_UART_MspInit+0x9c>)
 80010de:	f000 facf 	bl	8001680 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2026      	movs	r0, #38	; 0x26
 80010e8:	f000 fa01 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ec:	2026      	movs	r0, #38	; 0x26
 80010ee:	f000 fa1a 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40004400 	.word	0x40004400
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f8d0 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <USART2_IRQHandler+0x10>)
 8001162:	f002 f8ad 	bl	80032c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000e0 	.word	0x200000e0

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f002 fff6 	bl	8004190 <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20020000 	.word	0x20020000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	20000548 	.word	0x20000548
 80011d8:	20000560 	.word	0x20000560

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	; (800124c <LoopFillZerobss+0x26>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122a:	f7ff ffd7 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f002 ffb5 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fcbd 	bl	8000bb0 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001244:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 8001248:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800124c:	20000560 	.word	0x20000560

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f92b 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fe7e 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f943 	bl	8001542 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f90b 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	2000054c 	.word	0x2000054c

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2000054c 	.word	0x2000054c

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff29 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff3e 	bl	8001380 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff8e 	bl	800142c <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff31 	bl	800139c <__NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffa2 	bl	8001494 <SysTick_Config>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff feda 	bl	8001320 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d008      	beq.n	800158c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e052      	b.n	8001632 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0216 	bic.w	r2, r2, #22
 800159a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <HAL_DMA_Abort+0x62>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0208 	bic.w	r2, r2, #8
 80015ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015dc:	e013      	b.n	8001606 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015de:	f7ff fe9f 	bl	8001320 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d90c      	bls.n	8001606 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2220      	movs	r2, #32
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e015      	b.n	8001632 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1e4      	bne.n	80015de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	223f      	movs	r2, #63	; 0x3f
 800161a:	409a      	lsls	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d004      	beq.n	8001658 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e00c      	b.n	8001672 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2205      	movs	r2, #5
 800165c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e165      	b.n	8001968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	f040 8154 	bne.w	8001962 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d005      	beq.n	80016d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d130      	bne.n	8001734 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 0201 	and.w	r2, r3, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b03      	cmp	r3, #3
 800173e:	d017      	beq.n	8001770 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d123      	bne.n	80017c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80ae 	beq.w	8001962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_GPIO_Init+0x300>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a5c      	ldr	r2, [pc, #368]	; (8001980 <HAL_GPIO_Init+0x300>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b5a      	ldr	r3, [pc, #360]	; (8001980 <HAL_GPIO_Init+0x300>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001822:	4a58      	ldr	r2, [pc, #352]	; (8001984 <HAL_GPIO_Init+0x304>)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4f      	ldr	r2, [pc, #316]	; (8001988 <HAL_GPIO_Init+0x308>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x21a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4e      	ldr	r2, [pc, #312]	; (800198c <HAL_GPIO_Init+0x30c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x216>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4d      	ldr	r2, [pc, #308]	; (8001990 <HAL_GPIO_Init+0x310>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x212>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4c      	ldr	r2, [pc, #304]	; (8001994 <HAL_GPIO_Init+0x314>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x20e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4b      	ldr	r2, [pc, #300]	; (8001998 <HAL_GPIO_Init+0x318>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x20a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_GPIO_Init+0x31c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x206>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x320>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x202>
 800187e:	2306      	movs	r3, #6
 8001880:	e00c      	b.n	800189c <HAL_GPIO_Init+0x21c>
 8001882:	2307      	movs	r3, #7
 8001884:	e00a      	b.n	800189c <HAL_GPIO_Init+0x21c>
 8001886:	2305      	movs	r3, #5
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x21c>
 800188a:	2304      	movs	r3, #4
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x21c>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x21c>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x21c>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x21c>
 800189a:	2300      	movs	r3, #0
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ac:	4935      	ldr	r1, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x304>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <HAL_GPIO_Init+0x324>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018de:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_GPIO_Init+0x324>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_GPIO_Init+0x324>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_GPIO_Init+0x324>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_GPIO_Init+0x324>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_GPIO_Init+0x324>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_GPIO_Init+0x324>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_GPIO_Init+0x324>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f ae96 	bls.w	800169c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40013800 	.word	0x40013800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020800 	.word	0x40020800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40021400 	.word	0x40021400
 80019a0:	40021800 	.word	0x40021800
 80019a4:	40013c00 	.word	0x40013c00

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c4:	e003      	b.n	80019ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e12b      	b.n	8001c46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fae8 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2224      	movs	r2, #36	; 0x24
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a40:	f000 fe38 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8001a44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a81      	ldr	r2, [pc, #516]	; (8001c50 <HAL_I2C_Init+0x274>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d807      	bhi.n	8001a60 <HAL_I2C_Init+0x84>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4a80      	ldr	r2, [pc, #512]	; (8001c54 <HAL_I2C_Init+0x278>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	bf94      	ite	ls
 8001a58:	2301      	movls	r3, #1
 8001a5a:	2300      	movhi	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e006      	b.n	8001a6e <HAL_I2C_Init+0x92>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a7d      	ldr	r2, [pc, #500]	; (8001c58 <HAL_I2C_Init+0x27c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	bf94      	ite	ls
 8001a68:	2301      	movls	r3, #1
 8001a6a:	2300      	movhi	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0e7      	b.n	8001c46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4a78      	ldr	r2, [pc, #480]	; (8001c5c <HAL_I2C_Init+0x280>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0c9b      	lsrs	r3, r3, #18
 8001a80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a6a      	ldr	r2, [pc, #424]	; (8001c50 <HAL_I2C_Init+0x274>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d802      	bhi.n	8001ab0 <HAL_I2C_Init+0xd4>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	e009      	b.n	8001ac4 <HAL_I2C_Init+0xe8>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	4a69      	ldr	r2, [pc, #420]	; (8001c60 <HAL_I2C_Init+0x284>)
 8001abc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ad6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	495c      	ldr	r1, [pc, #368]	; (8001c50 <HAL_I2C_Init+0x274>)
 8001ae0:	428b      	cmp	r3, r1
 8001ae2:	d819      	bhi.n	8001b18 <HAL_I2C_Init+0x13c>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1e59      	subs	r1, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af2:	1c59      	adds	r1, r3, #1
 8001af4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001af8:	400b      	ands	r3, r1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00a      	beq.n	8001b14 <HAL_I2C_Init+0x138>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1e59      	subs	r1, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b12:	e051      	b.n	8001bb8 <HAL_I2C_Init+0x1dc>
 8001b14:	2304      	movs	r3, #4
 8001b16:	e04f      	b.n	8001bb8 <HAL_I2C_Init+0x1dc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d111      	bne.n	8001b44 <HAL_I2C_Init+0x168>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1e58      	subs	r0, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	440b      	add	r3, r1
 8001b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	e012      	b.n	8001b6a <HAL_I2C_Init+0x18e>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	0099      	lsls	r1, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Init+0x196>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e022      	b.n	8001bb8 <HAL_I2C_Init+0x1dc>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10e      	bne.n	8001b98 <HAL_I2C_Init+0x1bc>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e58      	subs	r0, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	440b      	add	r3, r1
 8001b88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b96:	e00f      	b.n	8001bb8 <HAL_I2C_Init+0x1dc>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e58      	subs	r0, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	0099      	lsls	r1, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	6809      	ldr	r1, [r1, #0]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69da      	ldr	r2, [r3, #28]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001be6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6911      	ldr	r1, [r2, #16]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68d2      	ldr	r2, [r2, #12]
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	000186a0 	.word	0x000186a0
 8001c54:	001e847f 	.word	0x001e847f
 8001c58:	003d08ff 	.word	0x003d08ff
 8001c5c:	431bde83 	.word	0x431bde83
 8001c60:	10624dd3 	.word	0x10624dd3

08001c64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	460b      	mov	r3, r1
 8001c72:	817b      	strh	r3, [r7, #10]
 8001c74:	4613      	mov	r3, r2
 8001c76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff fb52 	bl	8001320 <HAL_GetTick>
 8001c7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	f040 80e0 	bne.w	8001e4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2319      	movs	r3, #25
 8001c92:	2201      	movs	r2, #1
 8001c94:	4970      	ldr	r1, [pc, #448]	; (8001e58 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 fa92 	bl	80021c0 <I2C_WaitOnFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e0d3      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_I2C_Master_Transmit+0x50>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e0cc      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x1ea>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d007      	beq.n	8001cda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2221      	movs	r2, #33	; 0x21
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	893a      	ldrh	r2, [r7, #8]
 8001d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a50      	ldr	r2, [pc, #320]	; (8001e5c <HAL_I2C_Master_Transmit+0x1f8>)
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d1c:	8979      	ldrh	r1, [r7, #10]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	6a3a      	ldr	r2, [r7, #32]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f9ca 	bl	80020bc <I2C_MasterRequestWrite>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e08d      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d48:	e066      	b.n	8001e18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 fb0c 	bl	800236c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d107      	bne.n	8001d72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e06b      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d11b      	bne.n	8001dec <HAL_I2C_Master_Transmit+0x188>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d017      	beq.n	8001dec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	6a39      	ldr	r1, [r7, #32]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fafc 	bl	80023ee <I2C_WaitOnBTFFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d107      	bne.n	8001e14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e01a      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d194      	bne.n	8001d4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	00100002 	.word	0x00100002
 8001e5c:	ffff0000 	.word	0xffff0000

08001e60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fa56 	bl	8001320 <HAL_GetTick>
 8001e74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	f040 8111 	bne.w	80020aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2319      	movs	r3, #25
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4988      	ldr	r1, [pc, #544]	; (80020b4 <HAL_I2C_IsDeviceReady+0x254>)
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f994 	bl	80021c0 <I2C_WaitOnFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e104      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2C_IsDeviceReady+0x50>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e0fd      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x24c>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d007      	beq.n	8001ed6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2224      	movs	r2, #36	; 0x24
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a70      	ldr	r2, [pc, #448]	; (80020b8 <HAL_I2C_IsDeviceReady+0x258>)
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f952 	bl	80021c0 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00d      	beq.n	8001f3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f30:	d103      	bne.n	8001f3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0b6      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f3e:	897b      	ldrh	r3, [r7, #10]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff f9e7 	bl	8001320 <HAL_GetTick>
 8001f52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f78:	bf0c      	ite	eq
 8001f7a:	2301      	moveq	r3, #1
 8001f7c:	2300      	movne	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f82:	e025      	b.n	8001fd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f84:	f7ff f9cc 	bl	8001320 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d302      	bcc.n	8001f9a <HAL_I2C_IsDeviceReady+0x13a>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	22a0      	movs	r2, #160	; 0xa0
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2ba0      	cmp	r3, #160	; 0xa0
 8001fda:	d005      	beq.n	8001fe8 <HAL_I2C_IsDeviceReady+0x188>
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_I2C_IsDeviceReady+0x188>
 8001fe2:	7dbb      	ldrb	r3, [r7, #22]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0cd      	beq.n	8001f84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d129      	bne.n	8002052 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	4921      	ldr	r1, [pc, #132]	; (80020b4 <HAL_I2C_IsDeviceReady+0x254>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f8c6 	bl	80021c0 <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e036      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e02c      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002060:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800206a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2319      	movs	r3, #25
 8002072:	2201      	movs	r2, #1
 8002074:	490f      	ldr	r1, [pc, #60]	; (80020b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f8a2 	bl	80021c0 <I2C_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e012      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3301      	adds	r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	f4ff af32 	bcc.w	8001efa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
  }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	00100002 	.word	0x00100002
 80020b8:	ffff0000 	.word	0xffff0000

080020bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	460b      	mov	r3, r1
 80020ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d006      	beq.n	80020e6 <I2C_MasterRequestWrite+0x2a>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d003      	beq.n	80020e6 <I2C_MasterRequestWrite+0x2a>
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020e4:	d108      	bne.n	80020f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e00b      	b.n	8002110 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	2b12      	cmp	r3, #18
 80020fe:	d107      	bne.n	8002110 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800210e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f84f 	bl	80021c0 <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002136:	d103      	bne.n	8002140 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e035      	b.n	80021b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800214c:	d108      	bne.n	8002160 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	e01b      	b.n	8002198 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002160:	897b      	ldrh	r3, [r7, #10]
 8002162:	11db      	asrs	r3, r3, #7
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f003 0306 	and.w	r3, r3, #6
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f063 030f 	orn	r3, r3, #15
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <I2C_MasterRequestWrite+0xfc>)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f875 	bl	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e010      	b.n	80021b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800218e:	897b      	ldrh	r3, [r7, #10]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4907      	ldr	r1, [pc, #28]	; (80021bc <I2C_MasterRequestWrite+0x100>)
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f865 	bl	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	00010008 	.word	0x00010008
 80021bc:	00010002 	.word	0x00010002

080021c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d0:	e025      	b.n	800221e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d021      	beq.n	800221e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021da:	f7ff f8a1 	bl	8001320 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d116      	bne.n	800221e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f043 0220 	orr.w	r2, r3, #32
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e023      	b.n	8002266 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10d      	bne.n	8002244 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	e00c      	b.n	800225e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4013      	ands	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	429a      	cmp	r2, r3
 8002262:	d0b6      	beq.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800227c:	e051      	b.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d123      	bne.n	80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f043 0204 	orr.w	r2, r3, #4
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e046      	b.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d021      	beq.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7ff f81f 	bl	8001320 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d116      	bne.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e020      	b.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10c      	bne.n	8002346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	e00b      	b.n	800235e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	43da      	mvns	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4013      	ands	r3, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf14      	ite	ne
 8002358:	2301      	movne	r3, #1
 800235a:	2300      	moveq	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d18d      	bne.n	800227e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002378:	e02d      	b.n	80023d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f878 	bl	8002470 <I2C_IsAcknowledgeFailed>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e02d      	b.n	80023e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d021      	beq.n	80023d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002392:	f7fe ffc5 	bl	8001320 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d302      	bcc.n	80023a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d116      	bne.n	80023d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e007      	b.n	80023e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d1ca      	bne.n	800237a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023fa:	e02d      	b.n	8002458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f837 	bl	8002470 <I2C_IsAcknowledgeFailed>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e02d      	b.n	8002468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d021      	beq.n	8002458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7fe ff84 	bl	8001320 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e007      	b.n	8002468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b04      	cmp	r3, #4
 8002464:	d1ca      	bne.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002486:	d11b      	bne.n	80024c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002490:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0204 	orr.w	r2, r3, #4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0cc      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d90c      	bls.n	800250c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b65      	ldr	r3, [pc, #404]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b8      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800252e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d044      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d119      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258a:	2b03      	cmp	r3, #3
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e067      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4934      	ldr	r1, [pc, #208]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7fe feae 	bl	8001320 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7fe feaa 	bl	8001320 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e04f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d20c      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e032      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002656:	f000 f855 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fe0e 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00
 800268c:	40023800 	.word	0x40023800
 8002690:	08004b9c 	.word	0x08004b9c
 8002694:	20000000 	.word	0x20000000
 8002698:	20000004 	.word	0x20000004

0800269c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff0 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08004bac 	.word	0x08004bac

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026e0:	f7ff ffdc 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0b5b      	lsrs	r3, r3, #13
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08004bac 	.word	0x08004bac

08002704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002708:	b0ae      	sub	sp, #184	; 0xb8
 800270a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800272a:	4bcb      	ldr	r3, [pc, #812]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b0c      	cmp	r3, #12
 8002734:	f200 8206 	bhi.w	8002b44 <HAL_RCC_GetSysClockFreq+0x440>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <HAL_RCC_GetSysClockFreq+0x3c>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002775 	.word	0x08002775
 8002744:	08002b45 	.word	0x08002b45
 8002748:	08002b45 	.word	0x08002b45
 800274c:	08002b45 	.word	0x08002b45
 8002750:	0800277d 	.word	0x0800277d
 8002754:	08002b45 	.word	0x08002b45
 8002758:	08002b45 	.word	0x08002b45
 800275c:	08002b45 	.word	0x08002b45
 8002760:	08002785 	.word	0x08002785
 8002764:	08002b45 	.word	0x08002b45
 8002768:	08002b45 	.word	0x08002b45
 800276c:	08002b45 	.word	0x08002b45
 8002770:	08002975 	.word	0x08002975
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4bb9      	ldr	r3, [pc, #740]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800277a:	e1e7      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277c:	4bb8      	ldr	r3, [pc, #736]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x35c>)
 800277e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002782:	e1e3      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002784:	4bb4      	ldr	r3, [pc, #720]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800278c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002790:	4bb1      	ldr	r3, [pc, #708]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d071      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279c:	4bae      	ldr	r3, [pc, #696]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027c2:	4622      	mov	r2, r4
 80027c4:	462b      	mov	r3, r5
 80027c6:	f04f 0000 	mov.w	r0, #0
 80027ca:	f04f 0100 	mov.w	r1, #0
 80027ce:	0159      	lsls	r1, r3, #5
 80027d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d4:	0150      	lsls	r0, r2, #5
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4621      	mov	r1, r4
 80027dc:	1a51      	subs	r1, r2, r1
 80027de:	6439      	str	r1, [r7, #64]	; 0x40
 80027e0:	4629      	mov	r1, r5
 80027e2:	eb63 0301 	sbc.w	r3, r3, r1
 80027e6:	647b      	str	r3, [r7, #68]	; 0x44
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80027f4:	4649      	mov	r1, r9
 80027f6:	018b      	lsls	r3, r1, #6
 80027f8:	4641      	mov	r1, r8
 80027fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027fe:	4641      	mov	r1, r8
 8002800:	018a      	lsls	r2, r1, #6
 8002802:	4641      	mov	r1, r8
 8002804:	1a51      	subs	r1, r2, r1
 8002806:	63b9      	str	r1, [r7, #56]	; 0x38
 8002808:	4649      	mov	r1, r9
 800280a:	eb63 0301 	sbc.w	r3, r3, r1
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800281c:	4649      	mov	r1, r9
 800281e:	00cb      	lsls	r3, r1, #3
 8002820:	4641      	mov	r1, r8
 8002822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002826:	4641      	mov	r1, r8
 8002828:	00ca      	lsls	r2, r1, #3
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	4603      	mov	r3, r0
 8002830:	4622      	mov	r2, r4
 8002832:	189b      	adds	r3, r3, r2
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
 8002836:	462b      	mov	r3, r5
 8002838:	460a      	mov	r2, r1
 800283a:	eb42 0303 	adc.w	r3, r2, r3
 800283e:	637b      	str	r3, [r7, #52]	; 0x34
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800284c:	4629      	mov	r1, r5
 800284e:	024b      	lsls	r3, r1, #9
 8002850:	4621      	mov	r1, r4
 8002852:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002856:	4621      	mov	r1, r4
 8002858:	024a      	lsls	r2, r1, #9
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002868:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800286c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002870:	f7fd fd26 	bl	80002c0 <__aeabi_uldivmod>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4613      	mov	r3, r2
 800287a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800287e:	e067      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002880:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800288c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002898:	67bb      	str	r3, [r7, #120]	; 0x78
 800289a:	2300      	movs	r3, #0
 800289c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800289e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80028a2:	4622      	mov	r2, r4
 80028a4:	462b      	mov	r3, r5
 80028a6:	f04f 0000 	mov.w	r0, #0
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	0159      	lsls	r1, r3, #5
 80028b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b4:	0150      	lsls	r0, r2, #5
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4621      	mov	r1, r4
 80028bc:	1a51      	subs	r1, r2, r1
 80028be:	62b9      	str	r1, [r7, #40]	; 0x28
 80028c0:	4629      	mov	r1, r5
 80028c2:	eb63 0301 	sbc.w	r3, r3, r1
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80028d4:	4649      	mov	r1, r9
 80028d6:	018b      	lsls	r3, r1, #6
 80028d8:	4641      	mov	r1, r8
 80028da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028de:	4641      	mov	r1, r8
 80028e0:	018a      	lsls	r2, r1, #6
 80028e2:	4641      	mov	r1, r8
 80028e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80028e8:	4649      	mov	r1, r9
 80028ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002902:	4692      	mov	sl, r2
 8002904:	469b      	mov	fp, r3
 8002906:	4623      	mov	r3, r4
 8002908:	eb1a 0303 	adds.w	r3, sl, r3
 800290c:	623b      	str	r3, [r7, #32]
 800290e:	462b      	mov	r3, r5
 8002910:	eb4b 0303 	adc.w	r3, fp, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002922:	4629      	mov	r1, r5
 8002924:	028b      	lsls	r3, r1, #10
 8002926:	4621      	mov	r1, r4
 8002928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800292c:	4621      	mov	r1, r4
 800292e:	028a      	lsls	r2, r1, #10
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002938:	2200      	movs	r2, #0
 800293a:	673b      	str	r3, [r7, #112]	; 0x70
 800293c:	677a      	str	r2, [r7, #116]	; 0x74
 800293e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002942:	f7fd fcbd 	bl	80002c0 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4613      	mov	r3, r2
 800294c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002950:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002972:	e0eb      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002974:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800297c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d06b      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x354>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	2200      	movs	r2, #0
 8002994:	66bb      	str	r3, [r7, #104]	; 0x68
 8002996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800299a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299e:	663b      	str	r3, [r7, #96]	; 0x60
 80029a0:	2300      	movs	r3, #0
 80029a2:	667b      	str	r3, [r7, #100]	; 0x64
 80029a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029a8:	4622      	mov	r2, r4
 80029aa:	462b      	mov	r3, r5
 80029ac:	f04f 0000 	mov.w	r0, #0
 80029b0:	f04f 0100 	mov.w	r1, #0
 80029b4:	0159      	lsls	r1, r3, #5
 80029b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ba:	0150      	lsls	r0, r2, #5
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4621      	mov	r1, r4
 80029c2:	1a51      	subs	r1, r2, r1
 80029c4:	61b9      	str	r1, [r7, #24]
 80029c6:	4629      	mov	r1, r5
 80029c8:	eb63 0301 	sbc.w	r3, r3, r1
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029da:	4659      	mov	r1, fp
 80029dc:	018b      	lsls	r3, r1, #6
 80029de:	4651      	mov	r1, sl
 80029e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029e4:	4651      	mov	r1, sl
 80029e6:	018a      	lsls	r2, r1, #6
 80029e8:	4651      	mov	r1, sl
 80029ea:	ebb2 0801 	subs.w	r8, r2, r1
 80029ee:	4659      	mov	r1, fp
 80029f0:	eb63 0901 	sbc.w	r9, r3, r1
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a08:	4690      	mov	r8, r2
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	4623      	mov	r3, r4
 8002a0e:	eb18 0303 	adds.w	r3, r8, r3
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	462b      	mov	r3, r5
 8002a16:	eb49 0303 	adc.w	r3, r9, r3
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a28:	4629      	mov	r1, r5
 8002a2a:	024b      	lsls	r3, r1, #9
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a32:	4621      	mov	r1, r4
 8002a34:	024a      	lsls	r2, r1, #9
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a3e:	2200      	movs	r2, #0
 8002a40:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a48:	f7fd fc3a 	bl	80002c0 <__aeabi_uldivmod>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4613      	mov	r3, r2
 8002a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a56:	e065      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x420>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	00f42400 	.word	0x00f42400
 8002a60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a64:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x458>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	4611      	mov	r1, r2
 8002a70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a74:	653b      	str	r3, [r7, #80]	; 0x50
 8002a76:	2300      	movs	r3, #0
 8002a78:	657b      	str	r3, [r7, #84]	; 0x54
 8002a7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a7e:	4642      	mov	r2, r8
 8002a80:	464b      	mov	r3, r9
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	0159      	lsls	r1, r3, #5
 8002a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a90:	0150      	lsls	r0, r2, #5
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4641      	mov	r1, r8
 8002a98:	1a51      	subs	r1, r2, r1
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ab0:	4659      	mov	r1, fp
 8002ab2:	018b      	lsls	r3, r1, #6
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aba:	4651      	mov	r1, sl
 8002abc:	018a      	lsls	r2, r1, #6
 8002abe:	4651      	mov	r1, sl
 8002ac0:	1a54      	subs	r4, r2, r1
 8002ac2:	4659      	mov	r1, fp
 8002ac4:	eb63 0501 	sbc.w	r5, r3, r1
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	00eb      	lsls	r3, r5, #3
 8002ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad6:	00e2      	lsls	r2, r4, #3
 8002ad8:	4614      	mov	r4, r2
 8002ada:	461d      	mov	r5, r3
 8002adc:	4643      	mov	r3, r8
 8002ade:	18e3      	adds	r3, r4, r3
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	eb45 0303 	adc.w	r3, r5, r3
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002af6:	4629      	mov	r1, r5
 8002af8:	028b      	lsls	r3, r1, #10
 8002afa:	4621      	mov	r1, r4
 8002afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b00:	4621      	mov	r1, r4
 8002b02:	028a      	lsls	r2, r1, #10
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b10:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b16:	f7fd fbd3 	bl	80002c0 <__aeabi_uldivmod>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4613      	mov	r3, r2
 8002b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x458>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0f1b      	lsrs	r3, r3, #28
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b42:	e003      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	37b8      	adds	r7, #184	; 0xb8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	00f42400 	.word	0x00f42400

08002b64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e28d      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8083 	beq.w	8002c8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b84:	4b94      	ldr	r3, [pc, #592]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d019      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b90:	4b91      	ldr	r3, [pc, #580]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b9c:	4b8e      	ldr	r3, [pc, #568]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002baa:	4b8b      	ldr	r3, [pc, #556]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d112      	bne.n	8002bdc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	4b84      	ldr	r3, [pc, #528]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05b      	beq.n	8002c88 <HAL_RCC_OscConfig+0x124>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d157      	bne.n	8002c88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e25a      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x90>
 8002be6:	4b7c      	ldr	r3, [pc, #496]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7b      	ldr	r2, [pc, #492]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xcc>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0xb4>
 8002bfe:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a75      	ldr	r2, [pc, #468]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b73      	ldr	r3, [pc, #460]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a72      	ldr	r2, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xcc>
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b6c      	ldr	r3, [pc, #432]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6b      	ldr	r2, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fb72 	bl	8001320 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe fb6e 	bl	8001320 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e21f      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xdc>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fb5e 	bl	8001320 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fb5a 	bl	8001320 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e20b      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x104>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d06f      	beq.n	8002d76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c96:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d017      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d105      	bne.n	8002cba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cae:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x186>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1d3      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4937      	ldr	r1, [pc, #220]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <HAL_RCC_OscConfig+0x278>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fb07 	bl	8001320 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe fb03 	bl	8001320 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e1b4      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4925      	ldr	r1, [pc, #148]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_OscConfig+0x278>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fae6 	bl	8001320 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fe fae2 	bl	8001320 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e193      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d036      	beq.n	8002df0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe fac6 	bl	8001320 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe fac2 	bl	8001320 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e173      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x234>
 8002db6:	e01b      	b.n	8002df0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe faaf 	bl	8001320 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	e00e      	b.n	8002de4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7fe faab 	bl	8001320 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d907      	bls.n	8002de4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e15c      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	42470000 	.word	0x42470000
 8002de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	4b8a      	ldr	r3, [pc, #552]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ea      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8097 	beq.w	8002f2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e02:	4b83      	ldr	r3, [pc, #524]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	4b7f      	ldr	r3, [pc, #508]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a7e      	ldr	r2, [pc, #504]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b7c      	ldr	r3, [pc, #496]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b79      	ldr	r3, [pc, #484]	; (8003014 <HAL_RCC_OscConfig+0x4b0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x4b0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a75      	ldr	r2, [pc, #468]	; (8003014 <HAL_RCC_OscConfig+0x4b0>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fa6b 	bl	8001320 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4e:	f7fe fa67 	bl	8001320 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e118      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x4b0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x31e>
 8002e74:	4b66      	ldr	r3, [pc, #408]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a65      	ldr	r2, [pc, #404]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	e01c      	b.n	8002ebc <HAL_RCC_OscConfig+0x358>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x340>
 8002e8a:	4b61      	ldr	r3, [pc, #388]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a60      	ldr	r2, [pc, #384]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a5d      	ldr	r2, [pc, #372]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0x358>
 8002ea4:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a59      	ldr	r2, [pc, #356]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	4b57      	ldr	r3, [pc, #348]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	4a56      	ldr	r2, [pc, #344]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002eb6:	f023 0304 	bic.w	r3, r3, #4
 8002eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d015      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fa2c 	bl	8001320 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fa28 	bl	8001320 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0d7      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	4b4b      	ldr	r3, [pc, #300]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ee      	beq.n	8002ecc <HAL_RCC_OscConfig+0x368>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fa16 	bl	8001320 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fa12 	bl	8001320 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e0c1      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0e:	4b40      	ldr	r3, [pc, #256]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ee      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	4a3a      	ldr	r2, [pc, #232]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80ad 	beq.w	8003090 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d060      	beq.n	8003004 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d145      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_RCC_OscConfig+0x4b4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe f9e6 	bl	8001320 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe f9e2 	bl	8001320 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e093      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	019b      	lsls	r3, r3, #6
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	491b      	ldr	r1, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_RCC_OscConfig+0x4b4>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe f9b7 	bl	8001320 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe f9b3 	bl	8001320 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e064      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x452>
 8002fd4:	e05c      	b.n	8003090 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_RCC_OscConfig+0x4b4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f9a0 	bl	8001320 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe f99c 	bl	8001320 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e04d      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x480>
 8003002:	e045      	b.n	8003090 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e040      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
 8003010:	40023800 	.word	0x40023800
 8003014:	40007000 	.word	0x40007000
 8003018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800301c:	4b1f      	ldr	r3, [pc, #124]	; (800309c <HAL_RCC_OscConfig+0x538>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d030      	beq.n	800308c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d129      	bne.n	800308c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d122      	bne.n	800308c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800304c:	4013      	ands	r3, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003054:	4293      	cmp	r3, r2
 8003056:	d119      	bne.n	800308c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	3b01      	subs	r3, #1
 8003066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d10f      	bne.n	800308c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e03f      	b.n	8003132 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd ffce 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2224      	movs	r2, #36	; 0x24
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fddf 	bl	8003ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b08a      	sub	sp, #40	; 0x28
 800313e:	af02      	add	r7, sp, #8
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b20      	cmp	r3, #32
 8003158:	d17c      	bne.n	8003254 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_UART_Transmit+0x2c>
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e075      	b.n	8003256 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_UART_Transmit+0x3e>
 8003174:	2302      	movs	r3, #2
 8003176:	e06e      	b.n	8003256 <HAL_UART_Transmit+0x11c>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2221      	movs	r2, #33	; 0x21
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800318e:	f7fe f8c7 	bl	8001320 <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	88fa      	ldrh	r2, [r7, #6]
 800319e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a8:	d108      	bne.n	80031bc <HAL_UART_Transmit+0x82>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d104      	bne.n	80031bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e003      	b.n	80031c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031cc:	e02a      	b.n	8003224 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fb1f 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e036      	b.n	8003256 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10b      	bne.n	8003206 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	3302      	adds	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	e007      	b.n	8003216 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	3301      	adds	r3, #1
 8003214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1cf      	bne.n	80031ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	2140      	movs	r1, #64	; 0x40
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 faef 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e006      	b.n	8003256 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	4613      	mov	r3, r2
 800326a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d11d      	bne.n	80032b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Receive_IT+0x26>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e016      	b.n	80032b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_UART_Receive_IT+0x38>
 8003292:	2302      	movs	r3, #2
 8003294:	e00f      	b.n	80032b6 <HAL_UART_Receive_IT+0x58>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fb24 	bl	80038f8 <UART_Start_Receive_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	e000      	b.n	80032b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b0ba      	sub	sp, #232	; 0xe8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_UART_IRQHandler+0x66>
 8003312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fc07 	bl	8003b32 <UART_Receive_IT>
      return;
 8003324:	e256      	b.n	80037d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80de 	beq.w	80034ec <HAL_UART_IRQHandler+0x22c>
 8003330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003340:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80d1 	beq.w	80034ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_UART_IRQHandler+0xae>
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_UART_IRQHandler+0xd2>
 800337a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f043 0202 	orr.w	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_UART_IRQHandler+0xf6>
 800339e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d011      	beq.n	80033e6 <HAL_UART_IRQHandler+0x126>
 80033c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0208 	orr.w	r2, r3, #8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 81ed 	beq.w	80037ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_UART_IRQHandler+0x14e>
 80033fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fb92 	bl	8003b32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_UART_IRQHandler+0x17a>
 8003432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d04f      	beq.n	80034da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa9a 	bl	8003974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d141      	bne.n	80034d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3314      	adds	r3, #20
 8003454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800346c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3314      	adds	r3, #20
 8003476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800347a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800347e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1d9      	bne.n	800344e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d013      	beq.n	80034ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	4a7d      	ldr	r2, [pc, #500]	; (800369c <HAL_UART_IRQHandler+0x3dc>)
 80034a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe f8c3 	bl	800163a <HAL_DMA_Abort_IT>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d016      	beq.n	80034e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034c4:	4610      	mov	r0, r2
 80034c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c8:	e00e      	b.n	80034e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f990 	bl	80037f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d0:	e00a      	b.n	80034e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f98c 	bl	80037f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d8:	e006      	b.n	80034e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f988 	bl	80037f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034e6:	e170      	b.n	80037ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	bf00      	nop
    return;
 80034ea:	e16e      	b.n	80037ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	f040 814a 	bne.w	800378a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8143 	beq.w	800378a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 813c 	beq.w	800378a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	f040 80b4 	bne.w	80036a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8140 	beq.w	80037ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003556:	429a      	cmp	r2, r3
 8003558:	f080 8139 	bcs.w	80037ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003562:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356e:	f000 8088 	beq.w	8003682 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800358c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800359e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1d9      	bne.n	8003572 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3314      	adds	r3, #20
 80035c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3314      	adds	r3, #20
 80035de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e1      	bne.n	80035be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3314      	adds	r3, #20
 8003600:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800360a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800360c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3314      	adds	r3, #20
 800361a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800361e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003620:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003624:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800362c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e3      	bne.n	80035fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003652:	f023 0310 	bic.w	r3, r3, #16
 8003656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003664:	65ba      	str	r2, [r7, #88]	; 0x58
 8003666:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800366a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e3      	bne.n	8003640 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd ff6c 	bl	800155a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800368a:	b29b      	uxth	r3, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	b29b      	uxth	r3, r3
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8b6 	bl	8003804 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003698:	e099      	b.n	80037ce <HAL_UART_IRQHandler+0x50e>
 800369a:	bf00      	nop
 800369c:	08003a3b 	.word	0x08003a3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 808b 	beq.w	80037d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80036bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8086 	beq.w	80037d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036ea:	647a      	str	r2, [r7, #68]	; 0x44
 80036ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e3      	bne.n	80036c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	623b      	str	r3, [r7, #32]
   return(result);
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003722:	633a      	str	r2, [r7, #48]	; 0x30
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e3      	bne.n	80036fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
 800374a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	60fb      	str	r3, [r7, #12]
   return(result);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0310 	bic.w	r3, r3, #16
 800375a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003768:	61fa      	str	r2, [r7, #28]
 800376a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	69b9      	ldr	r1, [r7, #24]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	617b      	str	r3, [r7, #20]
   return(result);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e3      	bne.n	8003744 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800377c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f83e 	bl	8003804 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003788:	e023      	b.n	80037d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_UART_IRQHandler+0x4ea>
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f95d 	bl	8003a62 <UART_Transmit_IT>
    return;
 80037a8:	e014      	b.n	80037d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00e      	beq.n	80037d4 <HAL_UART_IRQHandler+0x514>
 80037b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f99d 	bl	8003b02 <UART_EndTransmit_IT>
    return;
 80037c8:	e004      	b.n	80037d4 <HAL_UART_IRQHandler+0x514>
    return;
 80037ca:	bf00      	nop
 80037cc:	e002      	b.n	80037d4 <HAL_UART_IRQHandler+0x514>
      return;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <HAL_UART_IRQHandler+0x514>
      return;
 80037d2:	bf00      	nop
  }
}
 80037d4:	37e8      	adds	r7, #232	; 0xe8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop

080037dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b090      	sub	sp, #64	; 0x40
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382c:	e050      	b.n	80038d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d04c      	beq.n	80038d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x30>
 800383c:	f7fd fd70 	bl	8001320 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003848:	429a      	cmp	r2, r3
 800384a:	d241      	bcs.n	80038d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800386c:	637a      	str	r2, [r7, #52]	; 0x34
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3314      	adds	r3, #20
 8003886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	613b      	str	r3, [r7, #16]
   return(result);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3314      	adds	r3, #20
 800389e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a0:	623a      	str	r2, [r7, #32]
 80038a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	69f9      	ldr	r1, [r7, #28]
 80038a6:	6a3a      	ldr	r2, [r7, #32]
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e5      	bne.n	8003880 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e00f      	b.n	80038f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d09f      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3740      	adds	r7, #64	; 0x40
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2222      	movs	r2, #34	; 0x22
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003944:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0220 	orr.w	r2, r2, #32
 8003964:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b095      	sub	sp, #84	; 0x54
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800399c:	643a      	str	r2, [r7, #64]	; 0x40
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e5      	bne.n	800397c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3314      	adds	r3, #20
 80039b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e5      	bne.n	80039b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d119      	bne.n	8003a20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f023 0310 	bic.w	r3, r3, #16
 8003a02:	647b      	str	r3, [r7, #68]	; 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a0c:	61ba      	str	r2, [r7, #24]
 8003a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6979      	ldr	r1, [r7, #20]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e5      	bne.n	80039ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a2e:	bf00      	nop
 8003a30:	3754      	adds	r7, #84	; 0x54
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff fecb 	bl	80037f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b21      	cmp	r3, #33	; 0x21
 8003a74:	d13e      	bne.n	8003af4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7e:	d114      	bne.n	8003aaa <UART_Transmit_IT+0x48>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d110      	bne.n	8003aaa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	621a      	str	r2, [r3, #32]
 8003aa8:	e008      	b.n	8003abc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6211      	str	r1, [r2, #32]
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10f      	bne.n	8003af0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ade:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fe5a 	bl	80037dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b08c      	sub	sp, #48	; 0x30
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b22      	cmp	r3, #34	; 0x22
 8003b44:	f040 80ab 	bne.w	8003c9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	d117      	bne.n	8003b82 <UART_Receive_IT+0x50>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d113      	bne.n	8003b82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b80:	e026      	b.n	8003bd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	d007      	beq.n	8003ba6 <UART_Receive_IT+0x74>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <UART_Receive_IT+0x82>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	e008      	b.n	8003bc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d15a      	bne.n	8003c9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0220 	bic.w	r2, r2, #32
 8003bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d135      	bne.n	8003c90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4a:	623a      	str	r2, [r7, #32]
 8003c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	69f9      	ldr	r1, [r7, #28]
 8003c50:	6a3a      	ldr	r2, [r7, #32]
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e5      	bne.n	8003c2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d10a      	bne.n	8003c82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fdbb 	bl	8003804 <HAL_UARTEx_RxEventCallback>
 8003c8e:	e002      	b.n	8003c96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fd f919 	bl	8000ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e002      	b.n	8003ca0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3730      	adds	r7, #48	; 0x30
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b0c0      	sub	sp, #256	; 0x100
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	68d9      	ldr	r1, [r3, #12]
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	ea40 0301 	orr.w	r3, r0, r1
 8003cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d00:	f021 010c 	bic.w	r1, r1, #12
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d22:	6999      	ldr	r1, [r3, #24]
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	ea40 0301 	orr.w	r3, r0, r1
 8003d2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b8f      	ldr	r3, [pc, #572]	; (8003f74 <UART_SetConfig+0x2cc>)
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d005      	beq.n	8003d48 <UART_SetConfig+0xa0>
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b8d      	ldr	r3, [pc, #564]	; (8003f78 <UART_SetConfig+0x2d0>)
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d104      	bne.n	8003d52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7fe fcc8 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003d4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d50:	e003      	b.n	8003d5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d52:	f7fe fcaf 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003d56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d64:	f040 810c 	bne.w	8003f80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	1891      	adds	r1, r2, r2
 8003d80:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d82:	415b      	adcs	r3, r3
 8003d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	eb12 0801 	adds.w	r8, r2, r1
 8003d90:	4629      	mov	r1, r5
 8003d92:	eb43 0901 	adc.w	r9, r3, r1
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003daa:	4690      	mov	r8, r2
 8003dac:	4699      	mov	r9, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	eb18 0303 	adds.w	r3, r8, r3
 8003db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003db8:	462b      	mov	r3, r5
 8003dba:	eb49 0303 	adc.w	r3, r9, r3
 8003dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	18db      	adds	r3, r3, r3
 8003dda:	653b      	str	r3, [r7, #80]	; 0x50
 8003ddc:	4613      	mov	r3, r2
 8003dde:	eb42 0303 	adc.w	r3, r2, r3
 8003de2:	657b      	str	r3, [r7, #84]	; 0x54
 8003de4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003de8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003dec:	f7fc fa68 	bl	80002c0 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <UART_SetConfig+0x2d4>)
 8003df6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	011c      	lsls	r4, r3, #4
 8003dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e20:	4641      	mov	r1, r8
 8003e22:	eb12 0a01 	adds.w	sl, r2, r1
 8003e26:	4649      	mov	r1, r9
 8003e28:	eb43 0b01 	adc.w	fp, r3, r1
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e40:	4692      	mov	sl, r2
 8003e42:	469b      	mov	fp, r3
 8003e44:	4643      	mov	r3, r8
 8003e46:	eb1a 0303 	adds.w	r3, sl, r3
 8003e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	eb4b 0303 	adc.w	r3, fp, r3
 8003e54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	18db      	adds	r3, r3, r3
 8003e70:	643b      	str	r3, [r7, #64]	; 0x40
 8003e72:	4613      	mov	r3, r2
 8003e74:	eb42 0303 	adc.w	r3, r2, r3
 8003e78:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e82:	f7fc fa1d 	bl	80002c0 <__aeabi_uldivmod>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <UART_SetConfig+0x2d4>)
 8003e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2264      	movs	r2, #100	; 0x64
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	1acb      	subs	r3, r1, r3
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ea2:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <UART_SetConfig+0x2d4>)
 8003ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eb0:	441c      	add	r4, r3
 8003eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ebc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ec0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	1891      	adds	r1, r2, r2
 8003eca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	1851      	adds	r1, r2, r1
 8003ed8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eda:	4649      	mov	r1, r9
 8003edc:	414b      	adcs	r3, r1
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003eec:	4659      	mov	r1, fp
 8003eee:	00cb      	lsls	r3, r1, #3
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	00ca      	lsls	r2, r1, #3
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	4642      	mov	r2, r8
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f08:	464b      	mov	r3, r9
 8003f0a:	460a      	mov	r2, r1
 8003f0c:	eb42 0303 	adc.w	r3, r2, r3
 8003f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f28:	460b      	mov	r3, r1
 8003f2a:	18db      	adds	r3, r3, r3
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2e:	4613      	mov	r3, r2
 8003f30:	eb42 0303 	adc.w	r3, r2, r3
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f3e:	f7fc f9bf 	bl	80002c0 <__aeabi_uldivmod>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <UART_SetConfig+0x2d4>)
 8003f48:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	2164      	movs	r1, #100	; 0x64
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	3332      	adds	r3, #50	; 0x32
 8003f5a:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <UART_SetConfig+0x2d4>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	f003 0207 	and.w	r2, r3, #7
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4422      	add	r2, r4
 8003f6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f70:	e105      	b.n	800417e <UART_SetConfig+0x4d6>
 8003f72:	bf00      	nop
 8003f74:	40011000 	.word	0x40011000
 8003f78:	40011400 	.word	0x40011400
 8003f7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f92:	4642      	mov	r2, r8
 8003f94:	464b      	mov	r3, r9
 8003f96:	1891      	adds	r1, r2, r2
 8003f98:	6239      	str	r1, [r7, #32]
 8003f9a:	415b      	adcs	r3, r3
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	1854      	adds	r4, r2, r1
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	eb43 0501 	adc.w	r5, r3, r1
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	00eb      	lsls	r3, r5, #3
 8003fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fba:	00e2      	lsls	r2, r4, #3
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	461d      	mov	r5, r3
 8003fc0:	4643      	mov	r3, r8
 8003fc2:	18e3      	adds	r3, r4, r3
 8003fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fc8:	464b      	mov	r3, r9
 8003fca:	eb45 0303 	adc.w	r3, r5, r3
 8003fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fee:	4629      	mov	r1, r5
 8003ff0:	008b      	lsls	r3, r1, #2
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	008a      	lsls	r2, r1, #2
 8003ffc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004000:	f7fc f95e 	bl	80002c0 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4b60      	ldr	r3, [pc, #384]	; (800418c <UART_SetConfig+0x4e4>)
 800400a:	fba3 2302 	umull	r2, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	011c      	lsls	r4, r3, #4
 8004012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800401c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	1891      	adds	r1, r2, r2
 800402a:	61b9      	str	r1, [r7, #24]
 800402c:	415b      	adcs	r3, r3
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004034:	4641      	mov	r1, r8
 8004036:	1851      	adds	r1, r2, r1
 8004038:	6139      	str	r1, [r7, #16]
 800403a:	4649      	mov	r1, r9
 800403c:	414b      	adcs	r3, r1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800404c:	4659      	mov	r1, fp
 800404e:	00cb      	lsls	r3, r1, #3
 8004050:	4651      	mov	r1, sl
 8004052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004056:	4651      	mov	r1, sl
 8004058:	00ca      	lsls	r2, r1, #3
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	4603      	mov	r3, r0
 8004060:	4642      	mov	r2, r8
 8004062:	189b      	adds	r3, r3, r2
 8004064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004068:	464b      	mov	r3, r9
 800406a:	460a      	mov	r2, r1
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	67bb      	str	r3, [r7, #120]	; 0x78
 800407e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800408c:	4649      	mov	r1, r9
 800408e:	008b      	lsls	r3, r1, #2
 8004090:	4641      	mov	r1, r8
 8004092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004096:	4641      	mov	r1, r8
 8004098:	008a      	lsls	r2, r1, #2
 800409a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800409e:	f7fc f90f 	bl	80002c0 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4b39      	ldr	r3, [pc, #228]	; (800418c <UART_SetConfig+0x4e4>)
 80040a8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	2164      	movs	r1, #100	; 0x64
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	3332      	adds	r3, #50	; 0x32
 80040ba:	4a34      	ldr	r2, [pc, #208]	; (800418c <UART_SetConfig+0x4e4>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c6:	441c      	add	r4, r3
 80040c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040cc:	2200      	movs	r2, #0
 80040ce:	673b      	str	r3, [r7, #112]	; 0x70
 80040d0:	677a      	str	r2, [r7, #116]	; 0x74
 80040d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040d6:	4642      	mov	r2, r8
 80040d8:	464b      	mov	r3, r9
 80040da:	1891      	adds	r1, r2, r2
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	415b      	adcs	r3, r3
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e6:	4641      	mov	r1, r8
 80040e8:	1851      	adds	r1, r2, r1
 80040ea:	6039      	str	r1, [r7, #0]
 80040ec:	4649      	mov	r1, r9
 80040ee:	414b      	adcs	r3, r1
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040fe:	4659      	mov	r1, fp
 8004100:	00cb      	lsls	r3, r1, #3
 8004102:	4651      	mov	r1, sl
 8004104:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004108:	4651      	mov	r1, sl
 800410a:	00ca      	lsls	r2, r1, #3
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	4603      	mov	r3, r0
 8004112:	4642      	mov	r2, r8
 8004114:	189b      	adds	r3, r3, r2
 8004116:	66bb      	str	r3, [r7, #104]	; 0x68
 8004118:	464b      	mov	r3, r9
 800411a:	460a      	mov	r2, r1
 800411c:	eb42 0303 	adc.w	r3, r2, r3
 8004120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	663b      	str	r3, [r7, #96]	; 0x60
 800412c:	667a      	str	r2, [r7, #100]	; 0x64
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800413a:	4649      	mov	r1, r9
 800413c:	008b      	lsls	r3, r1, #2
 800413e:	4641      	mov	r1, r8
 8004140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004144:	4641      	mov	r1, r8
 8004146:	008a      	lsls	r2, r1, #2
 8004148:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800414c:	f7fc f8b8 	bl	80002c0 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <UART_SetConfig+0x4e4>)
 8004156:	fba3 1302 	umull	r1, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2164      	movs	r1, #100	; 0x64
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	3332      	adds	r3, #50	; 0x32
 8004168:	4a08      	ldr	r2, [pc, #32]	; (800418c <UART_SetConfig+0x4e4>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	f003 020f 	and.w	r2, r3, #15
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4422      	add	r2, r4
 800417c:	609a      	str	r2, [r3, #8]
}
 800417e:	bf00      	nop
 8004180:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004184:	46bd      	mov	sp, r7
 8004186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418a:	bf00      	nop
 800418c:	51eb851f 	.word	0x51eb851f

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	; (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000000c 	.word	0x2000000c

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4d0d      	ldr	r5, [pc, #52]	; (80041d4 <__libc_init_array+0x38>)
 80041a0:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a2:	1b64      	subs	r4, r4, r5
 80041a4:	10a4      	asrs	r4, r4, #2
 80041a6:	2600      	movs	r6, #0
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	4d0b      	ldr	r5, [pc, #44]	; (80041dc <__libc_init_array+0x40>)
 80041ae:	4c0c      	ldr	r4, [pc, #48]	; (80041e0 <__libc_init_array+0x44>)
 80041b0:	f000 fc8e 	bl	8004ad0 <_init>
 80041b4:	1b64      	subs	r4, r4, r5
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	2600      	movs	r6, #0
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	08004bf0 	.word	0x08004bf0
 80041d8:	08004bf0 	.word	0x08004bf0
 80041dc:	08004bf0 	.word	0x08004bf0
 80041e0:	08004bf4 	.word	0x08004bf4

080041e4 <memset>:
 80041e4:	4402      	add	r2, r0
 80041e6:	4603      	mov	r3, r0
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d100      	bne.n	80041ee <memset+0xa>
 80041ec:	4770      	bx	lr
 80041ee:	f803 1b01 	strb.w	r1, [r3], #1
 80041f2:	e7f9      	b.n	80041e8 <memset+0x4>

080041f4 <siprintf>:
 80041f4:	b40e      	push	{r1, r2, r3}
 80041f6:	b500      	push	{lr}
 80041f8:	b09c      	sub	sp, #112	; 0x70
 80041fa:	ab1d      	add	r3, sp, #116	; 0x74
 80041fc:	9002      	str	r0, [sp, #8]
 80041fe:	9006      	str	r0, [sp, #24]
 8004200:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004204:	4809      	ldr	r0, [pc, #36]	; (800422c <siprintf+0x38>)
 8004206:	9107      	str	r1, [sp, #28]
 8004208:	9104      	str	r1, [sp, #16]
 800420a:	4909      	ldr	r1, [pc, #36]	; (8004230 <siprintf+0x3c>)
 800420c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004210:	9105      	str	r1, [sp, #20]
 8004212:	6800      	ldr	r0, [r0, #0]
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	a902      	add	r1, sp, #8
 8004218:	f000 f868 	bl	80042ec <_svfiprintf_r>
 800421c:	9b02      	ldr	r3, [sp, #8]
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	b01c      	add	sp, #112	; 0x70
 8004224:	f85d eb04 	ldr.w	lr, [sp], #4
 8004228:	b003      	add	sp, #12
 800422a:	4770      	bx	lr
 800422c:	2000000c 	.word	0x2000000c
 8004230:	ffff0208 	.word	0xffff0208

08004234 <__ssputs_r>:
 8004234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	688e      	ldr	r6, [r1, #8]
 800423a:	429e      	cmp	r6, r3
 800423c:	4682      	mov	sl, r0
 800423e:	460c      	mov	r4, r1
 8004240:	4690      	mov	r8, r2
 8004242:	461f      	mov	r7, r3
 8004244:	d838      	bhi.n	80042b8 <__ssputs_r+0x84>
 8004246:	898a      	ldrh	r2, [r1, #12]
 8004248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800424c:	d032      	beq.n	80042b4 <__ssputs_r+0x80>
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	6909      	ldr	r1, [r1, #16]
 8004252:	eba5 0901 	sub.w	r9, r5, r1
 8004256:	6965      	ldr	r5, [r4, #20]
 8004258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800425c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004260:	3301      	adds	r3, #1
 8004262:	444b      	add	r3, r9
 8004264:	106d      	asrs	r5, r5, #1
 8004266:	429d      	cmp	r5, r3
 8004268:	bf38      	it	cc
 800426a:	461d      	movcc	r5, r3
 800426c:	0553      	lsls	r3, r2, #21
 800426e:	d531      	bpl.n	80042d4 <__ssputs_r+0xa0>
 8004270:	4629      	mov	r1, r5
 8004272:	f000 fb63 	bl	800493c <_malloc_r>
 8004276:	4606      	mov	r6, r0
 8004278:	b950      	cbnz	r0, 8004290 <__ssputs_r+0x5c>
 800427a:	230c      	movs	r3, #12
 800427c:	f8ca 3000 	str.w	r3, [sl]
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004290:	6921      	ldr	r1, [r4, #16]
 8004292:	464a      	mov	r2, r9
 8004294:	f000 fabe 	bl	8004814 <memcpy>
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800429e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	6126      	str	r6, [r4, #16]
 80042a6:	6165      	str	r5, [r4, #20]
 80042a8:	444e      	add	r6, r9
 80042aa:	eba5 0509 	sub.w	r5, r5, r9
 80042ae:	6026      	str	r6, [r4, #0]
 80042b0:	60a5      	str	r5, [r4, #8]
 80042b2:	463e      	mov	r6, r7
 80042b4:	42be      	cmp	r6, r7
 80042b6:	d900      	bls.n	80042ba <__ssputs_r+0x86>
 80042b8:	463e      	mov	r6, r7
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	4632      	mov	r2, r6
 80042be:	4641      	mov	r1, r8
 80042c0:	f000 fab6 	bl	8004830 <memmove>
 80042c4:	68a3      	ldr	r3, [r4, #8]
 80042c6:	1b9b      	subs	r3, r3, r6
 80042c8:	60a3      	str	r3, [r4, #8]
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	4433      	add	r3, r6
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	2000      	movs	r0, #0
 80042d2:	e7db      	b.n	800428c <__ssputs_r+0x58>
 80042d4:	462a      	mov	r2, r5
 80042d6:	f000 fba5 	bl	8004a24 <_realloc_r>
 80042da:	4606      	mov	r6, r0
 80042dc:	2800      	cmp	r0, #0
 80042de:	d1e1      	bne.n	80042a4 <__ssputs_r+0x70>
 80042e0:	6921      	ldr	r1, [r4, #16]
 80042e2:	4650      	mov	r0, sl
 80042e4:	f000 fabe 	bl	8004864 <_free_r>
 80042e8:	e7c7      	b.n	800427a <__ssputs_r+0x46>
	...

080042ec <_svfiprintf_r>:
 80042ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f0:	4698      	mov	r8, r3
 80042f2:	898b      	ldrh	r3, [r1, #12]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	b09d      	sub	sp, #116	; 0x74
 80042f8:	4607      	mov	r7, r0
 80042fa:	460d      	mov	r5, r1
 80042fc:	4614      	mov	r4, r2
 80042fe:	d50e      	bpl.n	800431e <_svfiprintf_r+0x32>
 8004300:	690b      	ldr	r3, [r1, #16]
 8004302:	b963      	cbnz	r3, 800431e <_svfiprintf_r+0x32>
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	f000 fb19 	bl	800493c <_malloc_r>
 800430a:	6028      	str	r0, [r5, #0]
 800430c:	6128      	str	r0, [r5, #16]
 800430e:	b920      	cbnz	r0, 800431a <_svfiprintf_r+0x2e>
 8004310:	230c      	movs	r3, #12
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	f04f 30ff 	mov.w	r0, #4294967295
 8004318:	e0d1      	b.n	80044be <_svfiprintf_r+0x1d2>
 800431a:	2340      	movs	r3, #64	; 0x40
 800431c:	616b      	str	r3, [r5, #20]
 800431e:	2300      	movs	r3, #0
 8004320:	9309      	str	r3, [sp, #36]	; 0x24
 8004322:	2320      	movs	r3, #32
 8004324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004328:	f8cd 800c 	str.w	r8, [sp, #12]
 800432c:	2330      	movs	r3, #48	; 0x30
 800432e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044d8 <_svfiprintf_r+0x1ec>
 8004332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004336:	f04f 0901 	mov.w	r9, #1
 800433a:	4623      	mov	r3, r4
 800433c:	469a      	mov	sl, r3
 800433e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004342:	b10a      	cbz	r2, 8004348 <_svfiprintf_r+0x5c>
 8004344:	2a25      	cmp	r2, #37	; 0x25
 8004346:	d1f9      	bne.n	800433c <_svfiprintf_r+0x50>
 8004348:	ebba 0b04 	subs.w	fp, sl, r4
 800434c:	d00b      	beq.n	8004366 <_svfiprintf_r+0x7a>
 800434e:	465b      	mov	r3, fp
 8004350:	4622      	mov	r2, r4
 8004352:	4629      	mov	r1, r5
 8004354:	4638      	mov	r0, r7
 8004356:	f7ff ff6d 	bl	8004234 <__ssputs_r>
 800435a:	3001      	adds	r0, #1
 800435c:	f000 80aa 	beq.w	80044b4 <_svfiprintf_r+0x1c8>
 8004360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004362:	445a      	add	r2, fp
 8004364:	9209      	str	r2, [sp, #36]	; 0x24
 8004366:	f89a 3000 	ldrb.w	r3, [sl]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80a2 	beq.w	80044b4 <_svfiprintf_r+0x1c8>
 8004370:	2300      	movs	r3, #0
 8004372:	f04f 32ff 	mov.w	r2, #4294967295
 8004376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800437a:	f10a 0a01 	add.w	sl, sl, #1
 800437e:	9304      	str	r3, [sp, #16]
 8004380:	9307      	str	r3, [sp, #28]
 8004382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004386:	931a      	str	r3, [sp, #104]	; 0x68
 8004388:	4654      	mov	r4, sl
 800438a:	2205      	movs	r2, #5
 800438c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004390:	4851      	ldr	r0, [pc, #324]	; (80044d8 <_svfiprintf_r+0x1ec>)
 8004392:	f7fb ff45 	bl	8000220 <memchr>
 8004396:	9a04      	ldr	r2, [sp, #16]
 8004398:	b9d8      	cbnz	r0, 80043d2 <_svfiprintf_r+0xe6>
 800439a:	06d0      	lsls	r0, r2, #27
 800439c:	bf44      	itt	mi
 800439e:	2320      	movmi	r3, #32
 80043a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043a4:	0711      	lsls	r1, r2, #28
 80043a6:	bf44      	itt	mi
 80043a8:	232b      	movmi	r3, #43	; 0x2b
 80043aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ae:	f89a 3000 	ldrb.w	r3, [sl]
 80043b2:	2b2a      	cmp	r3, #42	; 0x2a
 80043b4:	d015      	beq.n	80043e2 <_svfiprintf_r+0xf6>
 80043b6:	9a07      	ldr	r2, [sp, #28]
 80043b8:	4654      	mov	r4, sl
 80043ba:	2000      	movs	r0, #0
 80043bc:	f04f 0c0a 	mov.w	ip, #10
 80043c0:	4621      	mov	r1, r4
 80043c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043c6:	3b30      	subs	r3, #48	; 0x30
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	d94e      	bls.n	800446a <_svfiprintf_r+0x17e>
 80043cc:	b1b0      	cbz	r0, 80043fc <_svfiprintf_r+0x110>
 80043ce:	9207      	str	r2, [sp, #28]
 80043d0:	e014      	b.n	80043fc <_svfiprintf_r+0x110>
 80043d2:	eba0 0308 	sub.w	r3, r0, r8
 80043d6:	fa09 f303 	lsl.w	r3, r9, r3
 80043da:	4313      	orrs	r3, r2
 80043dc:	9304      	str	r3, [sp, #16]
 80043de:	46a2      	mov	sl, r4
 80043e0:	e7d2      	b.n	8004388 <_svfiprintf_r+0x9c>
 80043e2:	9b03      	ldr	r3, [sp, #12]
 80043e4:	1d19      	adds	r1, r3, #4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	9103      	str	r1, [sp, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bfbb      	ittet	lt
 80043ee:	425b      	neglt	r3, r3
 80043f0:	f042 0202 	orrlt.w	r2, r2, #2
 80043f4:	9307      	strge	r3, [sp, #28]
 80043f6:	9307      	strlt	r3, [sp, #28]
 80043f8:	bfb8      	it	lt
 80043fa:	9204      	strlt	r2, [sp, #16]
 80043fc:	7823      	ldrb	r3, [r4, #0]
 80043fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004400:	d10c      	bne.n	800441c <_svfiprintf_r+0x130>
 8004402:	7863      	ldrb	r3, [r4, #1]
 8004404:	2b2a      	cmp	r3, #42	; 0x2a
 8004406:	d135      	bne.n	8004474 <_svfiprintf_r+0x188>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	9203      	str	r2, [sp, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	bfb8      	it	lt
 8004414:	f04f 33ff 	movlt.w	r3, #4294967295
 8004418:	3402      	adds	r4, #2
 800441a:	9305      	str	r3, [sp, #20]
 800441c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044e8 <_svfiprintf_r+0x1fc>
 8004420:	7821      	ldrb	r1, [r4, #0]
 8004422:	2203      	movs	r2, #3
 8004424:	4650      	mov	r0, sl
 8004426:	f7fb fefb 	bl	8000220 <memchr>
 800442a:	b140      	cbz	r0, 800443e <_svfiprintf_r+0x152>
 800442c:	2340      	movs	r3, #64	; 0x40
 800442e:	eba0 000a 	sub.w	r0, r0, sl
 8004432:	fa03 f000 	lsl.w	r0, r3, r0
 8004436:	9b04      	ldr	r3, [sp, #16]
 8004438:	4303      	orrs	r3, r0
 800443a:	3401      	adds	r4, #1
 800443c:	9304      	str	r3, [sp, #16]
 800443e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004442:	4826      	ldr	r0, [pc, #152]	; (80044dc <_svfiprintf_r+0x1f0>)
 8004444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004448:	2206      	movs	r2, #6
 800444a:	f7fb fee9 	bl	8000220 <memchr>
 800444e:	2800      	cmp	r0, #0
 8004450:	d038      	beq.n	80044c4 <_svfiprintf_r+0x1d8>
 8004452:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <_svfiprintf_r+0x1f4>)
 8004454:	bb1b      	cbnz	r3, 800449e <_svfiprintf_r+0x1b2>
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	3307      	adds	r3, #7
 800445a:	f023 0307 	bic.w	r3, r3, #7
 800445e:	3308      	adds	r3, #8
 8004460:	9303      	str	r3, [sp, #12]
 8004462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004464:	4433      	add	r3, r6
 8004466:	9309      	str	r3, [sp, #36]	; 0x24
 8004468:	e767      	b.n	800433a <_svfiprintf_r+0x4e>
 800446a:	fb0c 3202 	mla	r2, ip, r2, r3
 800446e:	460c      	mov	r4, r1
 8004470:	2001      	movs	r0, #1
 8004472:	e7a5      	b.n	80043c0 <_svfiprintf_r+0xd4>
 8004474:	2300      	movs	r3, #0
 8004476:	3401      	adds	r4, #1
 8004478:	9305      	str	r3, [sp, #20]
 800447a:	4619      	mov	r1, r3
 800447c:	f04f 0c0a 	mov.w	ip, #10
 8004480:	4620      	mov	r0, r4
 8004482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004486:	3a30      	subs	r2, #48	; 0x30
 8004488:	2a09      	cmp	r2, #9
 800448a:	d903      	bls.n	8004494 <_svfiprintf_r+0x1a8>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0c5      	beq.n	800441c <_svfiprintf_r+0x130>
 8004490:	9105      	str	r1, [sp, #20]
 8004492:	e7c3      	b.n	800441c <_svfiprintf_r+0x130>
 8004494:	fb0c 2101 	mla	r1, ip, r1, r2
 8004498:	4604      	mov	r4, r0
 800449a:	2301      	movs	r3, #1
 800449c:	e7f0      	b.n	8004480 <_svfiprintf_r+0x194>
 800449e:	ab03      	add	r3, sp, #12
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	462a      	mov	r2, r5
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <_svfiprintf_r+0x1f8>)
 80044a6:	a904      	add	r1, sp, #16
 80044a8:	4638      	mov	r0, r7
 80044aa:	f3af 8000 	nop.w
 80044ae:	1c42      	adds	r2, r0, #1
 80044b0:	4606      	mov	r6, r0
 80044b2:	d1d6      	bne.n	8004462 <_svfiprintf_r+0x176>
 80044b4:	89ab      	ldrh	r3, [r5, #12]
 80044b6:	065b      	lsls	r3, r3, #25
 80044b8:	f53f af2c 	bmi.w	8004314 <_svfiprintf_r+0x28>
 80044bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044be:	b01d      	add	sp, #116	; 0x74
 80044c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c4:	ab03      	add	r3, sp, #12
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	462a      	mov	r2, r5
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <_svfiprintf_r+0x1f8>)
 80044cc:	a904      	add	r1, sp, #16
 80044ce:	4638      	mov	r0, r7
 80044d0:	f000 f87a 	bl	80045c8 <_printf_i>
 80044d4:	e7eb      	b.n	80044ae <_svfiprintf_r+0x1c2>
 80044d6:	bf00      	nop
 80044d8:	08004bb4 	.word	0x08004bb4
 80044dc:	08004bbe 	.word	0x08004bbe
 80044e0:	00000000 	.word	0x00000000
 80044e4:	08004235 	.word	0x08004235
 80044e8:	08004bba 	.word	0x08004bba

080044ec <_printf_common>:
 80044ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	4616      	mov	r6, r2
 80044f2:	4699      	mov	r9, r3
 80044f4:	688a      	ldr	r2, [r1, #8]
 80044f6:	690b      	ldr	r3, [r1, #16]
 80044f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044fc:	4293      	cmp	r3, r2
 80044fe:	bfb8      	it	lt
 8004500:	4613      	movlt	r3, r2
 8004502:	6033      	str	r3, [r6, #0]
 8004504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004508:	4607      	mov	r7, r0
 800450a:	460c      	mov	r4, r1
 800450c:	b10a      	cbz	r2, 8004512 <_printf_common+0x26>
 800450e:	3301      	adds	r3, #1
 8004510:	6033      	str	r3, [r6, #0]
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	0699      	lsls	r1, r3, #26
 8004516:	bf42      	ittt	mi
 8004518:	6833      	ldrmi	r3, [r6, #0]
 800451a:	3302      	addmi	r3, #2
 800451c:	6033      	strmi	r3, [r6, #0]
 800451e:	6825      	ldr	r5, [r4, #0]
 8004520:	f015 0506 	ands.w	r5, r5, #6
 8004524:	d106      	bne.n	8004534 <_printf_common+0x48>
 8004526:	f104 0a19 	add.w	sl, r4, #25
 800452a:	68e3      	ldr	r3, [r4, #12]
 800452c:	6832      	ldr	r2, [r6, #0]
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	42ab      	cmp	r3, r5
 8004532:	dc26      	bgt.n	8004582 <_printf_common+0x96>
 8004534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004538:	1e13      	subs	r3, r2, #0
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	bf18      	it	ne
 800453e:	2301      	movne	r3, #1
 8004540:	0692      	lsls	r2, r2, #26
 8004542:	d42b      	bmi.n	800459c <_printf_common+0xb0>
 8004544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004548:	4649      	mov	r1, r9
 800454a:	4638      	mov	r0, r7
 800454c:	47c0      	blx	r8
 800454e:	3001      	adds	r0, #1
 8004550:	d01e      	beq.n	8004590 <_printf_common+0xa4>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	68e5      	ldr	r5, [r4, #12]
 8004556:	6832      	ldr	r2, [r6, #0]
 8004558:	f003 0306 	and.w	r3, r3, #6
 800455c:	2b04      	cmp	r3, #4
 800455e:	bf08      	it	eq
 8004560:	1aad      	subeq	r5, r5, r2
 8004562:	68a3      	ldr	r3, [r4, #8]
 8004564:	6922      	ldr	r2, [r4, #16]
 8004566:	bf0c      	ite	eq
 8004568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800456c:	2500      	movne	r5, #0
 800456e:	4293      	cmp	r3, r2
 8004570:	bfc4      	itt	gt
 8004572:	1a9b      	subgt	r3, r3, r2
 8004574:	18ed      	addgt	r5, r5, r3
 8004576:	2600      	movs	r6, #0
 8004578:	341a      	adds	r4, #26
 800457a:	42b5      	cmp	r5, r6
 800457c:	d11a      	bne.n	80045b4 <_printf_common+0xc8>
 800457e:	2000      	movs	r0, #0
 8004580:	e008      	b.n	8004594 <_printf_common+0xa8>
 8004582:	2301      	movs	r3, #1
 8004584:	4652      	mov	r2, sl
 8004586:	4649      	mov	r1, r9
 8004588:	4638      	mov	r0, r7
 800458a:	47c0      	blx	r8
 800458c:	3001      	adds	r0, #1
 800458e:	d103      	bne.n	8004598 <_printf_common+0xac>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	3501      	adds	r5, #1
 800459a:	e7c6      	b.n	800452a <_printf_common+0x3e>
 800459c:	18e1      	adds	r1, r4, r3
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	2030      	movs	r0, #48	; 0x30
 80045a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045a6:	4422      	add	r2, r4
 80045a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045b0:	3302      	adds	r3, #2
 80045b2:	e7c7      	b.n	8004544 <_printf_common+0x58>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4622      	mov	r2, r4
 80045b8:	4649      	mov	r1, r9
 80045ba:	4638      	mov	r0, r7
 80045bc:	47c0      	blx	r8
 80045be:	3001      	adds	r0, #1
 80045c0:	d0e6      	beq.n	8004590 <_printf_common+0xa4>
 80045c2:	3601      	adds	r6, #1
 80045c4:	e7d9      	b.n	800457a <_printf_common+0x8e>
	...

080045c8 <_printf_i>:
 80045c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	7e0f      	ldrb	r7, [r1, #24]
 80045ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045d0:	2f78      	cmp	r7, #120	; 0x78
 80045d2:	4691      	mov	r9, r2
 80045d4:	4680      	mov	r8, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	469a      	mov	sl, r3
 80045da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045de:	d807      	bhi.n	80045f0 <_printf_i+0x28>
 80045e0:	2f62      	cmp	r7, #98	; 0x62
 80045e2:	d80a      	bhi.n	80045fa <_printf_i+0x32>
 80045e4:	2f00      	cmp	r7, #0
 80045e6:	f000 80d8 	beq.w	800479a <_printf_i+0x1d2>
 80045ea:	2f58      	cmp	r7, #88	; 0x58
 80045ec:	f000 80a3 	beq.w	8004736 <_printf_i+0x16e>
 80045f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045f8:	e03a      	b.n	8004670 <_printf_i+0xa8>
 80045fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045fe:	2b15      	cmp	r3, #21
 8004600:	d8f6      	bhi.n	80045f0 <_printf_i+0x28>
 8004602:	a101      	add	r1, pc, #4	; (adr r1, 8004608 <_printf_i+0x40>)
 8004604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004608:	08004661 	.word	0x08004661
 800460c:	08004675 	.word	0x08004675
 8004610:	080045f1 	.word	0x080045f1
 8004614:	080045f1 	.word	0x080045f1
 8004618:	080045f1 	.word	0x080045f1
 800461c:	080045f1 	.word	0x080045f1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045f1 	.word	0x080045f1
 8004628:	080045f1 	.word	0x080045f1
 800462c:	080045f1 	.word	0x080045f1
 8004630:	080045f1 	.word	0x080045f1
 8004634:	08004781 	.word	0x08004781
 8004638:	080046a5 	.word	0x080046a5
 800463c:	08004763 	.word	0x08004763
 8004640:	080045f1 	.word	0x080045f1
 8004644:	080045f1 	.word	0x080045f1
 8004648:	080047a3 	.word	0x080047a3
 800464c:	080045f1 	.word	0x080045f1
 8004650:	080046a5 	.word	0x080046a5
 8004654:	080045f1 	.word	0x080045f1
 8004658:	080045f1 	.word	0x080045f1
 800465c:	0800476b 	.word	0x0800476b
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	1d1a      	adds	r2, r3, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	602a      	str	r2, [r5, #0]
 8004668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800466c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004670:	2301      	movs	r3, #1
 8004672:	e0a3      	b.n	80047bc <_printf_i+0x1f4>
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	6829      	ldr	r1, [r5, #0]
 8004678:	0606      	lsls	r6, r0, #24
 800467a:	f101 0304 	add.w	r3, r1, #4
 800467e:	d50a      	bpl.n	8004696 <_printf_i+0xce>
 8004680:	680e      	ldr	r6, [r1, #0]
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	2e00      	cmp	r6, #0
 8004686:	da03      	bge.n	8004690 <_printf_i+0xc8>
 8004688:	232d      	movs	r3, #45	; 0x2d
 800468a:	4276      	negs	r6, r6
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	485e      	ldr	r0, [pc, #376]	; (800480c <_printf_i+0x244>)
 8004692:	230a      	movs	r3, #10
 8004694:	e019      	b.n	80046ca <_printf_i+0x102>
 8004696:	680e      	ldr	r6, [r1, #0]
 8004698:	602b      	str	r3, [r5, #0]
 800469a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800469e:	bf18      	it	ne
 80046a0:	b236      	sxthne	r6, r6
 80046a2:	e7ef      	b.n	8004684 <_printf_i+0xbc>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	6820      	ldr	r0, [r4, #0]
 80046a8:	1d19      	adds	r1, r3, #4
 80046aa:	6029      	str	r1, [r5, #0]
 80046ac:	0601      	lsls	r1, r0, #24
 80046ae:	d501      	bpl.n	80046b4 <_printf_i+0xec>
 80046b0:	681e      	ldr	r6, [r3, #0]
 80046b2:	e002      	b.n	80046ba <_printf_i+0xf2>
 80046b4:	0646      	lsls	r6, r0, #25
 80046b6:	d5fb      	bpl.n	80046b0 <_printf_i+0xe8>
 80046b8:	881e      	ldrh	r6, [r3, #0]
 80046ba:	4854      	ldr	r0, [pc, #336]	; (800480c <_printf_i+0x244>)
 80046bc:	2f6f      	cmp	r7, #111	; 0x6f
 80046be:	bf0c      	ite	eq
 80046c0:	2308      	moveq	r3, #8
 80046c2:	230a      	movne	r3, #10
 80046c4:	2100      	movs	r1, #0
 80046c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ca:	6865      	ldr	r5, [r4, #4]
 80046cc:	60a5      	str	r5, [r4, #8]
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	bfa2      	ittt	ge
 80046d2:	6821      	ldrge	r1, [r4, #0]
 80046d4:	f021 0104 	bicge.w	r1, r1, #4
 80046d8:	6021      	strge	r1, [r4, #0]
 80046da:	b90e      	cbnz	r6, 80046e0 <_printf_i+0x118>
 80046dc:	2d00      	cmp	r5, #0
 80046de:	d04d      	beq.n	800477c <_printf_i+0x1b4>
 80046e0:	4615      	mov	r5, r2
 80046e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80046e6:	fb03 6711 	mls	r7, r3, r1, r6
 80046ea:	5dc7      	ldrb	r7, [r0, r7]
 80046ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046f0:	4637      	mov	r7, r6
 80046f2:	42bb      	cmp	r3, r7
 80046f4:	460e      	mov	r6, r1
 80046f6:	d9f4      	bls.n	80046e2 <_printf_i+0x11a>
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d10b      	bne.n	8004714 <_printf_i+0x14c>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	07de      	lsls	r6, r3, #31
 8004700:	d508      	bpl.n	8004714 <_printf_i+0x14c>
 8004702:	6923      	ldr	r3, [r4, #16]
 8004704:	6861      	ldr	r1, [r4, #4]
 8004706:	4299      	cmp	r1, r3
 8004708:	bfde      	ittt	le
 800470a:	2330      	movle	r3, #48	; 0x30
 800470c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004710:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004714:	1b52      	subs	r2, r2, r5
 8004716:	6122      	str	r2, [r4, #16]
 8004718:	f8cd a000 	str.w	sl, [sp]
 800471c:	464b      	mov	r3, r9
 800471e:	aa03      	add	r2, sp, #12
 8004720:	4621      	mov	r1, r4
 8004722:	4640      	mov	r0, r8
 8004724:	f7ff fee2 	bl	80044ec <_printf_common>
 8004728:	3001      	adds	r0, #1
 800472a:	d14c      	bne.n	80047c6 <_printf_i+0x1fe>
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	b004      	add	sp, #16
 8004732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004736:	4835      	ldr	r0, [pc, #212]	; (800480c <_printf_i+0x244>)
 8004738:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800473c:	6829      	ldr	r1, [r5, #0]
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	f851 6b04 	ldr.w	r6, [r1], #4
 8004744:	6029      	str	r1, [r5, #0]
 8004746:	061d      	lsls	r5, r3, #24
 8004748:	d514      	bpl.n	8004774 <_printf_i+0x1ac>
 800474a:	07df      	lsls	r7, r3, #31
 800474c:	bf44      	itt	mi
 800474e:	f043 0320 	orrmi.w	r3, r3, #32
 8004752:	6023      	strmi	r3, [r4, #0]
 8004754:	b91e      	cbnz	r6, 800475e <_printf_i+0x196>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	f023 0320 	bic.w	r3, r3, #32
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	2310      	movs	r3, #16
 8004760:	e7b0      	b.n	80046c4 <_printf_i+0xfc>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f043 0320 	orr.w	r3, r3, #32
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	2378      	movs	r3, #120	; 0x78
 800476c:	4828      	ldr	r0, [pc, #160]	; (8004810 <_printf_i+0x248>)
 800476e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004772:	e7e3      	b.n	800473c <_printf_i+0x174>
 8004774:	0659      	lsls	r1, r3, #25
 8004776:	bf48      	it	mi
 8004778:	b2b6      	uxthmi	r6, r6
 800477a:	e7e6      	b.n	800474a <_printf_i+0x182>
 800477c:	4615      	mov	r5, r2
 800477e:	e7bb      	b.n	80046f8 <_printf_i+0x130>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	6826      	ldr	r6, [r4, #0]
 8004784:	6961      	ldr	r1, [r4, #20]
 8004786:	1d18      	adds	r0, r3, #4
 8004788:	6028      	str	r0, [r5, #0]
 800478a:	0635      	lsls	r5, r6, #24
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	d501      	bpl.n	8004794 <_printf_i+0x1cc>
 8004790:	6019      	str	r1, [r3, #0]
 8004792:	e002      	b.n	800479a <_printf_i+0x1d2>
 8004794:	0670      	lsls	r0, r6, #25
 8004796:	d5fb      	bpl.n	8004790 <_printf_i+0x1c8>
 8004798:	8019      	strh	r1, [r3, #0]
 800479a:	2300      	movs	r3, #0
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	4615      	mov	r5, r2
 80047a0:	e7ba      	b.n	8004718 <_printf_i+0x150>
 80047a2:	682b      	ldr	r3, [r5, #0]
 80047a4:	1d1a      	adds	r2, r3, #4
 80047a6:	602a      	str	r2, [r5, #0]
 80047a8:	681d      	ldr	r5, [r3, #0]
 80047aa:	6862      	ldr	r2, [r4, #4]
 80047ac:	2100      	movs	r1, #0
 80047ae:	4628      	mov	r0, r5
 80047b0:	f7fb fd36 	bl	8000220 <memchr>
 80047b4:	b108      	cbz	r0, 80047ba <_printf_i+0x1f2>
 80047b6:	1b40      	subs	r0, r0, r5
 80047b8:	6060      	str	r0, [r4, #4]
 80047ba:	6863      	ldr	r3, [r4, #4]
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	2300      	movs	r3, #0
 80047c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047c4:	e7a8      	b.n	8004718 <_printf_i+0x150>
 80047c6:	6923      	ldr	r3, [r4, #16]
 80047c8:	462a      	mov	r2, r5
 80047ca:	4649      	mov	r1, r9
 80047cc:	4640      	mov	r0, r8
 80047ce:	47d0      	blx	sl
 80047d0:	3001      	adds	r0, #1
 80047d2:	d0ab      	beq.n	800472c <_printf_i+0x164>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	079b      	lsls	r3, r3, #30
 80047d8:	d413      	bmi.n	8004802 <_printf_i+0x23a>
 80047da:	68e0      	ldr	r0, [r4, #12]
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	4298      	cmp	r0, r3
 80047e0:	bfb8      	it	lt
 80047e2:	4618      	movlt	r0, r3
 80047e4:	e7a4      	b.n	8004730 <_printf_i+0x168>
 80047e6:	2301      	movs	r3, #1
 80047e8:	4632      	mov	r2, r6
 80047ea:	4649      	mov	r1, r9
 80047ec:	4640      	mov	r0, r8
 80047ee:	47d0      	blx	sl
 80047f0:	3001      	adds	r0, #1
 80047f2:	d09b      	beq.n	800472c <_printf_i+0x164>
 80047f4:	3501      	adds	r5, #1
 80047f6:	68e3      	ldr	r3, [r4, #12]
 80047f8:	9903      	ldr	r1, [sp, #12]
 80047fa:	1a5b      	subs	r3, r3, r1
 80047fc:	42ab      	cmp	r3, r5
 80047fe:	dcf2      	bgt.n	80047e6 <_printf_i+0x21e>
 8004800:	e7eb      	b.n	80047da <_printf_i+0x212>
 8004802:	2500      	movs	r5, #0
 8004804:	f104 0619 	add.w	r6, r4, #25
 8004808:	e7f5      	b.n	80047f6 <_printf_i+0x22e>
 800480a:	bf00      	nop
 800480c:	08004bc5 	.word	0x08004bc5
 8004810:	08004bd6 	.word	0x08004bd6

08004814 <memcpy>:
 8004814:	440a      	add	r2, r1
 8004816:	4291      	cmp	r1, r2
 8004818:	f100 33ff 	add.w	r3, r0, #4294967295
 800481c:	d100      	bne.n	8004820 <memcpy+0xc>
 800481e:	4770      	bx	lr
 8004820:	b510      	push	{r4, lr}
 8004822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800482a:	4291      	cmp	r1, r2
 800482c:	d1f9      	bne.n	8004822 <memcpy+0xe>
 800482e:	bd10      	pop	{r4, pc}

08004830 <memmove>:
 8004830:	4288      	cmp	r0, r1
 8004832:	b510      	push	{r4, lr}
 8004834:	eb01 0402 	add.w	r4, r1, r2
 8004838:	d902      	bls.n	8004840 <memmove+0x10>
 800483a:	4284      	cmp	r4, r0
 800483c:	4623      	mov	r3, r4
 800483e:	d807      	bhi.n	8004850 <memmove+0x20>
 8004840:	1e43      	subs	r3, r0, #1
 8004842:	42a1      	cmp	r1, r4
 8004844:	d008      	beq.n	8004858 <memmove+0x28>
 8004846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800484a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800484e:	e7f8      	b.n	8004842 <memmove+0x12>
 8004850:	4402      	add	r2, r0
 8004852:	4601      	mov	r1, r0
 8004854:	428a      	cmp	r2, r1
 8004856:	d100      	bne.n	800485a <memmove+0x2a>
 8004858:	bd10      	pop	{r4, pc}
 800485a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800485e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004862:	e7f7      	b.n	8004854 <memmove+0x24>

08004864 <_free_r>:
 8004864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004866:	2900      	cmp	r1, #0
 8004868:	d044      	beq.n	80048f4 <_free_r+0x90>
 800486a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800486e:	9001      	str	r0, [sp, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f1a1 0404 	sub.w	r4, r1, #4
 8004876:	bfb8      	it	lt
 8004878:	18e4      	addlt	r4, r4, r3
 800487a:	f000 f913 	bl	8004aa4 <__malloc_lock>
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <_free_r+0x94>)
 8004880:	9801      	ldr	r0, [sp, #4]
 8004882:	6813      	ldr	r3, [r2, #0]
 8004884:	b933      	cbnz	r3, 8004894 <_free_r+0x30>
 8004886:	6063      	str	r3, [r4, #4]
 8004888:	6014      	str	r4, [r2, #0]
 800488a:	b003      	add	sp, #12
 800488c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004890:	f000 b90e 	b.w	8004ab0 <__malloc_unlock>
 8004894:	42a3      	cmp	r3, r4
 8004896:	d908      	bls.n	80048aa <_free_r+0x46>
 8004898:	6825      	ldr	r5, [r4, #0]
 800489a:	1961      	adds	r1, r4, r5
 800489c:	428b      	cmp	r3, r1
 800489e:	bf01      	itttt	eq
 80048a0:	6819      	ldreq	r1, [r3, #0]
 80048a2:	685b      	ldreq	r3, [r3, #4]
 80048a4:	1949      	addeq	r1, r1, r5
 80048a6:	6021      	streq	r1, [r4, #0]
 80048a8:	e7ed      	b.n	8004886 <_free_r+0x22>
 80048aa:	461a      	mov	r2, r3
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	b10b      	cbz	r3, 80048b4 <_free_r+0x50>
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	d9fa      	bls.n	80048aa <_free_r+0x46>
 80048b4:	6811      	ldr	r1, [r2, #0]
 80048b6:	1855      	adds	r5, r2, r1
 80048b8:	42a5      	cmp	r5, r4
 80048ba:	d10b      	bne.n	80048d4 <_free_r+0x70>
 80048bc:	6824      	ldr	r4, [r4, #0]
 80048be:	4421      	add	r1, r4
 80048c0:	1854      	adds	r4, r2, r1
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	6011      	str	r1, [r2, #0]
 80048c6:	d1e0      	bne.n	800488a <_free_r+0x26>
 80048c8:	681c      	ldr	r4, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	6053      	str	r3, [r2, #4]
 80048ce:	4421      	add	r1, r4
 80048d0:	6011      	str	r1, [r2, #0]
 80048d2:	e7da      	b.n	800488a <_free_r+0x26>
 80048d4:	d902      	bls.n	80048dc <_free_r+0x78>
 80048d6:	230c      	movs	r3, #12
 80048d8:	6003      	str	r3, [r0, #0]
 80048da:	e7d6      	b.n	800488a <_free_r+0x26>
 80048dc:	6825      	ldr	r5, [r4, #0]
 80048de:	1961      	adds	r1, r4, r5
 80048e0:	428b      	cmp	r3, r1
 80048e2:	bf04      	itt	eq
 80048e4:	6819      	ldreq	r1, [r3, #0]
 80048e6:	685b      	ldreq	r3, [r3, #4]
 80048e8:	6063      	str	r3, [r4, #4]
 80048ea:	bf04      	itt	eq
 80048ec:	1949      	addeq	r1, r1, r5
 80048ee:	6021      	streq	r1, [r4, #0]
 80048f0:	6054      	str	r4, [r2, #4]
 80048f2:	e7ca      	b.n	800488a <_free_r+0x26>
 80048f4:	b003      	add	sp, #12
 80048f6:	bd30      	pop	{r4, r5, pc}
 80048f8:	20000550 	.word	0x20000550

080048fc <sbrk_aligned>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	4e0e      	ldr	r6, [pc, #56]	; (8004938 <sbrk_aligned+0x3c>)
 8004900:	460c      	mov	r4, r1
 8004902:	6831      	ldr	r1, [r6, #0]
 8004904:	4605      	mov	r5, r0
 8004906:	b911      	cbnz	r1, 800490e <sbrk_aligned+0x12>
 8004908:	f000 f8bc 	bl	8004a84 <_sbrk_r>
 800490c:	6030      	str	r0, [r6, #0]
 800490e:	4621      	mov	r1, r4
 8004910:	4628      	mov	r0, r5
 8004912:	f000 f8b7 	bl	8004a84 <_sbrk_r>
 8004916:	1c43      	adds	r3, r0, #1
 8004918:	d00a      	beq.n	8004930 <sbrk_aligned+0x34>
 800491a:	1cc4      	adds	r4, r0, #3
 800491c:	f024 0403 	bic.w	r4, r4, #3
 8004920:	42a0      	cmp	r0, r4
 8004922:	d007      	beq.n	8004934 <sbrk_aligned+0x38>
 8004924:	1a21      	subs	r1, r4, r0
 8004926:	4628      	mov	r0, r5
 8004928:	f000 f8ac 	bl	8004a84 <_sbrk_r>
 800492c:	3001      	adds	r0, #1
 800492e:	d101      	bne.n	8004934 <sbrk_aligned+0x38>
 8004930:	f04f 34ff 	mov.w	r4, #4294967295
 8004934:	4620      	mov	r0, r4
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	20000554 	.word	0x20000554

0800493c <_malloc_r>:
 800493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004940:	1ccd      	adds	r5, r1, #3
 8004942:	f025 0503 	bic.w	r5, r5, #3
 8004946:	3508      	adds	r5, #8
 8004948:	2d0c      	cmp	r5, #12
 800494a:	bf38      	it	cc
 800494c:	250c      	movcc	r5, #12
 800494e:	2d00      	cmp	r5, #0
 8004950:	4607      	mov	r7, r0
 8004952:	db01      	blt.n	8004958 <_malloc_r+0x1c>
 8004954:	42a9      	cmp	r1, r5
 8004956:	d905      	bls.n	8004964 <_malloc_r+0x28>
 8004958:	230c      	movs	r3, #12
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	2600      	movs	r6, #0
 800495e:	4630      	mov	r0, r6
 8004960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004964:	4e2e      	ldr	r6, [pc, #184]	; (8004a20 <_malloc_r+0xe4>)
 8004966:	f000 f89d 	bl	8004aa4 <__malloc_lock>
 800496a:	6833      	ldr	r3, [r6, #0]
 800496c:	461c      	mov	r4, r3
 800496e:	bb34      	cbnz	r4, 80049be <_malloc_r+0x82>
 8004970:	4629      	mov	r1, r5
 8004972:	4638      	mov	r0, r7
 8004974:	f7ff ffc2 	bl	80048fc <sbrk_aligned>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	4604      	mov	r4, r0
 800497c:	d14d      	bne.n	8004a1a <_malloc_r+0xde>
 800497e:	6834      	ldr	r4, [r6, #0]
 8004980:	4626      	mov	r6, r4
 8004982:	2e00      	cmp	r6, #0
 8004984:	d140      	bne.n	8004a08 <_malloc_r+0xcc>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	4631      	mov	r1, r6
 800498a:	4638      	mov	r0, r7
 800498c:	eb04 0803 	add.w	r8, r4, r3
 8004990:	f000 f878 	bl	8004a84 <_sbrk_r>
 8004994:	4580      	cmp	r8, r0
 8004996:	d13a      	bne.n	8004a0e <_malloc_r+0xd2>
 8004998:	6821      	ldr	r1, [r4, #0]
 800499a:	3503      	adds	r5, #3
 800499c:	1a6d      	subs	r5, r5, r1
 800499e:	f025 0503 	bic.w	r5, r5, #3
 80049a2:	3508      	adds	r5, #8
 80049a4:	2d0c      	cmp	r5, #12
 80049a6:	bf38      	it	cc
 80049a8:	250c      	movcc	r5, #12
 80049aa:	4629      	mov	r1, r5
 80049ac:	4638      	mov	r0, r7
 80049ae:	f7ff ffa5 	bl	80048fc <sbrk_aligned>
 80049b2:	3001      	adds	r0, #1
 80049b4:	d02b      	beq.n	8004a0e <_malloc_r+0xd2>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	442b      	add	r3, r5
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	e00e      	b.n	80049dc <_malloc_r+0xa0>
 80049be:	6822      	ldr	r2, [r4, #0]
 80049c0:	1b52      	subs	r2, r2, r5
 80049c2:	d41e      	bmi.n	8004a02 <_malloc_r+0xc6>
 80049c4:	2a0b      	cmp	r2, #11
 80049c6:	d916      	bls.n	80049f6 <_malloc_r+0xba>
 80049c8:	1961      	adds	r1, r4, r5
 80049ca:	42a3      	cmp	r3, r4
 80049cc:	6025      	str	r5, [r4, #0]
 80049ce:	bf18      	it	ne
 80049d0:	6059      	strne	r1, [r3, #4]
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	bf08      	it	eq
 80049d6:	6031      	streq	r1, [r6, #0]
 80049d8:	5162      	str	r2, [r4, r5]
 80049da:	604b      	str	r3, [r1, #4]
 80049dc:	4638      	mov	r0, r7
 80049de:	f104 060b 	add.w	r6, r4, #11
 80049e2:	f000 f865 	bl	8004ab0 <__malloc_unlock>
 80049e6:	f026 0607 	bic.w	r6, r6, #7
 80049ea:	1d23      	adds	r3, r4, #4
 80049ec:	1af2      	subs	r2, r6, r3
 80049ee:	d0b6      	beq.n	800495e <_malloc_r+0x22>
 80049f0:	1b9b      	subs	r3, r3, r6
 80049f2:	50a3      	str	r3, [r4, r2]
 80049f4:	e7b3      	b.n	800495e <_malloc_r+0x22>
 80049f6:	6862      	ldr	r2, [r4, #4]
 80049f8:	42a3      	cmp	r3, r4
 80049fa:	bf0c      	ite	eq
 80049fc:	6032      	streq	r2, [r6, #0]
 80049fe:	605a      	strne	r2, [r3, #4]
 8004a00:	e7ec      	b.n	80049dc <_malloc_r+0xa0>
 8004a02:	4623      	mov	r3, r4
 8004a04:	6864      	ldr	r4, [r4, #4]
 8004a06:	e7b2      	b.n	800496e <_malloc_r+0x32>
 8004a08:	4634      	mov	r4, r6
 8004a0a:	6876      	ldr	r6, [r6, #4]
 8004a0c:	e7b9      	b.n	8004982 <_malloc_r+0x46>
 8004a0e:	230c      	movs	r3, #12
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4638      	mov	r0, r7
 8004a14:	f000 f84c 	bl	8004ab0 <__malloc_unlock>
 8004a18:	e7a1      	b.n	800495e <_malloc_r+0x22>
 8004a1a:	6025      	str	r5, [r4, #0]
 8004a1c:	e7de      	b.n	80049dc <_malloc_r+0xa0>
 8004a1e:	bf00      	nop
 8004a20:	20000550 	.word	0x20000550

08004a24 <_realloc_r>:
 8004a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a28:	4680      	mov	r8, r0
 8004a2a:	4614      	mov	r4, r2
 8004a2c:	460e      	mov	r6, r1
 8004a2e:	b921      	cbnz	r1, 8004a3a <_realloc_r+0x16>
 8004a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a34:	4611      	mov	r1, r2
 8004a36:	f7ff bf81 	b.w	800493c <_malloc_r>
 8004a3a:	b92a      	cbnz	r2, 8004a48 <_realloc_r+0x24>
 8004a3c:	f7ff ff12 	bl	8004864 <_free_r>
 8004a40:	4625      	mov	r5, r4
 8004a42:	4628      	mov	r0, r5
 8004a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a48:	f000 f838 	bl	8004abc <_malloc_usable_size_r>
 8004a4c:	4284      	cmp	r4, r0
 8004a4e:	4607      	mov	r7, r0
 8004a50:	d802      	bhi.n	8004a58 <_realloc_r+0x34>
 8004a52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a56:	d812      	bhi.n	8004a7e <_realloc_r+0x5a>
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	f7ff ff6e 	bl	800493c <_malloc_r>
 8004a60:	4605      	mov	r5, r0
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d0ed      	beq.n	8004a42 <_realloc_r+0x1e>
 8004a66:	42bc      	cmp	r4, r7
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	bf28      	it	cs
 8004a6e:	463a      	movcs	r2, r7
 8004a70:	f7ff fed0 	bl	8004814 <memcpy>
 8004a74:	4631      	mov	r1, r6
 8004a76:	4640      	mov	r0, r8
 8004a78:	f7ff fef4 	bl	8004864 <_free_r>
 8004a7c:	e7e1      	b.n	8004a42 <_realloc_r+0x1e>
 8004a7e:	4635      	mov	r5, r6
 8004a80:	e7df      	b.n	8004a42 <_realloc_r+0x1e>
	...

08004a84 <_sbrk_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4d06      	ldr	r5, [pc, #24]	; (8004aa0 <_sbrk_r+0x1c>)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	602b      	str	r3, [r5, #0]
 8004a90:	f7fc fb6e 	bl	8001170 <_sbrk>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_sbrk_r+0x1a>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_sbrk_r+0x1a>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	20000558 	.word	0x20000558

08004aa4 <__malloc_lock>:
 8004aa4:	4801      	ldr	r0, [pc, #4]	; (8004aac <__malloc_lock+0x8>)
 8004aa6:	f000 b811 	b.w	8004acc <__retarget_lock_acquire_recursive>
 8004aaa:	bf00      	nop
 8004aac:	2000055c 	.word	0x2000055c

08004ab0 <__malloc_unlock>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__malloc_unlock+0x8>)
 8004ab2:	f000 b80c 	b.w	8004ace <__retarget_lock_release_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	2000055c 	.word	0x2000055c

08004abc <_malloc_usable_size_r>:
 8004abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac0:	1f18      	subs	r0, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bfbc      	itt	lt
 8004ac6:	580b      	ldrlt	r3, [r1, r0]
 8004ac8:	18c0      	addlt	r0, r0, r3
 8004aca:	4770      	bx	lr

08004acc <__retarget_lock_acquire_recursive>:
 8004acc:	4770      	bx	lr

08004ace <__retarget_lock_release_recursive>:
 8004ace:	4770      	bx	lr

08004ad0 <_init>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr

08004adc <_fini>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr
