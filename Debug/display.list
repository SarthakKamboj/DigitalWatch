
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004714  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d4  080049d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049dc  080049dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000070  08004a54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08004a54  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c77f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba6  00000000  00000000  0002c81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021896  00000000  00000000  0002f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcd4  00000000  00000000  0005104e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb1a9  00000000  00000000  0005ed22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129ecb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e6c  00000000  00000000  00129f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048cc 	.word	0x080048cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080048cc 	.word	0x080048cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <draw_character>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char display_buffer[DISPLAY_COLS * DISPLAY_ROWS / 8];

void draw_character(int row, int horizontal_offset, uint8_t* start_of_data) {
 80005c4:	b480      	push	{r7}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	for (int col = 0; col < 8; col++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
 80005d4:	e02b      	b.n	800062e <draw_character+0x6a>
		uint8_t data = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	76fb      	strb	r3, [r7, #27]
		for (int font_data_row = 0; font_data_row < 8; font_data_row++) {
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e017      	b.n	8000610 <draw_character+0x4c>
			data |= ((start_of_data[font_data_row] >> (7 - col)) & 0x01) << font_data_row;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	f1c3 0307 	rsb	r3, r3, #7
 80005f0:	fa42 f303 	asr.w	r3, r2, r3
 80005f4:	f003 0201 	and.w	r2, r3, #1
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000604:	4313      	orrs	r3, r2
 8000606:	b25b      	sxtb	r3, r3
 8000608:	76fb      	strb	r3, [r7, #27]
		for (int font_data_row = 0; font_data_row < 8; font_data_row++) {
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	2b07      	cmp	r3, #7
 8000614:	dde4      	ble.n	80005e0 <draw_character+0x1c>
		}
		display_buffer[(row * DISPLAY_COLS) + col + horizontal_offset] = data;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	01da      	lsls	r2, r3, #7
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	441a      	add	r2, r3
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4413      	add	r3, r2
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <draw_character+0x80>)
 8000624:	7efa      	ldrb	r2, [r7, #27]
 8000626:	54ca      	strb	r2, [r1, r3]
	for (int col = 0; col < 8; col++) {
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	3301      	adds	r3, #1
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	2b07      	cmp	r3, #7
 8000632:	ddd0      	ble.n	80005d6 <draw_character+0x12>
	}
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3724      	adds	r7, #36	; 0x24
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000124 	.word	0x20000124

08000648 <draw_digit>:

void draw_digit(int digit, int row, int horizontal_offset) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
	int font_number_data_idx = digit * 8;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	613b      	str	r3, [r7, #16]
	for (int col = 0; col < 8; col++) {
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	e00a      	b.n	8000676 <draw_digit+0x2e>
		draw_character(0, horizontal_offset, font_number_data + font_number_data_idx);
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <draw_digit+0x40>)
 8000664:	4413      	add	r3, r2
 8000666:	461a      	mov	r2, r3
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff ffaa 	bl	80005c4 <draw_character>
	for (int col = 0; col < 8; col++) {
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	3301      	adds	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2b07      	cmp	r3, #7
 800067a:	ddf1      	ble.n	8000660 <draw_digit+0x18>
//		for (int font_number_data_row = 0; font_number_data_row < 8; font_number_data_row++) {
//			data |= ((font_number_data[font_number_data_row + font_number_data_idx] >> (7 - col)) & 0x01) << font_number_data_row;
//		}
//		display_buffer[(row * DISPLAY_COLS) + col + horizontal_offset] = data;
	}
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	08004938 	.word	0x08004938

0800068c <draw_number>:

// TODO: add size capability
void draw_number(int row) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

	draw_digit(0, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ffd5 	bl	8000648 <draw_digit>
	draw_digit(3, 0, 8);
 800069e:	2208      	movs	r2, #8
 80006a0:	2100      	movs	r1, #0
 80006a2:	2003      	movs	r0, #3
 80006a4:	f7ff ffd0 	bl	8000648 <draw_digit>

	draw_digit(2, 0, 24);
 80006a8:	2218      	movs	r2, #24
 80006aa:	2100      	movs	r1, #0
 80006ac:	2002      	movs	r0, #2
 80006ae:	f7ff ffcb 	bl	8000648 <draw_digit>
	draw_digit(6, 0, 32);
 80006b2:	2220      	movs	r2, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	2006      	movs	r0, #6
 80006b8:	f7ff ffc6 	bl	8000648 <draw_digit>
//			}
//			display_buffer[(row * DISPLAY_COLS) + col + (8 * number)] = data;
//		}
//	}

}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <print_to_screen>:

void print_to_screen(unsigned char* text) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, text, strlen((char*)text), HAL_MAX_DELAY);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff fd9f 	bl	8000210 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <print_to_screen+0x28>)
 80006de:	f002 fc2a 	bl	8002f36 <HAL_UART_Transmit>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000e0 	.word	0x200000e0

080006f0 <send_data>:

void send_data(uint8_t* data, uint16_t size) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09e      	sub	sp, #120	; 0x78
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
	uint8_t padded_data[100];
	padded_data[0] = 0x40;
 80006fc:	2340      	movs	r3, #64	; 0x40
 80006fe:	723b      	strb	r3, [r7, #8]
	for (int i = 0; i < size; i++) {
 8000700:	2300      	movs	r3, #0
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000704:	e00c      	b.n	8000720 <send_data+0x30>
		padded_data[i+1] = data[i];
 8000706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	441a      	add	r2, r3
 800070c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800070e:	3301      	adds	r3, #1
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	3370      	adds	r3, #112	; 0x70
 8000714:	443b      	add	r3, r7
 8000716:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (int i = 0; i < size; i++) {
 800071a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800071c:	3301      	adds	r3, #1
 800071e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000720:	887b      	ldrh	r3, [r7, #2]
 8000722:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000724:	429a      	cmp	r2, r3
 8000726:	dbee      	blt.n	8000706 <send_data+0x16>
	}
	HAL_I2C_Master_Transmit(&hi2c1, DISPLAY_I2C_ADDR << 1, padded_data, size + 1, HAL_MAX_DELAY);
 8000728:	887b      	ldrh	r3, [r7, #2]
 800072a:	3301      	adds	r3, #1
 800072c:	b29b      	uxth	r3, r3
 800072e:	f107 0208 	add.w	r2, r7, #8
 8000732:	f04f 31ff 	mov.w	r1, #4294967295
 8000736:	9100      	str	r1, [sp, #0]
 8000738:	2178      	movs	r1, #120	; 0x78
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <send_data+0x58>)
 800073c:	f001 f990 	bl	8001a60 <HAL_I2C_Master_Transmit>
}
 8000740:	bf00      	nop
 8000742:	3770      	adds	r7, #112	; 0x70
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000008c 	.word	0x2000008c

0800074c <send_cmd_to_display>:

void send_cmd_to_display(uint8_t* data) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af02      	add	r7, sp, #8
 8000752:	6078      	str	r0, [r7, #4]
	uint8_t padded_data[2];
	padded_data[0] = 0x00;
 8000754:	2300      	movs	r3, #0
 8000756:	733b      	strb	r3, [r7, #12]
	padded_data[1] = *data;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, DISPLAY_I2C_ADDR << 1, padded_data, 2, HAL_MAX_DELAY);
 800075e:	f107 020c 	add.w	r2, r7, #12
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2302      	movs	r3, #2
 800076a:	2178      	movs	r1, #120	; 0x78
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <send_cmd_to_display+0x30>)
 800076e:	f001 f977 	bl	8001a60 <HAL_I2C_Master_Transmit>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000008c 	.word	0x2000008c

08000780 <init_display>:

void init_display() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
	uint8_t DISPLAY_OFF = 0xAE;
 8000786:	23ae      	movs	r3, #174	; 0xae
 8000788:	75fb      	strb	r3, [r7, #23]
	uint8_t DISPLAY_CLOCK_DIV = 0xD5;
 800078a:	23d5      	movs	r3, #213	; 0xd5
 800078c:	75bb      	strb	r3, [r7, #22]
	uint8_t DISPLAY_MULTIPLEX = 0xA8;
 800078e:	23a8      	movs	r3, #168	; 0xa8
 8000790:	757b      	strb	r3, [r7, #21]
	uint8_t DISPLAY_OFFSET = 0xD3;
 8000792:	23d3      	movs	r3, #211	; 0xd3
 8000794:	753b      	strb	r3, [r7, #20]
	uint8_t START_LINE = 0x40;
 8000796:	2340      	movs	r3, #64	; 0x40
 8000798:	74fb      	strb	r3, [r7, #19]
	uint8_t CHARGE_PUMP = 0x8D;
 800079a:	238d      	movs	r3, #141	; 0x8d
 800079c:	74bb      	strb	r3, [r7, #18]
	uint8_t MEM_MODE = 0x20;
 800079e:	2320      	movs	r3, #32
 80007a0:	747b      	strb	r3, [r7, #17]
	uint8_t SEGREMAP = 0xA0 | 0x01;
 80007a2:	23a1      	movs	r3, #161	; 0xa1
 80007a4:	743b      	strb	r3, [r7, #16]
	uint8_t COMSCANDEC = 0xC8;
 80007a6:	23c8      	movs	r3, #200	; 0xc8
 80007a8:	73fb      	strb	r3, [r7, #15]
	uint8_t SETCOMPINS = 0xDA;
 80007aa:	23da      	movs	r3, #218	; 0xda
 80007ac:	73bb      	strb	r3, [r7, #14]
	uint8_t CONTRAST = 0x81;
 80007ae:	2381      	movs	r3, #129	; 0x81
 80007b0:	737b      	strb	r3, [r7, #13]
	uint8_t PRECHARGE = 0xD9;
 80007b2:	23d9      	movs	r3, #217	; 0xd9
 80007b4:	733b      	strb	r3, [r7, #12]
	uint8_t SETVCOMDETECT = 0xDB;
 80007b6:	23db      	movs	r3, #219	; 0xdb
 80007b8:	72fb      	strb	r3, [r7, #11]
	uint8_t DISPLAYALLON_RESUME = 0xA4;
 80007ba:	23a4      	movs	r3, #164	; 0xa4
 80007bc:	72bb      	strb	r3, [r7, #10]
	uint8_t NORMAL_DISPLAY = 0xA6;
 80007be:	23a6      	movs	r3, #166	; 0xa6
 80007c0:	727b      	strb	r3, [r7, #9]
	uint8_t DISPLAY_ON = 0xAF;
 80007c2:	23af      	movs	r3, #175	; 0xaf
 80007c4:	723b      	strb	r3, [r7, #8]
	uint8_t val;

	send_cmd_to_display(&DISPLAY_OFF);
 80007c6:	f107 0317 	add.w	r3, r7, #23
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ffbe 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAY_CLOCK_DIV);
 80007d0:	f107 0316 	add.w	r3, r7, #22
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ffb9 	bl	800074c <send_cmd_to_display>
	val = 0x80;
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ffb3 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAY_MULTIPLEX);
 80007e6:	f107 0315 	add.w	r3, r7, #21
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffae 	bl	800074c <send_cmd_to_display>
	val = 0x3F;
 80007f0:	233f      	movs	r3, #63	; 0x3f
 80007f2:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ffa8 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAY_OFFSET);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ffa3 	bl	800074c <send_cmd_to_display>
	val = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff9d 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&START_LINE);
 8000812:	f107 0313 	add.w	r3, r7, #19
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff98 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&CHARGE_PUMP);
 800081c:	f107 0312 	add.w	r3, r7, #18
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff93 	bl	800074c <send_cmd_to_display>
	val = 0x14;
 8000826:	2314      	movs	r3, #20
 8000828:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff8d 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&MEM_MODE);
 8000832:	f107 0311 	add.w	r3, r7, #17
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff88 	bl	800074c <send_cmd_to_display>
	val = 0x00;
 800083c:	2300      	movs	r3, #0
 800083e:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff82 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&SEGREMAP);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff7d 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&COMSCANDEC);
 8000852:	f107 030f 	add.w	r3, r7, #15
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff78 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&SETCOMPINS);
 800085c:	f107 030e 	add.w	r3, r7, #14
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff73 	bl	800074c <send_cmd_to_display>
	val = 0x12;
 8000866:	2312      	movs	r3, #18
 8000868:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff6d 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&CONTRAST);
 8000872:	f107 030d 	add.w	r3, r7, #13
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff68 	bl	800074c <send_cmd_to_display>
	val = 0xCF;
 800087c:	23cf      	movs	r3, #207	; 0xcf
 800087e:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff62 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&PRECHARGE);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <send_cmd_to_display>
	val = 0xF1;
 8000892:	23f1      	movs	r3, #241	; 0xf1
 8000894:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff57 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&SETVCOMDETECT);
 800089e:	f107 030b 	add.w	r3, r7, #11
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff52 	bl	800074c <send_cmd_to_display>
	val = 0x40;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	71fb      	strb	r3, [r7, #7]
	send_cmd_to_display(&val);
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff4c 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAYALLON_RESUME);
 80008b4:	f107 030a 	add.w	r3, r7, #10
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff47 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&NORMAL_DISPLAY);
 80008be:	f107 0309 	add.w	r3, r7, #9
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff42 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&DISPLAY_ON);
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff3d 	bl	800074c <send_cmd_to_display>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <render_display>:

void render_display() {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0

	uint8_t COLUMN_ADDR = 0x21;
 80008e2:	2321      	movs	r3, #33	; 0x21
 80008e4:	76fb      	strb	r3, [r7, #27]
	uint8_t zero = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	76bb      	strb	r3, [r7, #26]
	uint8_t RIGHT_MOST_COL = DISPLAY_COLS - 1;
 80008ea:	237f      	movs	r3, #127	; 0x7f
 80008ec:	767b      	strb	r3, [r7, #25]
	uint8_t PAGE_ADDR = 0x22;
 80008ee:	2322      	movs	r3, #34	; 0x22
 80008f0:	763b      	strb	r3, [r7, #24]
	uint8_t val = 7;
 80008f2:	2307      	movs	r3, #7
 80008f4:	75fb      	strb	r3, [r7, #23]

	send_cmd_to_display(&COLUMN_ADDR);
 80008f6:	f107 031b 	add.w	r3, r7, #27
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff26 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&zero);
 8000900:	f107 031a 	add.w	r3, r7, #26
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff21 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&RIGHT_MOST_COL);
 800090a:	f107 0319 	add.w	r3, r7, #25
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff1c 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&PAGE_ADDR);
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff17 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&zero);
 800091e:	f107 031a 	add.w	r3, r7, #26
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ff12 	bl	800074c <send_cmd_to_display>
	send_cmd_to_display(&val);
 8000928:	f107 0317 	add.w	r3, r7, #23
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff0d 	bl	800074c <send_cmd_to_display>

	uint16_t i;
	for (i = 0; i < DISPLAY_ROWS * DISPLAY_COLS / 8; i++) {
 8000932:	2300      	movs	r3, #0
 8000934:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000936:	e023      	b.n	8000980 <render_display+0xa4>
		uint8_t temp_buffer[16];
		int size_of_temp_buffer = sizeof(temp_buffer) / sizeof(temp_buffer[0]);
 8000938:	2310      	movs	r3, #16
 800093a:	61fb      	str	r3, [r7, #28]
		for (int x = 0; x < size_of_temp_buffer; x++) {
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	e00d      	b.n	800095e <render_display+0x82>
			temp_buffer[x] = display_buffer[i];
 8000942:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <render_display+0xb8>)
 8000946:	5cd1      	ldrb	r1, [r2, r3]
 8000948:	1d3a      	adds	r2, r7, #4
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	4413      	add	r3, r2
 800094e:	460a      	mov	r2, r1
 8000950:	701a      	strb	r2, [r3, #0]
			i++;
 8000952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000954:	3301      	adds	r3, #1
 8000956:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int x = 0; x < size_of_temp_buffer; x++) {
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	3301      	adds	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
 800095e:	6a3a      	ldr	r2, [r7, #32]
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	429a      	cmp	r2, r3
 8000964:	dbed      	blt.n	8000942 <render_display+0x66>
		}
		send_data(temp_buffer, size_of_temp_buffer);
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	b29a      	uxth	r2, r3
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff febe 	bl	80006f0 <send_data>
		i--;
 8000974:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000976:	3b01      	subs	r3, #1
 8000978:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (i = 0; i < DISPLAY_ROWS * DISPLAY_COLS / 8; i++) {
 800097a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800097c:	3301      	adds	r3, #1
 800097e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000986:	d3d7      	bcc.n	8000938 <render_display+0x5c>
	}
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000124 	.word	0x20000124

08000998 <clear_display>:

void clear_display() {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	memset(display_buffer, 0, sizeof(display_buffer) / sizeof(display_buffer[0]));
 800099c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a0:	2100      	movs	r1, #0
 80009a2:	4802      	ldr	r0, [pc, #8]	; (80009ac <clear_display+0x14>)
 80009a4:	f003 fb1c 	bl	8003fe0 <memset>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000124 	.word	0x20000124

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b096      	sub	sp, #88	; 0x58
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fb4b 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f84f 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f000 f913 	bl	8000be8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009c2:	f000 f8e7 	bl	8000b94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009c6:	f000 f8b7 	bl	8000b38 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, buffer, sizeof(buffer));
 80009ca:	2201      	movs	r2, #1
 80009cc:	491d      	ldr	r1, [pc, #116]	; (8000a44 <main+0x94>)
 80009ce:	481e      	ldr	r0, [pc, #120]	; (8000a48 <main+0x98>)
 80009d0:	f002 fb43 	bl	800305a <HAL_UART_Receive_IT>

  char buffer[20];
  sprintf(buffer, "test print\r\n");
 80009d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009d8:	491c      	ldr	r1, [pc, #112]	; (8000a4c <main+0x9c>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fb08 	bl	8003ff0 <siprintf>
  print_to_screen((unsigned char*)buffer);
 80009e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe6d 	bl	80006c4 <print_to_screen>


  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, DISPLAY_I2C_ADDR << 1, 5, HAL_MAX_DELAY);
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	2205      	movs	r2, #5
 80009f0:	2178      	movs	r1, #120	; 0x78
 80009f2:	4817      	ldr	r0, [pc, #92]	; (8000a50 <main+0xa0>)
 80009f4:	f001 f932 	bl	8001c5c <HAL_I2C_IsDeviceReady>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (ret != HAL_OK) {
 80009fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00b      	beq.n	8000a1e <main+0x6e>
	  unsigned char buffer[20];
	  sprintf((char*)buffer, "error occurred\r\n");
 8000a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0a:	4912      	ldr	r1, [pc, #72]	; (8000a54 <main+0xa4>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 faef 	bl	8003ff0 <siprintf>
	  print_to_screen(buffer);
 8000a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe54 	bl	80006c4 <print_to_screen>
 8000a1c:	e008      	b.n	8000a30 <main+0x80>
  } else {
	  unsigned char buffer[40];
	  sprintf((char*)buffer, "display module is ready\r\n");
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	490d      	ldr	r1, [pc, #52]	; (8000a58 <main+0xa8>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fae4 	bl	8003ff0 <siprintf>
	  print_to_screen(buffer);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe4a 	bl	80006c4 <print_to_screen>
  }

  init_display();
 8000a30:	f7ff fea6 	bl	8000780 <init_display>
  clear_display();
 8000a34:	f7ff ffb0 	bl	8000998 <clear_display>
  draw_number(0);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fe27 	bl	800068c <draw_number>
  render_display();
 8000a3e:	f7ff ff4d 	bl	80008dc <render_display>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <main+0x92>
 8000a44:	20000524 	.word	0x20000524
 8000a48:	200000e0 	.word	0x200000e0
 8000a4c:	080048e4 	.word	0x080048e4
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	080048f4 	.word	0x080048f4
 8000a58:	08004908 	.word	0x08004908

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	; 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2234      	movs	r2, #52	; 0x34
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fab8 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <SystemClock_Config+0xd4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <SystemClock_Config+0xd4>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <SystemClock_Config+0xd4>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <SystemClock_Config+0xd8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa8:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <SystemClock_Config+0xd8>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <SystemClock_Config+0xd8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ada:	2304      	movs	r3, #4
 8000adc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 ff38 	bl	8002960 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000af6:	f000 f93f 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2102      	movs	r1, #2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fbd8 	bl	80022cc <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b22:	f000 f929 	bl	8000d78 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3750      	adds	r7, #80	; 0x50
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_I2C1_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_I2C1_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b76:	f000 fe2f 	bl	80017d8 <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 f8fa 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000008c 	.word	0x2000008c
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_USART2_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	f002 f966 	bl	8002e9c <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f000 f8cf 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200000e0 	.word	0x200000e0
 8000be4:	40004400 	.word	0x40004400

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a2c      	ldr	r2, [pc, #176]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2120      	movs	r1, #32
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c74:	f000 fd96 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <MX_GPIO_Init+0xd8>)
 8000c90:	f000 fbf4 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c94:	2320      	movs	r3, #32
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000cac:	f000 fbe6 	bl	800147c <HAL_GPIO_Init>

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020800 	.word	0x40020800

08000cc4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b092      	sub	sp, #72	; 0x48
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

	clear_display();
 8000ccc:	f7ff fe64 	bl	8000998 <clear_display>
	uint8_t row = buffer[0] - '0';
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <HAL_UART_RxCpltCallback+0xa4>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (row < 0 || row > 7) {
 8000cda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000cde:	2b07      	cmp	r3, #7
 8000ce0:	d913      	bls.n	8000d0a <HAL_UART_RxCpltCallback+0x46>
		uint8_t str_buffer[50];
		sprintf((char*)str_buffer, "row %c is invalid\r\n", buffer[0]);
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_UART_RxCpltCallback+0xa4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	491f      	ldr	r1, [pc, #124]	; (8000d6c <HAL_UART_RxCpltCallback+0xa8>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 f97e 	bl	8003ff0 <siprintf>
		print_to_screen(str_buffer);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fce3 	bl	80006c4 <print_to_screen>
		HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4919      	ldr	r1, [pc, #100]	; (8000d68 <HAL_UART_RxCpltCallback+0xa4>)
 8000d02:	481b      	ldr	r0, [pc, #108]	; (8000d70 <HAL_UART_RxCpltCallback+0xac>)
 8000d04:	f002 f9a9 	bl	800305a <HAL_UART_Receive_IT>
 8000d08:	e02a      	b.n	8000d60 <HAL_UART_RxCpltCallback+0x9c>
		return;
	}
	for (int col = 0; col < DISPLAY_COLS; col++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8000d0e:	e01d      	b.n	8000d4c <HAL_UART_RxCpltCallback+0x88>
		for (int i = row * 8; i < (row + 1) * 8; i++) {
 8000d10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
 8000d18:	e00e      	b.n	8000d38 <HAL_UART_RxCpltCallback+0x74>
			display_buffer[((i * DISPLAY_COLS) + col) / 8] = 0xff;
 8000d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d1c:	01da      	lsls	r2, r3, #7
 8000d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d20:	4413      	add	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da00      	bge.n	8000d28 <HAL_UART_RxCpltCallback+0x64>
 8000d26:	3307      	adds	r3, #7
 8000d28:	10db      	asrs	r3, r3, #3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_UART_RxCpltCallback+0xb0>)
 8000d2e:	21ff      	movs	r1, #255	; 0xff
 8000d30:	5499      	strb	r1, [r3, r2]
		for (int i = row * 8; i < (row + 1) * 8; i++) {
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	3301      	adds	r3, #1
 8000d36:	643b      	str	r3, [r7, #64]	; 0x40
 8000d38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbe9      	blt.n	8000d1a <HAL_UART_RxCpltCallback+0x56>
	for (int col = 0; col < DISPLAY_COLS; col++) {
 8000d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d48:	3301      	adds	r3, #1
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8000d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d50:	ddde      	ble.n	8000d10 <HAL_UART_RxCpltCallback+0x4c>
		}
	}
	render_display();
 8000d52:	f7ff fdc3 	bl	80008dc <render_display>

	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000d56:	2201      	movs	r2, #1
 8000d58:	4903      	ldr	r1, [pc, #12]	; (8000d68 <HAL_UART_RxCpltCallback+0xa4>)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_UART_RxCpltCallback+0xac>)
 8000d5c:	f002 f97d 	bl	800305a <HAL_UART_Receive_IT>
}
 8000d60:	3748      	adds	r7, #72	; 0x48
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000524 	.word	0x20000524
 8000d6c:	08004924 	.word	0x08004924
 8000d70:	200000e0 	.word	0x200000e0
 8000d74:	20000124 	.word	0x20000124

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc2:	2007      	movs	r0, #7
 8000dc4:	f000 fa86 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_I2C_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12c      	bne.n	8000e50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e18:	2312      	movs	r3, #18
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e24:	2304      	movs	r3, #4
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <HAL_I2C_MspInit+0x8c>)
 8000e30:	f000 fb24 	bl	800147c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e42:	6413      	str	r3, [r2, #64]	; 0x40
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_UART_MspInit+0x94>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d133      	bne.n	8000eee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_UART_MspInit+0x98>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <HAL_UART_MspInit+0x9c>)
 8000eda:	f000 facf 	bl	800147c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2026      	movs	r0, #38	; 0x26
 8000ee4:	f000 fa01 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ee8:	2026      	movs	r0, #38	; 0x26
 8000eea:	f000 fa1a 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 f8d0 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <USART2_IRQHandler+0x10>)
 8000f5e:	f002 f8ad 	bl	80030bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000e0 	.word	0x200000e0

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f002 fff6 	bl	8003f8c <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20020000 	.word	0x20020000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	20000528 	.word	0x20000528
 8000fd4:	20000540 	.word	0x20000540

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f002 ffb5 	bl	8003f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fcbf 	bl	80009b0 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001040:	080049e4 	.word	0x080049e4
  ldr r2, =_sbss
 8001044:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001048:	20000540 	.word	0x20000540

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f92b 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe7e 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f943 	bl	800133e <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f90b 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	2000052c 	.word	0x2000052c

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000052c 	.word	0x2000052c

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff3e 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff31 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa2 	bl	8001290 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff feda 	bl	800111c <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d008      	beq.n	8001388 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e052      	b.n	800142e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0216 	bic.w	r2, r2, #22
 8001396:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <HAL_DMA_Abort+0x62>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0208 	bic.w	r2, r2, #8
 80013c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d8:	e013      	b.n	8001402 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013da:	f7ff fe9f 	bl	800111c <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d90c      	bls.n	8001402 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2220      	movs	r2, #32
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e015      	b.n	800142e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e4      	bne.n	80013da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	223f      	movs	r2, #63	; 0x3f
 8001416:	409a      	lsls	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d004      	beq.n	8001454 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e00c      	b.n	800146e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2205      	movs	r2, #5
 8001458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e165      	b.n	8001764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8154 	bne.w	800175e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d005      	beq.n	80014ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d130      	bne.n	8001530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 0201 	and.w	r2, r3, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b03      	cmp	r3, #3
 800153a:	d017      	beq.n	800156c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d123      	bne.n	80015c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	69b9      	ldr	r1, [r7, #24]
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80ae 	beq.w	800175e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_GPIO_Init+0x300>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a5c      	ldr	r2, [pc, #368]	; (800177c <HAL_GPIO_Init+0x300>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_GPIO_Init+0x300>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_GPIO_Init+0x304>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4f      	ldr	r2, [pc, #316]	; (8001784 <HAL_GPIO_Init+0x308>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d025      	beq.n	8001696 <HAL_GPIO_Init+0x21a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4e      	ldr	r2, [pc, #312]	; (8001788 <HAL_GPIO_Init+0x30c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01f      	beq.n	8001692 <HAL_GPIO_Init+0x216>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4d      	ldr	r2, [pc, #308]	; (800178c <HAL_GPIO_Init+0x310>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x212>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4c      	ldr	r2, [pc, #304]	; (8001790 <HAL_GPIO_Init+0x314>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x20e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <HAL_GPIO_Init+0x318>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x20a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x31c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x206>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a49      	ldr	r2, [pc, #292]	; (800179c <HAL_GPIO_Init+0x320>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x202>
 800167a:	2306      	movs	r3, #6
 800167c:	e00c      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800167e:	2307      	movs	r3, #7
 8001680:	e00a      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001682:	2305      	movs	r3, #5
 8001684:	e008      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001686:	2304      	movs	r3, #4
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800168a:	2303      	movs	r3, #3
 800168c:	e004      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001696:	2300      	movs	r3, #0
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f002 0203 	and.w	r2, r2, #3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4093      	lsls	r3, r2
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a8:	4935      	ldr	r1, [pc, #212]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016da:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	f67f ae96 	bls.w	8001498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40013800 	.word	0x40013800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020800 	.word	0x40020800
 8001790:	40020c00 	.word	0x40020c00
 8001794:	40021000 	.word	0x40021000
 8001798:	40021400 	.word	0x40021400
 800179c:	40021800 	.word	0x40021800
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e12b      	b.n	8001a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fae8 	bl	8000dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2224      	movs	r2, #36	; 0x24
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800182a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800183a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800183c:	f000 fe38 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8001840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a81      	ldr	r2, [pc, #516]	; (8001a4c <HAL_I2C_Init+0x274>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d807      	bhi.n	800185c <HAL_I2C_Init+0x84>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a80      	ldr	r2, [pc, #512]	; (8001a50 <HAL_I2C_Init+0x278>)
 8001850:	4293      	cmp	r3, r2
 8001852:	bf94      	ite	ls
 8001854:	2301      	movls	r3, #1
 8001856:	2300      	movhi	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e006      	b.n	800186a <HAL_I2C_Init+0x92>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <HAL_I2C_Init+0x27c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	bf94      	ite	ls
 8001864:	2301      	movls	r3, #1
 8001866:	2300      	movhi	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e0e7      	b.n	8001a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a78      	ldr	r2, [pc, #480]	; (8001a58 <HAL_I2C_Init+0x280>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9b      	lsrs	r3, r3, #18
 800187c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a6a      	ldr	r2, [pc, #424]	; (8001a4c <HAL_I2C_Init+0x274>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d802      	bhi.n	80018ac <HAL_I2C_Init+0xd4>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3301      	adds	r3, #1
 80018aa:	e009      	b.n	80018c0 <HAL_I2C_Init+0xe8>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_I2C_Init+0x284>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	3301      	adds	r3, #1
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	495c      	ldr	r1, [pc, #368]	; (8001a4c <HAL_I2C_Init+0x274>)
 80018dc:	428b      	cmp	r3, r1
 80018de:	d819      	bhi.n	8001914 <HAL_I2C_Init+0x13c>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1e59      	subs	r1, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018f4:	400b      	ands	r3, r1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <HAL_I2C_Init+0x138>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1e59      	subs	r1, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fbb1 f3f3 	udiv	r3, r1, r3
 8001908:	3301      	adds	r3, #1
 800190a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190e:	e051      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001910:	2304      	movs	r3, #4
 8001912:	e04f      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d111      	bne.n	8001940 <HAL_I2C_Init+0x168>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	e012      	b.n	8001966 <HAL_I2C_Init+0x18e>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e58      	subs	r0, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	0099      	lsls	r1, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	fbb0 f3f3 	udiv	r3, r0, r3
 8001956:	3301      	adds	r3, #1
 8001958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Init+0x196>
 800196a:	2301      	movs	r3, #1
 800196c:	e022      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10e      	bne.n	8001994 <HAL_I2C_Init+0x1bc>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e58      	subs	r0, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	440b      	add	r3, r1
 8001984:	fbb0 f3f3 	udiv	r3, r0, r3
 8001988:	3301      	adds	r3, #1
 800198a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001992:	e00f      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1e58      	subs	r0, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	0099      	lsls	r1, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	6809      	ldr	r1, [r1, #0]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69da      	ldr	r2, [r3, #28]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6911      	ldr	r1, [r2, #16]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68d2      	ldr	r2, [r2, #12]
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	000186a0 	.word	0x000186a0
 8001a50:	001e847f 	.word	0x001e847f
 8001a54:	003d08ff 	.word	0x003d08ff
 8001a58:	431bde83 	.word	0x431bde83
 8001a5c:	10624dd3 	.word	0x10624dd3

08001a60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	817b      	strh	r3, [r7, #10]
 8001a70:	4613      	mov	r3, r2
 8001a72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff fb52 	bl	800111c <HAL_GetTick>
 8001a78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	f040 80e0 	bne.w	8001c48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2319      	movs	r3, #25
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4970      	ldr	r1, [pc, #448]	; (8001c54 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fa92 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e0d3      	b.n	8001c4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_I2C_Master_Transmit+0x50>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0cc      	b.n	8001c4a <HAL_I2C_Master_Transmit+0x1ea>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d007      	beq.n	8001ad6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2221      	movs	r2, #33	; 0x21
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2210      	movs	r2, #16
 8001af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	893a      	ldrh	r2, [r7, #8]
 8001b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4a50      	ldr	r2, [pc, #320]	; (8001c58 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b18:	8979      	ldrh	r1, [r7, #10]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f9ca 	bl	8001eb8 <I2C_MasterRequestWrite>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e08d      	b.n	8001c4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b44:	e066      	b.n	8001c14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6a39      	ldr	r1, [r7, #32]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fb0c 	bl	8002168 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_I2C_Master_Transmit+0x188>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	6a39      	ldr	r1, [r7, #32]
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fafc 	bl	80021ea <I2C_WaitOnBTFFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00d      	beq.n	8001c14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d107      	bne.n	8001c10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e01a      	b.n	8001c4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d194      	bne.n	8001b46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fa56 	bl	800111c <HAL_GetTick>
 8001c70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	f040 8111 	bne.w	8001ea6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2319      	movs	r3, #25
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4988      	ldr	r1, [pc, #544]	; (8001eb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f994 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e104      	b.n	8001ea8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_I2C_IsDeviceReady+0x50>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0fd      	b.n	8001ea8 <HAL_I2C_IsDeviceReady+0x24c>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d007      	beq.n	8001cd2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2224      	movs	r2, #36	; 0x24
 8001ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a70      	ldr	r2, [pc, #448]	; (8001eb4 <HAL_I2C_IsDeviceReady+0x258>)
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f952 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00d      	beq.n	8001d3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2c:	d103      	bne.n	8001d36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0b6      	b.n	8001ea8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d3a:	897b      	ldrh	r3, [r7, #10]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f9e7 	bl	800111c <HAL_GetTick>
 8001d4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d74:	bf0c      	ite	eq
 8001d76:	2301      	moveq	r3, #1
 8001d78:	2300      	movne	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d7e:	e025      	b.n	8001dcc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d80:	f7ff f9cc 	bl	800111c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d302      	bcc.n	8001d96 <HAL_I2C_IsDeviceReady+0x13a>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	22a0      	movs	r2, #160	; 0xa0
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2ba0      	cmp	r3, #160	; 0xa0
 8001dd6:	d005      	beq.n	8001de4 <HAL_I2C_IsDeviceReady+0x188>
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_I2C_IsDeviceReady+0x188>
 8001dde:	7dbb      	ldrb	r3, [r7, #22]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0cd      	beq.n	8001d80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d129      	bne.n	8001e4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2319      	movs	r3, #25
 8001e26:	2201      	movs	r2, #1
 8001e28:	4921      	ldr	r1, [pc, #132]	; (8001eb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f8c6 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e036      	b.n	8001ea8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e02c      	b.n	8001ea8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2319      	movs	r3, #25
 8001e6e:	2201      	movs	r2, #1
 8001e70:	490f      	ldr	r1, [pc, #60]	; (8001eb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f8a2 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e012      	b.n	8001ea8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	3301      	adds	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f4ff af32 	bcc.w	8001cf6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
  }
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	00100002 	.word	0x00100002
 8001eb4:	ffff0000 	.word	0xffff0000

08001eb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d006      	beq.n	8001ee2 <I2C_MasterRequestWrite+0x2a>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d003      	beq.n	8001ee2 <I2C_MasterRequestWrite+0x2a>
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ee0:	d108      	bne.n	8001ef4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e00b      	b.n	8001f0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	2b12      	cmp	r3, #18
 8001efa:	d107      	bne.n	8001f0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f84f 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f32:	d103      	bne.n	8001f3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e035      	b.n	8001fac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f48:	d108      	bne.n	8001f5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f4a:	897b      	ldrh	r3, [r7, #10]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	e01b      	b.n	8001f94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f5c:	897b      	ldrh	r3, [r7, #10]
 8001f5e:	11db      	asrs	r3, r3, #7
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f003 0306 	and.w	r3, r3, #6
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f063 030f 	orn	r3, r3, #15
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <I2C_MasterRequestWrite+0xfc>)
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f875 	bl	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e010      	b.n	8001fac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f8a:	897b      	ldrh	r3, [r7, #10]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <I2C_MasterRequestWrite+0x100>)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f865 	bl	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	00010008 	.word	0x00010008
 8001fb8:	00010002 	.word	0x00010002

08001fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fcc:	e025      	b.n	800201a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d021      	beq.n	800201a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7ff f8a1 	bl	800111c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d116      	bne.n	800201a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e023      	b.n	8002062 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d10d      	bne.n	8002040 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4013      	ands	r3, r2
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf0c      	ite	eq
 8002036:	2301      	moveq	r3, #1
 8002038:	2300      	movne	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	e00c      	b.n	800205a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4013      	ands	r3, r2
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	429a      	cmp	r2, r3
 800205e:	d0b6      	beq.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002078:	e051      	b.n	800211e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002088:	d123      	bne.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002098:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f043 0204 	orr.w	r2, r3, #4
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e046      	b.n	8002160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d021      	beq.n	800211e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7ff f81f 	bl	800111c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d116      	bne.n	800211e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f043 0220 	orr.w	r2, r3, #32
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e020      	b.n	8002160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d10c      	bne.n	8002142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4013      	ands	r3, r2
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	e00b      	b.n	800215a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	43da      	mvns	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	4013      	ands	r3, r2
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d18d      	bne.n	800207a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002174:	e02d      	b.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f878 	bl	800226c <I2C_IsAcknowledgeFailed>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e02d      	b.n	80021e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d021      	beq.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218e:	f7fe ffc5 	bl	800111c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d116      	bne.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e007      	b.n	80021e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021dc:	2b80      	cmp	r3, #128	; 0x80
 80021de:	d1ca      	bne.n	8002176 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f6:	e02d      	b.n	8002254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f837 	bl	800226c <I2C_IsAcknowledgeFailed>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e02d      	b.n	8002264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d021      	beq.n	8002254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002210:	f7fe ff84 	bl	800111c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	429a      	cmp	r2, r3
 800221e:	d302      	bcc.n	8002226 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d116      	bne.n	8002254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e007      	b.n	8002264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b04      	cmp	r3, #4
 8002260:	d1ca      	bne.n	80021f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d11b      	bne.n	80022bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800228c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f043 0204 	orr.w	r2, r3, #4
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0cc      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b68      	ldr	r3, [pc, #416]	; (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d90c      	bls.n	8002308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b65      	ldr	r3, [pc, #404]	; (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0b8      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002320:	4b59      	ldr	r3, [pc, #356]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800232a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	494d      	ldr	r1, [pc, #308]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d044      	beq.n	80023ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d119      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e07f      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d003      	beq.n	800238a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002386:	2b03      	cmp	r3, #3
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e06f      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e067      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4934      	ldr	r1, [pc, #208]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7fe feae 	bl	800111c <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	e00a      	b.n	80023da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7fe feaa 	bl	800111c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e04f      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 020c 	and.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1eb      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d20c      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e032      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4916      	ldr	r1, [pc, #88]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	490e      	ldr	r1, [pc, #56]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002452:	f000 f855 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002456:	4602      	mov	r2, r0
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	490a      	ldr	r1, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	5ccb      	ldrb	r3, [r1, r3]
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fe0e 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023c00 	.word	0x40023c00
 8002488:	40023800 	.word	0x40023800
 800248c:	08004988 	.word	0x08004988
 8002490:	20000000 	.word	0x20000000
 8002494:	20000004 	.word	0x20000004

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCC_GetHCLKFreq+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000000 	.word	0x20000000

080024b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b4:	f7ff fff0 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4903      	ldr	r1, [pc, #12]	; (80024d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	08004998 	.word	0x08004998

080024d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024dc:	f7ff ffdc 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0b5b      	lsrs	r3, r3, #13
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4903      	ldr	r1, [pc, #12]	; (80024fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08004998 	.word	0x08004998

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002504:	b0ae      	sub	sp, #184	; 0xb8
 8002506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002526:	4bcb      	ldr	r3, [pc, #812]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b0c      	cmp	r3, #12
 8002530:	f200 8206 	bhi.w	8002940 <HAL_RCC_GetSysClockFreq+0x440>
 8002534:	a201      	add	r2, pc, #4	; (adr r2, 800253c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253a:	bf00      	nop
 800253c:	08002571 	.word	0x08002571
 8002540:	08002941 	.word	0x08002941
 8002544:	08002941 	.word	0x08002941
 8002548:	08002941 	.word	0x08002941
 800254c:	08002579 	.word	0x08002579
 8002550:	08002941 	.word	0x08002941
 8002554:	08002941 	.word	0x08002941
 8002558:	08002941 	.word	0x08002941
 800255c:	08002581 	.word	0x08002581
 8002560:	08002941 	.word	0x08002941
 8002564:	08002941 	.word	0x08002941
 8002568:	08002941 	.word	0x08002941
 800256c:	08002771 	.word	0x08002771
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4bb9      	ldr	r3, [pc, #740]	; (8002858 <HAL_RCC_GetSysClockFreq+0x358>)
 8002572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002576:	e1e7      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002578:	4bb8      	ldr	r3, [pc, #736]	; (800285c <HAL_RCC_GetSysClockFreq+0x35c>)
 800257a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800257e:	e1e3      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002580:	4bb4      	ldr	r3, [pc, #720]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258c:	4bb1      	ldr	r3, [pc, #708]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d071      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002598:	4bae      	ldr	r3, [pc, #696]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025be:	4622      	mov	r2, r4
 80025c0:	462b      	mov	r3, r5
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	0159      	lsls	r1, r3, #5
 80025cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d0:	0150      	lsls	r0, r2, #5
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4621      	mov	r1, r4
 80025d8:	1a51      	subs	r1, r2, r1
 80025da:	6439      	str	r1, [r7, #64]	; 0x40
 80025dc:	4629      	mov	r1, r5
 80025de:	eb63 0301 	sbc.w	r3, r3, r1
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025f0:	4649      	mov	r1, r9
 80025f2:	018b      	lsls	r3, r1, #6
 80025f4:	4641      	mov	r1, r8
 80025f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025fa:	4641      	mov	r1, r8
 80025fc:	018a      	lsls	r2, r1, #6
 80025fe:	4641      	mov	r1, r8
 8002600:	1a51      	subs	r1, r2, r1
 8002602:	63b9      	str	r1, [r7, #56]	; 0x38
 8002604:	4649      	mov	r1, r9
 8002606:	eb63 0301 	sbc.w	r3, r3, r1
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002618:	4649      	mov	r1, r9
 800261a:	00cb      	lsls	r3, r1, #3
 800261c:	4641      	mov	r1, r8
 800261e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002622:	4641      	mov	r1, r8
 8002624:	00ca      	lsls	r2, r1, #3
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	4603      	mov	r3, r0
 800262c:	4622      	mov	r2, r4
 800262e:	189b      	adds	r3, r3, r2
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
 8002632:	462b      	mov	r3, r5
 8002634:	460a      	mov	r2, r1
 8002636:	eb42 0303 	adc.w	r3, r2, r3
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002648:	4629      	mov	r1, r5
 800264a:	024b      	lsls	r3, r1, #9
 800264c:	4621      	mov	r1, r4
 800264e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002652:	4621      	mov	r1, r4
 8002654:	024a      	lsls	r2, r1, #9
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800265e:	2200      	movs	r2, #0
 8002660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002664:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002668:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800266c:	f7fd fe28 	bl	80002c0 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800267a:	e067      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267c:	4b75      	ldr	r3, [pc, #468]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002688:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800268c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002694:	67bb      	str	r3, [r7, #120]	; 0x78
 8002696:	2300      	movs	r3, #0
 8002698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800269a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800269e:	4622      	mov	r2, r4
 80026a0:	462b      	mov	r3, r5
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	0159      	lsls	r1, r3, #5
 80026ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b0:	0150      	lsls	r0, r2, #5
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4621      	mov	r1, r4
 80026b8:	1a51      	subs	r1, r2, r1
 80026ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80026bc:	4629      	mov	r1, r5
 80026be:	eb63 0301 	sbc.w	r3, r3, r1
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026d0:	4649      	mov	r1, r9
 80026d2:	018b      	lsls	r3, r1, #6
 80026d4:	4641      	mov	r1, r8
 80026d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026da:	4641      	mov	r1, r8
 80026dc:	018a      	lsls	r2, r1, #6
 80026de:	4641      	mov	r1, r8
 80026e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80026e4:	4649      	mov	r1, r9
 80026e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026fe:	4692      	mov	sl, r2
 8002700:	469b      	mov	fp, r3
 8002702:	4623      	mov	r3, r4
 8002704:	eb1a 0303 	adds.w	r3, sl, r3
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	462b      	mov	r3, r5
 800270c:	eb4b 0303 	adc.w	r3, fp, r3
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800271e:	4629      	mov	r1, r5
 8002720:	028b      	lsls	r3, r1, #10
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002728:	4621      	mov	r1, r4
 800272a:	028a      	lsls	r2, r1, #10
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002734:	2200      	movs	r2, #0
 8002736:	673b      	str	r3, [r7, #112]	; 0x70
 8002738:	677a      	str	r2, [r7, #116]	; 0x74
 800273a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800273e:	f7fd fdbf 	bl	80002c0 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4613      	mov	r3, r2
 8002748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800274c:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800275e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800276e:	e0eb      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002770:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d06b      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_RCC_GetSysClockFreq+0x354>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	2200      	movs	r2, #0
 8002790:	66bb      	str	r3, [r7, #104]	; 0x68
 8002792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279a:	663b      	str	r3, [r7, #96]	; 0x60
 800279c:	2300      	movs	r3, #0
 800279e:	667b      	str	r3, [r7, #100]	; 0x64
 80027a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027a4:	4622      	mov	r2, r4
 80027a6:	462b      	mov	r3, r5
 80027a8:	f04f 0000 	mov.w	r0, #0
 80027ac:	f04f 0100 	mov.w	r1, #0
 80027b0:	0159      	lsls	r1, r3, #5
 80027b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b6:	0150      	lsls	r0, r2, #5
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4621      	mov	r1, r4
 80027be:	1a51      	subs	r1, r2, r1
 80027c0:	61b9      	str	r1, [r7, #24]
 80027c2:	4629      	mov	r1, r5
 80027c4:	eb63 0301 	sbc.w	r3, r3, r1
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027d6:	4659      	mov	r1, fp
 80027d8:	018b      	lsls	r3, r1, #6
 80027da:	4651      	mov	r1, sl
 80027dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027e0:	4651      	mov	r1, sl
 80027e2:	018a      	lsls	r2, r1, #6
 80027e4:	4651      	mov	r1, sl
 80027e6:	ebb2 0801 	subs.w	r8, r2, r1
 80027ea:	4659      	mov	r1, fp
 80027ec:	eb63 0901 	sbc.w	r9, r3, r1
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002804:	4690      	mov	r8, r2
 8002806:	4699      	mov	r9, r3
 8002808:	4623      	mov	r3, r4
 800280a:	eb18 0303 	adds.w	r3, r8, r3
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	462b      	mov	r3, r5
 8002812:	eb49 0303 	adc.w	r3, r9, r3
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002824:	4629      	mov	r1, r5
 8002826:	024b      	lsls	r3, r1, #9
 8002828:	4621      	mov	r1, r4
 800282a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800282e:	4621      	mov	r1, r4
 8002830:	024a      	lsls	r2, r1, #9
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800283a:	2200      	movs	r2, #0
 800283c:	65bb      	str	r3, [r7, #88]	; 0x58
 800283e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002844:	f7fd fd3c 	bl	80002c0 <__aeabi_uldivmod>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4613      	mov	r3, r2
 800284e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002852:	e065      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x420>
 8002854:	40023800 	.word	0x40023800
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002860:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_GetSysClockFreq+0x458>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	2200      	movs	r2, #0
 8002868:	4618      	mov	r0, r3
 800286a:	4611      	mov	r1, r2
 800286c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002870:	653b      	str	r3, [r7, #80]	; 0x50
 8002872:	2300      	movs	r3, #0
 8002874:	657b      	str	r3, [r7, #84]	; 0x54
 8002876:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800287a:	4642      	mov	r2, r8
 800287c:	464b      	mov	r3, r9
 800287e:	f04f 0000 	mov.w	r0, #0
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	0159      	lsls	r1, r3, #5
 8002888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288c:	0150      	lsls	r0, r2, #5
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4641      	mov	r1, r8
 8002894:	1a51      	subs	r1, r2, r1
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	4649      	mov	r1, r9
 800289a:	eb63 0301 	sbc.w	r3, r3, r1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028ac:	4659      	mov	r1, fp
 80028ae:	018b      	lsls	r3, r1, #6
 80028b0:	4651      	mov	r1, sl
 80028b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b6:	4651      	mov	r1, sl
 80028b8:	018a      	lsls	r2, r1, #6
 80028ba:	4651      	mov	r1, sl
 80028bc:	1a54      	subs	r4, r2, r1
 80028be:	4659      	mov	r1, fp
 80028c0:	eb63 0501 	sbc.w	r5, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	00eb      	lsls	r3, r5, #3
 80028ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d2:	00e2      	lsls	r2, r4, #3
 80028d4:	4614      	mov	r4, r2
 80028d6:	461d      	mov	r5, r3
 80028d8:	4643      	mov	r3, r8
 80028da:	18e3      	adds	r3, r4, r3
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	464b      	mov	r3, r9
 80028e0:	eb45 0303 	adc.w	r3, r5, r3
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028f2:	4629      	mov	r1, r5
 80028f4:	028b      	lsls	r3, r1, #10
 80028f6:	4621      	mov	r1, r4
 80028f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028fc:	4621      	mov	r1, r4
 80028fe:	028a      	lsls	r2, r1, #10
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002908:	2200      	movs	r2, #0
 800290a:	64bb      	str	r3, [r7, #72]	; 0x48
 800290c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800290e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002912:	f7fd fcd5 	bl	80002c0 <__aeabi_uldivmod>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4613      	mov	r3, r2
 800291c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_RCC_GetSysClockFreq+0x458>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	0f1b      	lsrs	r3, r3, #28
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800292e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800293e:	e003      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800294c:	4618      	mov	r0, r3
 800294e:	37b8      	adds	r7, #184	; 0xb8
 8002950:	46bd      	mov	sp, r7
 8002952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	00f42400 	.word	0x00f42400

08002960 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e28d      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8083 	beq.w	8002a86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002980:	4b94      	ldr	r3, [pc, #592]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	d019      	beq.n	80029c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800298c:	4b91      	ldr	r3, [pc, #580]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002994:	2b08      	cmp	r3, #8
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002998:	4b8e      	ldr	r3, [pc, #568]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a4:	d00c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a6:	4b8b      	ldr	r3, [pc, #556]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d112      	bne.n	80029d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029be:	d10b      	bne.n	80029d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	4b84      	ldr	r3, [pc, #528]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05b      	beq.n	8002a84 <HAL_RCC_OscConfig+0x124>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d157      	bne.n	8002a84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e25a      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_OscConfig+0x90>
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7b      	ldr	r2, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xcc>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0xb4>
 80029fa:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a75      	ldr	r2, [pc, #468]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a72      	ldr	r2, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xcc>
 8002a14:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6e      	ldr	r2, [pc, #440]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b6c      	ldr	r3, [pc, #432]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6b      	ldr	r2, [pc, #428]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fb72 	bl	800111c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fb6e 	bl	800111c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e21f      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xdc>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fb5e 	bl	800111c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe fb5a 	bl	800111c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e20b      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x104>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d06f      	beq.n	8002b72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a92:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d017      	beq.n	8002ace <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a9e:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d105      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aaa:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d11c      	bne.n	8002afc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac2:	4b44      	ldr	r3, [pc, #272]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x186>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1d3      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4937      	ldr	r1, [pc, #220]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	e03a      	b.n	8002b72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b04:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <HAL_RCC_OscConfig+0x278>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fb07 	bl	800111c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fe fb03 	bl	800111c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e1b4      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4925      	ldr	r1, [pc, #148]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
 8002b44:	e015      	b.n	8002b72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_OscConfig+0x278>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fae6 	bl	800111c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe fae2 	bl	800111c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e193      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d036      	beq.n	8002bec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_RCC_OscConfig+0x27c>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fac6 	bl	800111c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fe fac2 	bl	800111c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e173      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x234>
 8002bb2:	e01b      	b.n	8002bec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_OscConfig+0x27c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe faaf 	bl	800111c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	e00e      	b.n	8002be0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe faab 	bl	800111c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d907      	bls.n	8002be0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e15c      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	42470000 	.word	0x42470000
 8002bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b8a      	ldr	r3, [pc, #552]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ea      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8097 	beq.w	8002d28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b83      	ldr	r3, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a7e      	ldr	r2, [pc, #504]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x4b0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d118      	bne.n	8002c68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x4b0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x4b0>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fa6b 	bl	800111c <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7fe fa67 	bl	800111c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e118      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <HAL_RCC_OscConfig+0x4b0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x31e>
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x358>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x340>
 8002c86:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a60      	ldr	r2, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a5d      	ldr	r2, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x358>
 8002ca0:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a59      	ldr	r2, [pc, #356]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fa2c 	bl	800111c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fa28 	bl	800111c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0d7      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cde:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ee      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x368>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe fa16 	bl	800111c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fa12 	bl	800111c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0c1      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0a:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ee      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80ad 	beq.w	8002e8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d060      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d145      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCC_OscConfig+0x4b4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f9e6 	bl	800111c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe f9e2 	bl	800111c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e093      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	019b      	lsls	r3, r3, #6
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	071b      	lsls	r3, r3, #28
 8002d9e:	491b      	ldr	r1, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x4b4>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe f9b7 	bl	800111c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe f9b3 	bl	800111c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e064      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x452>
 8002dd0:	e05c      	b.n	8002e8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_RCC_OscConfig+0x4b4>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f9a0 	bl	800111c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f99c 	bl	800111c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e04d      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x480>
 8002dfe:	e045      	b.n	8002e8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e040      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40007000 	.word	0x40007000
 8002e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_RCC_OscConfig+0x538>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d030      	beq.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d129      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d122      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d119      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	3b01      	subs	r3, #1
 8002e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10f      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e03f      	b.n	8002f2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd ffce 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	; 0x24
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fddf 	bl	8003aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b08a      	sub	sp, #40	; 0x28
 8002f3a:	af02      	add	r7, sp, #8
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d17c      	bne.n	8003050 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_UART_Transmit+0x2c>
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e075      	b.n	8003052 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_UART_Transmit+0x3e>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e06e      	b.n	8003052 <HAL_UART_Transmit+0x11c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	; 0x21
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f8a:	f7fe f8c7 	bl	800111c <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_UART_Transmit+0x82>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e003      	b.n	8002fc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fc8:	e02a      	b.n	8003020 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fb1f 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e036      	b.n	8003052 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e007      	b.n	8003012 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3301      	adds	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1cf      	bne.n	8002fca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	2140      	movs	r1, #64	; 0x40
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 faef 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e006      	b.n	8003052 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b20      	cmp	r3, #32
 8003072:	d11d      	bne.n	80030b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Receive_IT+0x26>
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e016      	b.n	80030b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Receive_IT+0x38>
 800308e:	2302      	movs	r3, #2
 8003090:	e00f      	b.n	80030b2 <HAL_UART_Receive_IT+0x58>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fb24 	bl	80036f4 <UART_Start_Receive_IT>
 80030ac:	4603      	mov	r3, r0
 80030ae:	e000      	b.n	80030b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
  }
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b0ba      	sub	sp, #232	; 0xe8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10f      	bne.n	8003122 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_UART_IRQHandler+0x66>
 800310e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fc07 	bl	800392e <UART_Receive_IT>
      return;
 8003120:	e256      	b.n	80035d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80de 	beq.w	80032e8 <HAL_UART_IRQHandler+0x22c>
 800312c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80d1 	beq.w	80032e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_UART_IRQHandler+0xae>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <HAL_UART_IRQHandler+0xd2>
 8003176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0202 	orr.w	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800318e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_UART_IRQHandler+0xf6>
 800319a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d011      	beq.n	80031e2 <HAL_UART_IRQHandler+0x126>
 80031be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f043 0208 	orr.w	r2, r3, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 81ed 	beq.w	80035c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_UART_IRQHandler+0x14e>
 80031f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fb92 	bl	800392e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <HAL_UART_IRQHandler+0x17a>
 800322e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d04f      	beq.n	80032d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa9a 	bl	8003770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d141      	bne.n	80032ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3314      	adds	r3, #20
 8003272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003276:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800327a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800328e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1d9      	bne.n	800324a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	2b00      	cmp	r3, #0
 800329c:	d013      	beq.n	80032c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4a7d      	ldr	r2, [pc, #500]	; (8003498 <HAL_UART_IRQHandler+0x3dc>)
 80032a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe f8c3 	bl	8001436 <HAL_DMA_Abort_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032c0:	4610      	mov	r0, r2
 80032c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	e00e      	b.n	80032e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f990 	bl	80035ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	e00a      	b.n	80032e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f98c 	bl	80035ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	e006      	b.n	80032e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f988 	bl	80035ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032e2:	e170      	b.n	80035c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	bf00      	nop
    return;
 80032e6:	e16e      	b.n	80035c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	f040 814a 	bne.w	8003586 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8143 	beq.w	8003586 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 813c 	beq.w	8003586 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	f040 80b4 	bne.w	800349c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003340:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8140 	beq.w	80035ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800334e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003352:	429a      	cmp	r2, r3
 8003354:	f080 8139 	bcs.w	80035ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800335e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336a:	f000 8088 	beq.w	800347e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800338c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800339a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800339e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1d9      	bne.n	800336e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3314      	adds	r3, #20
 80033da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e1      	bne.n	80033ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3314      	adds	r3, #20
 80033fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800341a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800341c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e3      	bne.n	80033f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003446:	e853 3f00 	ldrex	r3, [r3]
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800344c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344e:	f023 0310 	bic.w	r3, r3, #16
 8003452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003460:	65ba      	str	r2, [r7, #88]	; 0x58
 8003462:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800346e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e3      	bne.n	800343c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd ff6c 	bl	8001356 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003486:	b29b      	uxth	r3, r3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f8b6 	bl	8003600 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003494:	e099      	b.n	80035ca <HAL_UART_IRQHandler+0x50e>
 8003496:	bf00      	nop
 8003498:	08003837 	.word	0x08003837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 808b 	beq.w	80035ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8086 	beq.w	80035ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034e6:	647a      	str	r2, [r7, #68]	; 0x44
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e3      	bne.n	80034c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	623b      	str	r3, [r7, #32]
   return(result);
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800351e:	633a      	str	r2, [r7, #48]	; 0x30
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e3      	bne.n	80034fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0310 	bic.w	r3, r3, #16
 8003556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003564:	61fa      	str	r2, [r7, #28]
 8003566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	69b9      	ldr	r1, [r7, #24]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	617b      	str	r3, [r7, #20]
   return(result);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e3      	bne.n	8003540 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f83e 	bl	8003600 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003584:	e023      	b.n	80035ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_UART_IRQHandler+0x4ea>
 8003592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f95d 	bl	800385e <UART_Transmit_IT>
    return;
 80035a4:	e014      	b.n	80035d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <HAL_UART_IRQHandler+0x514>
 80035b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f99d 	bl	80038fe <UART_EndTransmit_IT>
    return;
 80035c4:	e004      	b.n	80035d0 <HAL_UART_IRQHandler+0x514>
    return;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <HAL_UART_IRQHandler+0x514>
      return;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_UART_IRQHandler+0x514>
      return;
 80035ce:	bf00      	nop
  }
}
 80035d0:	37e8      	adds	r7, #232	; 0xe8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop

080035d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b090      	sub	sp, #64	; 0x40
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003628:	e050      	b.n	80036cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d04c      	beq.n	80036cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <UART_WaitOnFlagUntilTimeout+0x30>
 8003638:	f7fd fd70 	bl	800111c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003644:	429a      	cmp	r2, r3
 8003646:	d241      	bcs.n	80036cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003668:	637a      	str	r2, [r7, #52]	; 0x34
 800366a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800366e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e5      	bne.n	8003648 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3314      	adds	r3, #20
 8003682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	613b      	str	r3, [r7, #16]
   return(result);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3314      	adds	r3, #20
 800369a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800369c:	623a      	str	r2, [r7, #32]
 800369e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	69f9      	ldr	r1, [r7, #28]
 80036a2:	6a3a      	ldr	r2, [r7, #32]
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e5      	bne.n	800367c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e00f      	b.n	80036ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4013      	ands	r3, r2
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d09f      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3740      	adds	r7, #64	; 0x40
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2222      	movs	r2, #34	; 0x22
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003740:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0220 	orr.w	r2, r2, #32
 8003760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b095      	sub	sp, #84	; 0x54
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003798:	643a      	str	r2, [r7, #64]	; 0x40
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800379e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e5      	bne.n	8003778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3314      	adds	r3, #20
 80037b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3314      	adds	r3, #20
 80037ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d119      	bne.n	800381c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f023 0310 	bic.w	r3, r3, #16
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003808:	61ba      	str	r2, [r7, #24]
 800380a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	613b      	str	r3, [r7, #16]
   return(result);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e5      	bne.n	80037e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
}
 800382a:	bf00      	nop
 800382c:	3754      	adds	r7, #84	; 0x54
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff fecb 	bl	80035ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b21      	cmp	r3, #33	; 0x21
 8003870:	d13e      	bne.n	80038f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387a:	d114      	bne.n	80038a6 <UART_Transmit_IT+0x48>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d110      	bne.n	80038a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	1c9a      	adds	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	621a      	str	r2, [r3, #32]
 80038a4:	e008      	b.n	80038b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	1c59      	adds	r1, r3, #1
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6211      	str	r1, [r2, #32]
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4619      	mov	r1, r3
 80038c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fe5a 	bl	80035d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b08c      	sub	sp, #48	; 0x30
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b22      	cmp	r3, #34	; 0x22
 8003940:	f040 80ab 	bne.w	8003a9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394c:	d117      	bne.n	800397e <UART_Receive_IT+0x50>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d113      	bne.n	800397e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	b29b      	uxth	r3, r3
 8003968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396c:	b29a      	uxth	r2, r3
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	1c9a      	adds	r2, r3, #2
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
 800397c:	e026      	b.n	80039cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d007      	beq.n	80039a2 <UART_Receive_IT+0x74>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <UART_Receive_IT+0x82>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e008      	b.n	80039c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4619      	mov	r1, r3
 80039da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d15a      	bne.n	8003a96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0220 	bic.w	r2, r2, #32
 80039ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d135      	bne.n	8003a8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	613b      	str	r3, [r7, #16]
   return(result);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f023 0310 	bic.w	r3, r3, #16
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	623a      	str	r2, [r7, #32]
 8003a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	69f9      	ldr	r1, [r7, #28]
 8003a4c:	6a3a      	ldr	r2, [r7, #32]
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e5      	bne.n	8003a26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d10a      	bne.n	8003a7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a82:	4619      	mov	r1, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fdbb 	bl	8003600 <HAL_UARTEx_RxEventCallback>
 8003a8a:	e002      	b.n	8003a92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7fd f919 	bl	8000cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e002      	b.n	8003a9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3730      	adds	r7, #48	; 0x30
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b0c0      	sub	sp, #256	; 0x100
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	ea40 0301 	orr.w	r3, r0, r1
 8003acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003afc:	f021 010c 	bic.w	r1, r1, #12
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1e:	6999      	ldr	r1, [r3, #24]
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	ea40 0301 	orr.w	r3, r0, r1
 8003b2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b8f      	ldr	r3, [pc, #572]	; (8003d70 <UART_SetConfig+0x2cc>)
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d005      	beq.n	8003b44 <UART_SetConfig+0xa0>
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b8d      	ldr	r3, [pc, #564]	; (8003d74 <UART_SetConfig+0x2d0>)
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d104      	bne.n	8003b4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7fe fcc8 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8003b48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b4c:	e003      	b.n	8003b56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b4e:	f7fe fcaf 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8003b52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b60:	f040 810c 	bne.w	8003d7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b76:	4622      	mov	r2, r4
 8003b78:	462b      	mov	r3, r5
 8003b7a:	1891      	adds	r1, r2, r2
 8003b7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b7e:	415b      	adcs	r3, r3
 8003b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b86:	4621      	mov	r1, r4
 8003b88:	eb12 0801 	adds.w	r8, r2, r1
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	eb43 0901 	adc.w	r9, r3, r1
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ba6:	4690      	mov	r8, r2
 8003ba8:	4699      	mov	r9, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	eb18 0303 	adds.w	r3, r8, r3
 8003bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bb4:	462b      	mov	r3, r5
 8003bb6:	eb49 0303 	adc.w	r3, r9, r3
 8003bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	18db      	adds	r3, r3, r3
 8003bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bd8:	4613      	mov	r3, r2
 8003bda:	eb42 0303 	adc.w	r3, r2, r3
 8003bde:	657b      	str	r3, [r7, #84]	; 0x54
 8003be0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003be4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003be8:	f7fc fb6a 	bl	80002c0 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	011c      	lsls	r4, r3, #4
 8003bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	1891      	adds	r1, r2, r2
 8003c12:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c14:	415b      	adcs	r3, r3
 8003c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c22:	4649      	mov	r1, r9
 8003c24:	eb43 0b01 	adc.w	fp, r3, r1
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3c:	4692      	mov	sl, r2
 8003c3e:	469b      	mov	fp, r3
 8003c40:	4643      	mov	r3, r8
 8003c42:	eb1a 0303 	adds.w	r3, sl, r3
 8003c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	18db      	adds	r3, r3, r3
 8003c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c6e:	4613      	mov	r3, r2
 8003c70:	eb42 0303 	adc.w	r3, r2, r3
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
 8003c76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c7e:	f7fc fb1f 	bl	80002c0 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2264      	movs	r2, #100	; 0x64
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	1acb      	subs	r3, r1, r3
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cac:	441c      	add	r4, r3
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	1891      	adds	r1, r2, r2
 8003cc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ccc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	1851      	adds	r1, r2, r1
 8003cd4:	6339      	str	r1, [r7, #48]	; 0x30
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ce8:	4659      	mov	r1, fp
 8003cea:	00cb      	lsls	r3, r1, #3
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	00ca      	lsls	r2, r1, #3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d04:	464b      	mov	r3, r9
 8003d06:	460a      	mov	r2, r1
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d24:	460b      	mov	r3, r1
 8003d26:	18db      	adds	r3, r3, r3
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	eb42 0303 	adc.w	r3, r2, r3
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d3a:	f7fc fac1 	bl	80002c0 <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003d44:	fba3 1302 	umull	r1, r3, r3, r2
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	2164      	movs	r1, #100	; 0x64
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	3332      	adds	r3, #50	; 0x32
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	f003 0207 	and.w	r2, r3, #7
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4422      	add	r2, r4
 8003d6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d6c:	e105      	b.n	8003f7a <UART_SetConfig+0x4d6>
 8003d6e:	bf00      	nop
 8003d70:	40011000 	.word	0x40011000
 8003d74:	40011400 	.word	0x40011400
 8003d78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d8e:	4642      	mov	r2, r8
 8003d90:	464b      	mov	r3, r9
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	6239      	str	r1, [r7, #32]
 8003d96:	415b      	adcs	r3, r3
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d9e:	4641      	mov	r1, r8
 8003da0:	1854      	adds	r4, r2, r1
 8003da2:	4649      	mov	r1, r9
 8003da4:	eb43 0501 	adc.w	r5, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	00eb      	lsls	r3, r5, #3
 8003db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db6:	00e2      	lsls	r2, r4, #3
 8003db8:	4614      	mov	r4, r2
 8003dba:	461d      	mov	r5, r3
 8003dbc:	4643      	mov	r3, r8
 8003dbe:	18e3      	adds	r3, r4, r3
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	eb45 0303 	adc.w	r3, r5, r3
 8003dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dea:	4629      	mov	r1, r5
 8003dec:	008b      	lsls	r3, r1, #2
 8003dee:	4621      	mov	r1, r4
 8003df0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df4:	4621      	mov	r1, r4
 8003df6:	008a      	lsls	r2, r1, #2
 8003df8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dfc:	f7fc fa60 	bl	80002c0 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4b60      	ldr	r3, [pc, #384]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003e06:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	011c      	lsls	r4, r3, #4
 8003e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	1891      	adds	r1, r2, r2
 8003e26:	61b9      	str	r1, [r7, #24]
 8003e28:	415b      	adcs	r3, r3
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e30:	4641      	mov	r1, r8
 8003e32:	1851      	adds	r1, r2, r1
 8003e34:	6139      	str	r1, [r7, #16]
 8003e36:	4649      	mov	r1, r9
 8003e38:	414b      	adcs	r3, r1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e48:	4659      	mov	r1, fp
 8003e4a:	00cb      	lsls	r3, r1, #3
 8003e4c:	4651      	mov	r1, sl
 8003e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e52:	4651      	mov	r1, sl
 8003e54:	00ca      	lsls	r2, r1, #3
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e64:	464b      	mov	r3, r9
 8003e66:	460a      	mov	r2, r1
 8003e68:	eb42 0303 	adc.w	r3, r2, r3
 8003e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e88:	4649      	mov	r1, r9
 8003e8a:	008b      	lsls	r3, r1, #2
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e92:	4641      	mov	r1, r8
 8003e94:	008a      	lsls	r2, r1, #2
 8003e96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e9a:	f7fc fa11 	bl	80002c0 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	2164      	movs	r1, #100	; 0x64
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	3332      	adds	r3, #50	; 0x32
 8003eb6:	4a34      	ldr	r2, [pc, #208]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec2:	441c      	add	r4, r3
 8003ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec8:	2200      	movs	r2, #0
 8003eca:	673b      	str	r3, [r7, #112]	; 0x70
 8003ecc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ece:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ed2:	4642      	mov	r2, r8
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	1891      	adds	r1, r2, r2
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	415b      	adcs	r3, r3
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	1851      	adds	r1, r2, r1
 8003ee6:	6039      	str	r1, [r7, #0]
 8003ee8:	4649      	mov	r1, r9
 8003eea:	414b      	adcs	r3, r1
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003efa:	4659      	mov	r1, fp
 8003efc:	00cb      	lsls	r3, r1, #3
 8003efe:	4651      	mov	r1, sl
 8003f00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f04:	4651      	mov	r1, sl
 8003f06:	00ca      	lsls	r2, r1, #3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4642      	mov	r2, r8
 8003f10:	189b      	adds	r3, r3, r2
 8003f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f14:	464b      	mov	r3, r9
 8003f16:	460a      	mov	r2, r1
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	663b      	str	r3, [r7, #96]	; 0x60
 8003f28:	667a      	str	r2, [r7, #100]	; 0x64
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f36:	4649      	mov	r1, r9
 8003f38:	008b      	lsls	r3, r1, #2
 8003f3a:	4641      	mov	r1, r8
 8003f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f40:	4641      	mov	r1, r8
 8003f42:	008a      	lsls	r2, r1, #2
 8003f44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f48:	f7fc f9ba 	bl	80002c0 <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003f52:	fba3 1302 	umull	r1, r3, r3, r2
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	2164      	movs	r1, #100	; 0x64
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	3332      	adds	r3, #50	; 0x32
 8003f64:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4422      	add	r2, r4
 8003f78:	609a      	str	r2, [r3, #8]
}
 8003f7a:	bf00      	nop
 8003f7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	51eb851f 	.word	0x51eb851f

08003f8c <__errno>:
 8003f8c:	4b01      	ldr	r3, [pc, #4]	; (8003f94 <__errno+0x8>)
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	2000000c 	.word	0x2000000c

08003f98 <__libc_init_array>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4d0d      	ldr	r5, [pc, #52]	; (8003fd0 <__libc_init_array+0x38>)
 8003f9c:	4c0d      	ldr	r4, [pc, #52]	; (8003fd4 <__libc_init_array+0x3c>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	d109      	bne.n	8003fbc <__libc_init_array+0x24>
 8003fa8:	4d0b      	ldr	r5, [pc, #44]	; (8003fd8 <__libc_init_array+0x40>)
 8003faa:	4c0c      	ldr	r4, [pc, #48]	; (8003fdc <__libc_init_array+0x44>)
 8003fac:	f000 fc8e 	bl	80048cc <_init>
 8003fb0:	1b64      	subs	r4, r4, r5
 8003fb2:	10a4      	asrs	r4, r4, #2
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	42a6      	cmp	r6, r4
 8003fb8:	d105      	bne.n	8003fc6 <__libc_init_array+0x2e>
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc0:	4798      	blx	r3
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7ee      	b.n	8003fa4 <__libc_init_array+0xc>
 8003fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fca:	4798      	blx	r3
 8003fcc:	3601      	adds	r6, #1
 8003fce:	e7f2      	b.n	8003fb6 <__libc_init_array+0x1e>
 8003fd0:	080049dc 	.word	0x080049dc
 8003fd4:	080049dc 	.word	0x080049dc
 8003fd8:	080049dc 	.word	0x080049dc
 8003fdc:	080049e0 	.word	0x080049e0

08003fe0 <memset>:
 8003fe0:	4402      	add	r2, r0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	f803 1b01 	strb.w	r1, [r3], #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <siprintf>:
 8003ff0:	b40e      	push	{r1, r2, r3}
 8003ff2:	b500      	push	{lr}
 8003ff4:	b09c      	sub	sp, #112	; 0x70
 8003ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ff8:	9002      	str	r0, [sp, #8]
 8003ffa:	9006      	str	r0, [sp, #24]
 8003ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004000:	4809      	ldr	r0, [pc, #36]	; (8004028 <siprintf+0x38>)
 8004002:	9107      	str	r1, [sp, #28]
 8004004:	9104      	str	r1, [sp, #16]
 8004006:	4909      	ldr	r1, [pc, #36]	; (800402c <siprintf+0x3c>)
 8004008:	f853 2b04 	ldr.w	r2, [r3], #4
 800400c:	9105      	str	r1, [sp, #20]
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	a902      	add	r1, sp, #8
 8004014:	f000 f868 	bl	80040e8 <_svfiprintf_r>
 8004018:	9b02      	ldr	r3, [sp, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	b01c      	add	sp, #112	; 0x70
 8004020:	f85d eb04 	ldr.w	lr, [sp], #4
 8004024:	b003      	add	sp, #12
 8004026:	4770      	bx	lr
 8004028:	2000000c 	.word	0x2000000c
 800402c:	ffff0208 	.word	0xffff0208

08004030 <__ssputs_r>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	688e      	ldr	r6, [r1, #8]
 8004036:	429e      	cmp	r6, r3
 8004038:	4682      	mov	sl, r0
 800403a:	460c      	mov	r4, r1
 800403c:	4690      	mov	r8, r2
 800403e:	461f      	mov	r7, r3
 8004040:	d838      	bhi.n	80040b4 <__ssputs_r+0x84>
 8004042:	898a      	ldrh	r2, [r1, #12]
 8004044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004048:	d032      	beq.n	80040b0 <__ssputs_r+0x80>
 800404a:	6825      	ldr	r5, [r4, #0]
 800404c:	6909      	ldr	r1, [r1, #16]
 800404e:	eba5 0901 	sub.w	r9, r5, r1
 8004052:	6965      	ldr	r5, [r4, #20]
 8004054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800405c:	3301      	adds	r3, #1
 800405e:	444b      	add	r3, r9
 8004060:	106d      	asrs	r5, r5, #1
 8004062:	429d      	cmp	r5, r3
 8004064:	bf38      	it	cc
 8004066:	461d      	movcc	r5, r3
 8004068:	0553      	lsls	r3, r2, #21
 800406a:	d531      	bpl.n	80040d0 <__ssputs_r+0xa0>
 800406c:	4629      	mov	r1, r5
 800406e:	f000 fb63 	bl	8004738 <_malloc_r>
 8004072:	4606      	mov	r6, r0
 8004074:	b950      	cbnz	r0, 800408c <__ssputs_r+0x5c>
 8004076:	230c      	movs	r3, #12
 8004078:	f8ca 3000 	str.w	r3, [sl]
 800407c:	89a3      	ldrh	r3, [r4, #12]
 800407e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004082:	81a3      	strh	r3, [r4, #12]
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408c:	6921      	ldr	r1, [r4, #16]
 800408e:	464a      	mov	r2, r9
 8004090:	f000 fabe 	bl	8004610 <memcpy>
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800409a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409e:	81a3      	strh	r3, [r4, #12]
 80040a0:	6126      	str	r6, [r4, #16]
 80040a2:	6165      	str	r5, [r4, #20]
 80040a4:	444e      	add	r6, r9
 80040a6:	eba5 0509 	sub.w	r5, r5, r9
 80040aa:	6026      	str	r6, [r4, #0]
 80040ac:	60a5      	str	r5, [r4, #8]
 80040ae:	463e      	mov	r6, r7
 80040b0:	42be      	cmp	r6, r7
 80040b2:	d900      	bls.n	80040b6 <__ssputs_r+0x86>
 80040b4:	463e      	mov	r6, r7
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	4632      	mov	r2, r6
 80040ba:	4641      	mov	r1, r8
 80040bc:	f000 fab6 	bl	800462c <memmove>
 80040c0:	68a3      	ldr	r3, [r4, #8]
 80040c2:	1b9b      	subs	r3, r3, r6
 80040c4:	60a3      	str	r3, [r4, #8]
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	4433      	add	r3, r6
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	2000      	movs	r0, #0
 80040ce:	e7db      	b.n	8004088 <__ssputs_r+0x58>
 80040d0:	462a      	mov	r2, r5
 80040d2:	f000 fba5 	bl	8004820 <_realloc_r>
 80040d6:	4606      	mov	r6, r0
 80040d8:	2800      	cmp	r0, #0
 80040da:	d1e1      	bne.n	80040a0 <__ssputs_r+0x70>
 80040dc:	6921      	ldr	r1, [r4, #16]
 80040de:	4650      	mov	r0, sl
 80040e0:	f000 fabe 	bl	8004660 <_free_r>
 80040e4:	e7c7      	b.n	8004076 <__ssputs_r+0x46>
	...

080040e8 <_svfiprintf_r>:
 80040e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ec:	4698      	mov	r8, r3
 80040ee:	898b      	ldrh	r3, [r1, #12]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	b09d      	sub	sp, #116	; 0x74
 80040f4:	4607      	mov	r7, r0
 80040f6:	460d      	mov	r5, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	d50e      	bpl.n	800411a <_svfiprintf_r+0x32>
 80040fc:	690b      	ldr	r3, [r1, #16]
 80040fe:	b963      	cbnz	r3, 800411a <_svfiprintf_r+0x32>
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	f000 fb19 	bl	8004738 <_malloc_r>
 8004106:	6028      	str	r0, [r5, #0]
 8004108:	6128      	str	r0, [r5, #16]
 800410a:	b920      	cbnz	r0, 8004116 <_svfiprintf_r+0x2e>
 800410c:	230c      	movs	r3, #12
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	e0d1      	b.n	80042ba <_svfiprintf_r+0x1d2>
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	616b      	str	r3, [r5, #20]
 800411a:	2300      	movs	r3, #0
 800411c:	9309      	str	r3, [sp, #36]	; 0x24
 800411e:	2320      	movs	r3, #32
 8004120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004124:	f8cd 800c 	str.w	r8, [sp, #12]
 8004128:	2330      	movs	r3, #48	; 0x30
 800412a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80042d4 <_svfiprintf_r+0x1ec>
 800412e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004132:	f04f 0901 	mov.w	r9, #1
 8004136:	4623      	mov	r3, r4
 8004138:	469a      	mov	sl, r3
 800413a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800413e:	b10a      	cbz	r2, 8004144 <_svfiprintf_r+0x5c>
 8004140:	2a25      	cmp	r2, #37	; 0x25
 8004142:	d1f9      	bne.n	8004138 <_svfiprintf_r+0x50>
 8004144:	ebba 0b04 	subs.w	fp, sl, r4
 8004148:	d00b      	beq.n	8004162 <_svfiprintf_r+0x7a>
 800414a:	465b      	mov	r3, fp
 800414c:	4622      	mov	r2, r4
 800414e:	4629      	mov	r1, r5
 8004150:	4638      	mov	r0, r7
 8004152:	f7ff ff6d 	bl	8004030 <__ssputs_r>
 8004156:	3001      	adds	r0, #1
 8004158:	f000 80aa 	beq.w	80042b0 <_svfiprintf_r+0x1c8>
 800415c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800415e:	445a      	add	r2, fp
 8004160:	9209      	str	r2, [sp, #36]	; 0x24
 8004162:	f89a 3000 	ldrb.w	r3, [sl]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80a2 	beq.w	80042b0 <_svfiprintf_r+0x1c8>
 800416c:	2300      	movs	r3, #0
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004176:	f10a 0a01 	add.w	sl, sl, #1
 800417a:	9304      	str	r3, [sp, #16]
 800417c:	9307      	str	r3, [sp, #28]
 800417e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004182:	931a      	str	r3, [sp, #104]	; 0x68
 8004184:	4654      	mov	r4, sl
 8004186:	2205      	movs	r2, #5
 8004188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418c:	4851      	ldr	r0, [pc, #324]	; (80042d4 <_svfiprintf_r+0x1ec>)
 800418e:	f7fc f847 	bl	8000220 <memchr>
 8004192:	9a04      	ldr	r2, [sp, #16]
 8004194:	b9d8      	cbnz	r0, 80041ce <_svfiprintf_r+0xe6>
 8004196:	06d0      	lsls	r0, r2, #27
 8004198:	bf44      	itt	mi
 800419a:	2320      	movmi	r3, #32
 800419c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041a0:	0711      	lsls	r1, r2, #28
 80041a2:	bf44      	itt	mi
 80041a4:	232b      	movmi	r3, #43	; 0x2b
 80041a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041aa:	f89a 3000 	ldrb.w	r3, [sl]
 80041ae:	2b2a      	cmp	r3, #42	; 0x2a
 80041b0:	d015      	beq.n	80041de <_svfiprintf_r+0xf6>
 80041b2:	9a07      	ldr	r2, [sp, #28]
 80041b4:	4654      	mov	r4, sl
 80041b6:	2000      	movs	r0, #0
 80041b8:	f04f 0c0a 	mov.w	ip, #10
 80041bc:	4621      	mov	r1, r4
 80041be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041c2:	3b30      	subs	r3, #48	; 0x30
 80041c4:	2b09      	cmp	r3, #9
 80041c6:	d94e      	bls.n	8004266 <_svfiprintf_r+0x17e>
 80041c8:	b1b0      	cbz	r0, 80041f8 <_svfiprintf_r+0x110>
 80041ca:	9207      	str	r2, [sp, #28]
 80041cc:	e014      	b.n	80041f8 <_svfiprintf_r+0x110>
 80041ce:	eba0 0308 	sub.w	r3, r0, r8
 80041d2:	fa09 f303 	lsl.w	r3, r9, r3
 80041d6:	4313      	orrs	r3, r2
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	46a2      	mov	sl, r4
 80041dc:	e7d2      	b.n	8004184 <_svfiprintf_r+0x9c>
 80041de:	9b03      	ldr	r3, [sp, #12]
 80041e0:	1d19      	adds	r1, r3, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	9103      	str	r1, [sp, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bfbb      	ittet	lt
 80041ea:	425b      	neglt	r3, r3
 80041ec:	f042 0202 	orrlt.w	r2, r2, #2
 80041f0:	9307      	strge	r3, [sp, #28]
 80041f2:	9307      	strlt	r3, [sp, #28]
 80041f4:	bfb8      	it	lt
 80041f6:	9204      	strlt	r2, [sp, #16]
 80041f8:	7823      	ldrb	r3, [r4, #0]
 80041fa:	2b2e      	cmp	r3, #46	; 0x2e
 80041fc:	d10c      	bne.n	8004218 <_svfiprintf_r+0x130>
 80041fe:	7863      	ldrb	r3, [r4, #1]
 8004200:	2b2a      	cmp	r3, #42	; 0x2a
 8004202:	d135      	bne.n	8004270 <_svfiprintf_r+0x188>
 8004204:	9b03      	ldr	r3, [sp, #12]
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	9203      	str	r2, [sp, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	bfb8      	it	lt
 8004210:	f04f 33ff 	movlt.w	r3, #4294967295
 8004214:	3402      	adds	r4, #2
 8004216:	9305      	str	r3, [sp, #20]
 8004218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042e4 <_svfiprintf_r+0x1fc>
 800421c:	7821      	ldrb	r1, [r4, #0]
 800421e:	2203      	movs	r2, #3
 8004220:	4650      	mov	r0, sl
 8004222:	f7fb fffd 	bl	8000220 <memchr>
 8004226:	b140      	cbz	r0, 800423a <_svfiprintf_r+0x152>
 8004228:	2340      	movs	r3, #64	; 0x40
 800422a:	eba0 000a 	sub.w	r0, r0, sl
 800422e:	fa03 f000 	lsl.w	r0, r3, r0
 8004232:	9b04      	ldr	r3, [sp, #16]
 8004234:	4303      	orrs	r3, r0
 8004236:	3401      	adds	r4, #1
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423e:	4826      	ldr	r0, [pc, #152]	; (80042d8 <_svfiprintf_r+0x1f0>)
 8004240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004244:	2206      	movs	r2, #6
 8004246:	f7fb ffeb 	bl	8000220 <memchr>
 800424a:	2800      	cmp	r0, #0
 800424c:	d038      	beq.n	80042c0 <_svfiprintf_r+0x1d8>
 800424e:	4b23      	ldr	r3, [pc, #140]	; (80042dc <_svfiprintf_r+0x1f4>)
 8004250:	bb1b      	cbnz	r3, 800429a <_svfiprintf_r+0x1b2>
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	3307      	adds	r3, #7
 8004256:	f023 0307 	bic.w	r3, r3, #7
 800425a:	3308      	adds	r3, #8
 800425c:	9303      	str	r3, [sp, #12]
 800425e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004260:	4433      	add	r3, r6
 8004262:	9309      	str	r3, [sp, #36]	; 0x24
 8004264:	e767      	b.n	8004136 <_svfiprintf_r+0x4e>
 8004266:	fb0c 3202 	mla	r2, ip, r2, r3
 800426a:	460c      	mov	r4, r1
 800426c:	2001      	movs	r0, #1
 800426e:	e7a5      	b.n	80041bc <_svfiprintf_r+0xd4>
 8004270:	2300      	movs	r3, #0
 8004272:	3401      	adds	r4, #1
 8004274:	9305      	str	r3, [sp, #20]
 8004276:	4619      	mov	r1, r3
 8004278:	f04f 0c0a 	mov.w	ip, #10
 800427c:	4620      	mov	r0, r4
 800427e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004282:	3a30      	subs	r2, #48	; 0x30
 8004284:	2a09      	cmp	r2, #9
 8004286:	d903      	bls.n	8004290 <_svfiprintf_r+0x1a8>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0c5      	beq.n	8004218 <_svfiprintf_r+0x130>
 800428c:	9105      	str	r1, [sp, #20]
 800428e:	e7c3      	b.n	8004218 <_svfiprintf_r+0x130>
 8004290:	fb0c 2101 	mla	r1, ip, r1, r2
 8004294:	4604      	mov	r4, r0
 8004296:	2301      	movs	r3, #1
 8004298:	e7f0      	b.n	800427c <_svfiprintf_r+0x194>
 800429a:	ab03      	add	r3, sp, #12
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	462a      	mov	r2, r5
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <_svfiprintf_r+0x1f8>)
 80042a2:	a904      	add	r1, sp, #16
 80042a4:	4638      	mov	r0, r7
 80042a6:	f3af 8000 	nop.w
 80042aa:	1c42      	adds	r2, r0, #1
 80042ac:	4606      	mov	r6, r0
 80042ae:	d1d6      	bne.n	800425e <_svfiprintf_r+0x176>
 80042b0:	89ab      	ldrh	r3, [r5, #12]
 80042b2:	065b      	lsls	r3, r3, #25
 80042b4:	f53f af2c 	bmi.w	8004110 <_svfiprintf_r+0x28>
 80042b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ba:	b01d      	add	sp, #116	; 0x74
 80042bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c0:	ab03      	add	r3, sp, #12
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	462a      	mov	r2, r5
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <_svfiprintf_r+0x1f8>)
 80042c8:	a904      	add	r1, sp, #16
 80042ca:	4638      	mov	r0, r7
 80042cc:	f000 f87a 	bl	80043c4 <_printf_i>
 80042d0:	e7eb      	b.n	80042aa <_svfiprintf_r+0x1c2>
 80042d2:	bf00      	nop
 80042d4:	080049a0 	.word	0x080049a0
 80042d8:	080049aa 	.word	0x080049aa
 80042dc:	00000000 	.word	0x00000000
 80042e0:	08004031 	.word	0x08004031
 80042e4:	080049a6 	.word	0x080049a6

080042e8 <_printf_common>:
 80042e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	4616      	mov	r6, r2
 80042ee:	4699      	mov	r9, r3
 80042f0:	688a      	ldr	r2, [r1, #8]
 80042f2:	690b      	ldr	r3, [r1, #16]
 80042f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bfb8      	it	lt
 80042fc:	4613      	movlt	r3, r2
 80042fe:	6033      	str	r3, [r6, #0]
 8004300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004304:	4607      	mov	r7, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b10a      	cbz	r2, 800430e <_printf_common+0x26>
 800430a:	3301      	adds	r3, #1
 800430c:	6033      	str	r3, [r6, #0]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	0699      	lsls	r1, r3, #26
 8004312:	bf42      	ittt	mi
 8004314:	6833      	ldrmi	r3, [r6, #0]
 8004316:	3302      	addmi	r3, #2
 8004318:	6033      	strmi	r3, [r6, #0]
 800431a:	6825      	ldr	r5, [r4, #0]
 800431c:	f015 0506 	ands.w	r5, r5, #6
 8004320:	d106      	bne.n	8004330 <_printf_common+0x48>
 8004322:	f104 0a19 	add.w	sl, r4, #25
 8004326:	68e3      	ldr	r3, [r4, #12]
 8004328:	6832      	ldr	r2, [r6, #0]
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	42ab      	cmp	r3, r5
 800432e:	dc26      	bgt.n	800437e <_printf_common+0x96>
 8004330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004334:	1e13      	subs	r3, r2, #0
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	bf18      	it	ne
 800433a:	2301      	movne	r3, #1
 800433c:	0692      	lsls	r2, r2, #26
 800433e:	d42b      	bmi.n	8004398 <_printf_common+0xb0>
 8004340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004344:	4649      	mov	r1, r9
 8004346:	4638      	mov	r0, r7
 8004348:	47c0      	blx	r8
 800434a:	3001      	adds	r0, #1
 800434c:	d01e      	beq.n	800438c <_printf_common+0xa4>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	68e5      	ldr	r5, [r4, #12]
 8004352:	6832      	ldr	r2, [r6, #0]
 8004354:	f003 0306 	and.w	r3, r3, #6
 8004358:	2b04      	cmp	r3, #4
 800435a:	bf08      	it	eq
 800435c:	1aad      	subeq	r5, r5, r2
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	6922      	ldr	r2, [r4, #16]
 8004362:	bf0c      	ite	eq
 8004364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004368:	2500      	movne	r5, #0
 800436a:	4293      	cmp	r3, r2
 800436c:	bfc4      	itt	gt
 800436e:	1a9b      	subgt	r3, r3, r2
 8004370:	18ed      	addgt	r5, r5, r3
 8004372:	2600      	movs	r6, #0
 8004374:	341a      	adds	r4, #26
 8004376:	42b5      	cmp	r5, r6
 8004378:	d11a      	bne.n	80043b0 <_printf_common+0xc8>
 800437a:	2000      	movs	r0, #0
 800437c:	e008      	b.n	8004390 <_printf_common+0xa8>
 800437e:	2301      	movs	r3, #1
 8004380:	4652      	mov	r2, sl
 8004382:	4649      	mov	r1, r9
 8004384:	4638      	mov	r0, r7
 8004386:	47c0      	blx	r8
 8004388:	3001      	adds	r0, #1
 800438a:	d103      	bne.n	8004394 <_printf_common+0xac>
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004394:	3501      	adds	r5, #1
 8004396:	e7c6      	b.n	8004326 <_printf_common+0x3e>
 8004398:	18e1      	adds	r1, r4, r3
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	2030      	movs	r0, #48	; 0x30
 800439e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043a2:	4422      	add	r2, r4
 80043a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ac:	3302      	adds	r3, #2
 80043ae:	e7c7      	b.n	8004340 <_printf_common+0x58>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4622      	mov	r2, r4
 80043b4:	4649      	mov	r1, r9
 80043b6:	4638      	mov	r0, r7
 80043b8:	47c0      	blx	r8
 80043ba:	3001      	adds	r0, #1
 80043bc:	d0e6      	beq.n	800438c <_printf_common+0xa4>
 80043be:	3601      	adds	r6, #1
 80043c0:	e7d9      	b.n	8004376 <_printf_common+0x8e>
	...

080043c4 <_printf_i>:
 80043c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	7e0f      	ldrb	r7, [r1, #24]
 80043ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043cc:	2f78      	cmp	r7, #120	; 0x78
 80043ce:	4691      	mov	r9, r2
 80043d0:	4680      	mov	r8, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	469a      	mov	sl, r3
 80043d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043da:	d807      	bhi.n	80043ec <_printf_i+0x28>
 80043dc:	2f62      	cmp	r7, #98	; 0x62
 80043de:	d80a      	bhi.n	80043f6 <_printf_i+0x32>
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	f000 80d8 	beq.w	8004596 <_printf_i+0x1d2>
 80043e6:	2f58      	cmp	r7, #88	; 0x58
 80043e8:	f000 80a3 	beq.w	8004532 <_printf_i+0x16e>
 80043ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043f4:	e03a      	b.n	800446c <_printf_i+0xa8>
 80043f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043fa:	2b15      	cmp	r3, #21
 80043fc:	d8f6      	bhi.n	80043ec <_printf_i+0x28>
 80043fe:	a101      	add	r1, pc, #4	; (adr r1, 8004404 <_printf_i+0x40>)
 8004400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004404:	0800445d 	.word	0x0800445d
 8004408:	08004471 	.word	0x08004471
 800440c:	080043ed 	.word	0x080043ed
 8004410:	080043ed 	.word	0x080043ed
 8004414:	080043ed 	.word	0x080043ed
 8004418:	080043ed 	.word	0x080043ed
 800441c:	08004471 	.word	0x08004471
 8004420:	080043ed 	.word	0x080043ed
 8004424:	080043ed 	.word	0x080043ed
 8004428:	080043ed 	.word	0x080043ed
 800442c:	080043ed 	.word	0x080043ed
 8004430:	0800457d 	.word	0x0800457d
 8004434:	080044a1 	.word	0x080044a1
 8004438:	0800455f 	.word	0x0800455f
 800443c:	080043ed 	.word	0x080043ed
 8004440:	080043ed 	.word	0x080043ed
 8004444:	0800459f 	.word	0x0800459f
 8004448:	080043ed 	.word	0x080043ed
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080043ed 	.word	0x080043ed
 8004454:	080043ed 	.word	0x080043ed
 8004458:	08004567 	.word	0x08004567
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	602a      	str	r2, [r5, #0]
 8004464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800446c:	2301      	movs	r3, #1
 800446e:	e0a3      	b.n	80045b8 <_printf_i+0x1f4>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	6829      	ldr	r1, [r5, #0]
 8004474:	0606      	lsls	r6, r0, #24
 8004476:	f101 0304 	add.w	r3, r1, #4
 800447a:	d50a      	bpl.n	8004492 <_printf_i+0xce>
 800447c:	680e      	ldr	r6, [r1, #0]
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	2e00      	cmp	r6, #0
 8004482:	da03      	bge.n	800448c <_printf_i+0xc8>
 8004484:	232d      	movs	r3, #45	; 0x2d
 8004486:	4276      	negs	r6, r6
 8004488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448c:	485e      	ldr	r0, [pc, #376]	; (8004608 <_printf_i+0x244>)
 800448e:	230a      	movs	r3, #10
 8004490:	e019      	b.n	80044c6 <_printf_i+0x102>
 8004492:	680e      	ldr	r6, [r1, #0]
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800449a:	bf18      	it	ne
 800449c:	b236      	sxthne	r6, r6
 800449e:	e7ef      	b.n	8004480 <_printf_i+0xbc>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	6820      	ldr	r0, [r4, #0]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	6029      	str	r1, [r5, #0]
 80044a8:	0601      	lsls	r1, r0, #24
 80044aa:	d501      	bpl.n	80044b0 <_printf_i+0xec>
 80044ac:	681e      	ldr	r6, [r3, #0]
 80044ae:	e002      	b.n	80044b6 <_printf_i+0xf2>
 80044b0:	0646      	lsls	r6, r0, #25
 80044b2:	d5fb      	bpl.n	80044ac <_printf_i+0xe8>
 80044b4:	881e      	ldrh	r6, [r3, #0]
 80044b6:	4854      	ldr	r0, [pc, #336]	; (8004608 <_printf_i+0x244>)
 80044b8:	2f6f      	cmp	r7, #111	; 0x6f
 80044ba:	bf0c      	ite	eq
 80044bc:	2308      	moveq	r3, #8
 80044be:	230a      	movne	r3, #10
 80044c0:	2100      	movs	r1, #0
 80044c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044c6:	6865      	ldr	r5, [r4, #4]
 80044c8:	60a5      	str	r5, [r4, #8]
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	bfa2      	ittt	ge
 80044ce:	6821      	ldrge	r1, [r4, #0]
 80044d0:	f021 0104 	bicge.w	r1, r1, #4
 80044d4:	6021      	strge	r1, [r4, #0]
 80044d6:	b90e      	cbnz	r6, 80044dc <_printf_i+0x118>
 80044d8:	2d00      	cmp	r5, #0
 80044da:	d04d      	beq.n	8004578 <_printf_i+0x1b4>
 80044dc:	4615      	mov	r5, r2
 80044de:	fbb6 f1f3 	udiv	r1, r6, r3
 80044e2:	fb03 6711 	mls	r7, r3, r1, r6
 80044e6:	5dc7      	ldrb	r7, [r0, r7]
 80044e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ec:	4637      	mov	r7, r6
 80044ee:	42bb      	cmp	r3, r7
 80044f0:	460e      	mov	r6, r1
 80044f2:	d9f4      	bls.n	80044de <_printf_i+0x11a>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d10b      	bne.n	8004510 <_printf_i+0x14c>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	07de      	lsls	r6, r3, #31
 80044fc:	d508      	bpl.n	8004510 <_printf_i+0x14c>
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	6861      	ldr	r1, [r4, #4]
 8004502:	4299      	cmp	r1, r3
 8004504:	bfde      	ittt	le
 8004506:	2330      	movle	r3, #48	; 0x30
 8004508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800450c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004510:	1b52      	subs	r2, r2, r5
 8004512:	6122      	str	r2, [r4, #16]
 8004514:	f8cd a000 	str.w	sl, [sp]
 8004518:	464b      	mov	r3, r9
 800451a:	aa03      	add	r2, sp, #12
 800451c:	4621      	mov	r1, r4
 800451e:	4640      	mov	r0, r8
 8004520:	f7ff fee2 	bl	80042e8 <_printf_common>
 8004524:	3001      	adds	r0, #1
 8004526:	d14c      	bne.n	80045c2 <_printf_i+0x1fe>
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	b004      	add	sp, #16
 800452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004532:	4835      	ldr	r0, [pc, #212]	; (8004608 <_printf_i+0x244>)
 8004534:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004538:	6829      	ldr	r1, [r5, #0]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004540:	6029      	str	r1, [r5, #0]
 8004542:	061d      	lsls	r5, r3, #24
 8004544:	d514      	bpl.n	8004570 <_printf_i+0x1ac>
 8004546:	07df      	lsls	r7, r3, #31
 8004548:	bf44      	itt	mi
 800454a:	f043 0320 	orrmi.w	r3, r3, #32
 800454e:	6023      	strmi	r3, [r4, #0]
 8004550:	b91e      	cbnz	r6, 800455a <_printf_i+0x196>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	f023 0320 	bic.w	r3, r3, #32
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	2310      	movs	r3, #16
 800455c:	e7b0      	b.n	80044c0 <_printf_i+0xfc>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f043 0320 	orr.w	r3, r3, #32
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	2378      	movs	r3, #120	; 0x78
 8004568:	4828      	ldr	r0, [pc, #160]	; (800460c <_printf_i+0x248>)
 800456a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800456e:	e7e3      	b.n	8004538 <_printf_i+0x174>
 8004570:	0659      	lsls	r1, r3, #25
 8004572:	bf48      	it	mi
 8004574:	b2b6      	uxthmi	r6, r6
 8004576:	e7e6      	b.n	8004546 <_printf_i+0x182>
 8004578:	4615      	mov	r5, r2
 800457a:	e7bb      	b.n	80044f4 <_printf_i+0x130>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	6826      	ldr	r6, [r4, #0]
 8004580:	6961      	ldr	r1, [r4, #20]
 8004582:	1d18      	adds	r0, r3, #4
 8004584:	6028      	str	r0, [r5, #0]
 8004586:	0635      	lsls	r5, r6, #24
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	d501      	bpl.n	8004590 <_printf_i+0x1cc>
 800458c:	6019      	str	r1, [r3, #0]
 800458e:	e002      	b.n	8004596 <_printf_i+0x1d2>
 8004590:	0670      	lsls	r0, r6, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0x1c8>
 8004594:	8019      	strh	r1, [r3, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	4615      	mov	r5, r2
 800459c:	e7ba      	b.n	8004514 <_printf_i+0x150>
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	681d      	ldr	r5, [r3, #0]
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7fb fe38 	bl	8000220 <memchr>
 80045b0:	b108      	cbz	r0, 80045b6 <_printf_i+0x1f2>
 80045b2:	1b40      	subs	r0, r0, r5
 80045b4:	6060      	str	r0, [r4, #4]
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	2300      	movs	r3, #0
 80045bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c0:	e7a8      	b.n	8004514 <_printf_i+0x150>
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	462a      	mov	r2, r5
 80045c6:	4649      	mov	r1, r9
 80045c8:	4640      	mov	r0, r8
 80045ca:	47d0      	blx	sl
 80045cc:	3001      	adds	r0, #1
 80045ce:	d0ab      	beq.n	8004528 <_printf_i+0x164>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	079b      	lsls	r3, r3, #30
 80045d4:	d413      	bmi.n	80045fe <_printf_i+0x23a>
 80045d6:	68e0      	ldr	r0, [r4, #12]
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	4298      	cmp	r0, r3
 80045dc:	bfb8      	it	lt
 80045de:	4618      	movlt	r0, r3
 80045e0:	e7a4      	b.n	800452c <_printf_i+0x168>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d09b      	beq.n	8004528 <_printf_i+0x164>
 80045f0:	3501      	adds	r5, #1
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	1a5b      	subs	r3, r3, r1
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dcf2      	bgt.n	80045e2 <_printf_i+0x21e>
 80045fc:	e7eb      	b.n	80045d6 <_printf_i+0x212>
 80045fe:	2500      	movs	r5, #0
 8004600:	f104 0619 	add.w	r6, r4, #25
 8004604:	e7f5      	b.n	80045f2 <_printf_i+0x22e>
 8004606:	bf00      	nop
 8004608:	080049b1 	.word	0x080049b1
 800460c:	080049c2 	.word	0x080049c2

08004610 <memcpy>:
 8004610:	440a      	add	r2, r1
 8004612:	4291      	cmp	r1, r2
 8004614:	f100 33ff 	add.w	r3, r0, #4294967295
 8004618:	d100      	bne.n	800461c <memcpy+0xc>
 800461a:	4770      	bx	lr
 800461c:	b510      	push	{r4, lr}
 800461e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004626:	4291      	cmp	r1, r2
 8004628:	d1f9      	bne.n	800461e <memcpy+0xe>
 800462a:	bd10      	pop	{r4, pc}

0800462c <memmove>:
 800462c:	4288      	cmp	r0, r1
 800462e:	b510      	push	{r4, lr}
 8004630:	eb01 0402 	add.w	r4, r1, r2
 8004634:	d902      	bls.n	800463c <memmove+0x10>
 8004636:	4284      	cmp	r4, r0
 8004638:	4623      	mov	r3, r4
 800463a:	d807      	bhi.n	800464c <memmove+0x20>
 800463c:	1e43      	subs	r3, r0, #1
 800463e:	42a1      	cmp	r1, r4
 8004640:	d008      	beq.n	8004654 <memmove+0x28>
 8004642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800464a:	e7f8      	b.n	800463e <memmove+0x12>
 800464c:	4402      	add	r2, r0
 800464e:	4601      	mov	r1, r0
 8004650:	428a      	cmp	r2, r1
 8004652:	d100      	bne.n	8004656 <memmove+0x2a>
 8004654:	bd10      	pop	{r4, pc}
 8004656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800465a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800465e:	e7f7      	b.n	8004650 <memmove+0x24>

08004660 <_free_r>:
 8004660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004662:	2900      	cmp	r1, #0
 8004664:	d044      	beq.n	80046f0 <_free_r+0x90>
 8004666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466a:	9001      	str	r0, [sp, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f1a1 0404 	sub.w	r4, r1, #4
 8004672:	bfb8      	it	lt
 8004674:	18e4      	addlt	r4, r4, r3
 8004676:	f000 f913 	bl	80048a0 <__malloc_lock>
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <_free_r+0x94>)
 800467c:	9801      	ldr	r0, [sp, #4]
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	b933      	cbnz	r3, 8004690 <_free_r+0x30>
 8004682:	6063      	str	r3, [r4, #4]
 8004684:	6014      	str	r4, [r2, #0]
 8004686:	b003      	add	sp, #12
 8004688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800468c:	f000 b90e 	b.w	80048ac <__malloc_unlock>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d908      	bls.n	80046a6 <_free_r+0x46>
 8004694:	6825      	ldr	r5, [r4, #0]
 8004696:	1961      	adds	r1, r4, r5
 8004698:	428b      	cmp	r3, r1
 800469a:	bf01      	itttt	eq
 800469c:	6819      	ldreq	r1, [r3, #0]
 800469e:	685b      	ldreq	r3, [r3, #4]
 80046a0:	1949      	addeq	r1, r1, r5
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	e7ed      	b.n	8004682 <_free_r+0x22>
 80046a6:	461a      	mov	r2, r3
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b10b      	cbz	r3, 80046b0 <_free_r+0x50>
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	d9fa      	bls.n	80046a6 <_free_r+0x46>
 80046b0:	6811      	ldr	r1, [r2, #0]
 80046b2:	1855      	adds	r5, r2, r1
 80046b4:	42a5      	cmp	r5, r4
 80046b6:	d10b      	bne.n	80046d0 <_free_r+0x70>
 80046b8:	6824      	ldr	r4, [r4, #0]
 80046ba:	4421      	add	r1, r4
 80046bc:	1854      	adds	r4, r2, r1
 80046be:	42a3      	cmp	r3, r4
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	d1e0      	bne.n	8004686 <_free_r+0x26>
 80046c4:	681c      	ldr	r4, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6053      	str	r3, [r2, #4]
 80046ca:	4421      	add	r1, r4
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	e7da      	b.n	8004686 <_free_r+0x26>
 80046d0:	d902      	bls.n	80046d8 <_free_r+0x78>
 80046d2:	230c      	movs	r3, #12
 80046d4:	6003      	str	r3, [r0, #0]
 80046d6:	e7d6      	b.n	8004686 <_free_r+0x26>
 80046d8:	6825      	ldr	r5, [r4, #0]
 80046da:	1961      	adds	r1, r4, r5
 80046dc:	428b      	cmp	r3, r1
 80046de:	bf04      	itt	eq
 80046e0:	6819      	ldreq	r1, [r3, #0]
 80046e2:	685b      	ldreq	r3, [r3, #4]
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	bf04      	itt	eq
 80046e8:	1949      	addeq	r1, r1, r5
 80046ea:	6021      	streq	r1, [r4, #0]
 80046ec:	6054      	str	r4, [r2, #4]
 80046ee:	e7ca      	b.n	8004686 <_free_r+0x26>
 80046f0:	b003      	add	sp, #12
 80046f2:	bd30      	pop	{r4, r5, pc}
 80046f4:	20000530 	.word	0x20000530

080046f8 <sbrk_aligned>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4e0e      	ldr	r6, [pc, #56]	; (8004734 <sbrk_aligned+0x3c>)
 80046fc:	460c      	mov	r4, r1
 80046fe:	6831      	ldr	r1, [r6, #0]
 8004700:	4605      	mov	r5, r0
 8004702:	b911      	cbnz	r1, 800470a <sbrk_aligned+0x12>
 8004704:	f000 f8bc 	bl	8004880 <_sbrk_r>
 8004708:	6030      	str	r0, [r6, #0]
 800470a:	4621      	mov	r1, r4
 800470c:	4628      	mov	r0, r5
 800470e:	f000 f8b7 	bl	8004880 <_sbrk_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d00a      	beq.n	800472c <sbrk_aligned+0x34>
 8004716:	1cc4      	adds	r4, r0, #3
 8004718:	f024 0403 	bic.w	r4, r4, #3
 800471c:	42a0      	cmp	r0, r4
 800471e:	d007      	beq.n	8004730 <sbrk_aligned+0x38>
 8004720:	1a21      	subs	r1, r4, r0
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f8ac 	bl	8004880 <_sbrk_r>
 8004728:	3001      	adds	r0, #1
 800472a:	d101      	bne.n	8004730 <sbrk_aligned+0x38>
 800472c:	f04f 34ff 	mov.w	r4, #4294967295
 8004730:	4620      	mov	r0, r4
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	20000534 	.word	0x20000534

08004738 <_malloc_r>:
 8004738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	1ccd      	adds	r5, r1, #3
 800473e:	f025 0503 	bic.w	r5, r5, #3
 8004742:	3508      	adds	r5, #8
 8004744:	2d0c      	cmp	r5, #12
 8004746:	bf38      	it	cc
 8004748:	250c      	movcc	r5, #12
 800474a:	2d00      	cmp	r5, #0
 800474c:	4607      	mov	r7, r0
 800474e:	db01      	blt.n	8004754 <_malloc_r+0x1c>
 8004750:	42a9      	cmp	r1, r5
 8004752:	d905      	bls.n	8004760 <_malloc_r+0x28>
 8004754:	230c      	movs	r3, #12
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	2600      	movs	r6, #0
 800475a:	4630      	mov	r0, r6
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004760:	4e2e      	ldr	r6, [pc, #184]	; (800481c <_malloc_r+0xe4>)
 8004762:	f000 f89d 	bl	80048a0 <__malloc_lock>
 8004766:	6833      	ldr	r3, [r6, #0]
 8004768:	461c      	mov	r4, r3
 800476a:	bb34      	cbnz	r4, 80047ba <_malloc_r+0x82>
 800476c:	4629      	mov	r1, r5
 800476e:	4638      	mov	r0, r7
 8004770:	f7ff ffc2 	bl	80046f8 <sbrk_aligned>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	4604      	mov	r4, r0
 8004778:	d14d      	bne.n	8004816 <_malloc_r+0xde>
 800477a:	6834      	ldr	r4, [r6, #0]
 800477c:	4626      	mov	r6, r4
 800477e:	2e00      	cmp	r6, #0
 8004780:	d140      	bne.n	8004804 <_malloc_r+0xcc>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4631      	mov	r1, r6
 8004786:	4638      	mov	r0, r7
 8004788:	eb04 0803 	add.w	r8, r4, r3
 800478c:	f000 f878 	bl	8004880 <_sbrk_r>
 8004790:	4580      	cmp	r8, r0
 8004792:	d13a      	bne.n	800480a <_malloc_r+0xd2>
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	3503      	adds	r5, #3
 8004798:	1a6d      	subs	r5, r5, r1
 800479a:	f025 0503 	bic.w	r5, r5, #3
 800479e:	3508      	adds	r5, #8
 80047a0:	2d0c      	cmp	r5, #12
 80047a2:	bf38      	it	cc
 80047a4:	250c      	movcc	r5, #12
 80047a6:	4629      	mov	r1, r5
 80047a8:	4638      	mov	r0, r7
 80047aa:	f7ff ffa5 	bl	80046f8 <sbrk_aligned>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d02b      	beq.n	800480a <_malloc_r+0xd2>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	442b      	add	r3, r5
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	e00e      	b.n	80047d8 <_malloc_r+0xa0>
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	1b52      	subs	r2, r2, r5
 80047be:	d41e      	bmi.n	80047fe <_malloc_r+0xc6>
 80047c0:	2a0b      	cmp	r2, #11
 80047c2:	d916      	bls.n	80047f2 <_malloc_r+0xba>
 80047c4:	1961      	adds	r1, r4, r5
 80047c6:	42a3      	cmp	r3, r4
 80047c8:	6025      	str	r5, [r4, #0]
 80047ca:	bf18      	it	ne
 80047cc:	6059      	strne	r1, [r3, #4]
 80047ce:	6863      	ldr	r3, [r4, #4]
 80047d0:	bf08      	it	eq
 80047d2:	6031      	streq	r1, [r6, #0]
 80047d4:	5162      	str	r2, [r4, r5]
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	4638      	mov	r0, r7
 80047da:	f104 060b 	add.w	r6, r4, #11
 80047de:	f000 f865 	bl	80048ac <__malloc_unlock>
 80047e2:	f026 0607 	bic.w	r6, r6, #7
 80047e6:	1d23      	adds	r3, r4, #4
 80047e8:	1af2      	subs	r2, r6, r3
 80047ea:	d0b6      	beq.n	800475a <_malloc_r+0x22>
 80047ec:	1b9b      	subs	r3, r3, r6
 80047ee:	50a3      	str	r3, [r4, r2]
 80047f0:	e7b3      	b.n	800475a <_malloc_r+0x22>
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	bf0c      	ite	eq
 80047f8:	6032      	streq	r2, [r6, #0]
 80047fa:	605a      	strne	r2, [r3, #4]
 80047fc:	e7ec      	b.n	80047d8 <_malloc_r+0xa0>
 80047fe:	4623      	mov	r3, r4
 8004800:	6864      	ldr	r4, [r4, #4]
 8004802:	e7b2      	b.n	800476a <_malloc_r+0x32>
 8004804:	4634      	mov	r4, r6
 8004806:	6876      	ldr	r6, [r6, #4]
 8004808:	e7b9      	b.n	800477e <_malloc_r+0x46>
 800480a:	230c      	movs	r3, #12
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4638      	mov	r0, r7
 8004810:	f000 f84c 	bl	80048ac <__malloc_unlock>
 8004814:	e7a1      	b.n	800475a <_malloc_r+0x22>
 8004816:	6025      	str	r5, [r4, #0]
 8004818:	e7de      	b.n	80047d8 <_malloc_r+0xa0>
 800481a:	bf00      	nop
 800481c:	20000530 	.word	0x20000530

08004820 <_realloc_r>:
 8004820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004824:	4680      	mov	r8, r0
 8004826:	4614      	mov	r4, r2
 8004828:	460e      	mov	r6, r1
 800482a:	b921      	cbnz	r1, 8004836 <_realloc_r+0x16>
 800482c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004830:	4611      	mov	r1, r2
 8004832:	f7ff bf81 	b.w	8004738 <_malloc_r>
 8004836:	b92a      	cbnz	r2, 8004844 <_realloc_r+0x24>
 8004838:	f7ff ff12 	bl	8004660 <_free_r>
 800483c:	4625      	mov	r5, r4
 800483e:	4628      	mov	r0, r5
 8004840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004844:	f000 f838 	bl	80048b8 <_malloc_usable_size_r>
 8004848:	4284      	cmp	r4, r0
 800484a:	4607      	mov	r7, r0
 800484c:	d802      	bhi.n	8004854 <_realloc_r+0x34>
 800484e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004852:	d812      	bhi.n	800487a <_realloc_r+0x5a>
 8004854:	4621      	mov	r1, r4
 8004856:	4640      	mov	r0, r8
 8004858:	f7ff ff6e 	bl	8004738 <_malloc_r>
 800485c:	4605      	mov	r5, r0
 800485e:	2800      	cmp	r0, #0
 8004860:	d0ed      	beq.n	800483e <_realloc_r+0x1e>
 8004862:	42bc      	cmp	r4, r7
 8004864:	4622      	mov	r2, r4
 8004866:	4631      	mov	r1, r6
 8004868:	bf28      	it	cs
 800486a:	463a      	movcs	r2, r7
 800486c:	f7ff fed0 	bl	8004610 <memcpy>
 8004870:	4631      	mov	r1, r6
 8004872:	4640      	mov	r0, r8
 8004874:	f7ff fef4 	bl	8004660 <_free_r>
 8004878:	e7e1      	b.n	800483e <_realloc_r+0x1e>
 800487a:	4635      	mov	r5, r6
 800487c:	e7df      	b.n	800483e <_realloc_r+0x1e>
	...

08004880 <_sbrk_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d06      	ldr	r5, [pc, #24]	; (800489c <_sbrk_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	f7fc fb6e 	bl	8000f6c <_sbrk>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_sbrk_r+0x1a>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_sbrk_r+0x1a>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000538 	.word	0x20000538

080048a0 <__malloc_lock>:
 80048a0:	4801      	ldr	r0, [pc, #4]	; (80048a8 <__malloc_lock+0x8>)
 80048a2:	f000 b811 	b.w	80048c8 <__retarget_lock_acquire_recursive>
 80048a6:	bf00      	nop
 80048a8:	2000053c 	.word	0x2000053c

080048ac <__malloc_unlock>:
 80048ac:	4801      	ldr	r0, [pc, #4]	; (80048b4 <__malloc_unlock+0x8>)
 80048ae:	f000 b80c 	b.w	80048ca <__retarget_lock_release_recursive>
 80048b2:	bf00      	nop
 80048b4:	2000053c 	.word	0x2000053c

080048b8 <_malloc_usable_size_r>:
 80048b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048bc:	1f18      	subs	r0, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbc      	itt	lt
 80048c2:	580b      	ldrlt	r3, [r1, r0]
 80048c4:	18c0      	addlt	r0, r0, r3
 80048c6:	4770      	bx	lr

080048c8 <__retarget_lock_acquire_recursive>:
 80048c8:	4770      	bx	lr

080048ca <__retarget_lock_release_recursive>:
 80048ca:	4770      	bx	lr

080048cc <_init>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr

080048d8 <_fini>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr
